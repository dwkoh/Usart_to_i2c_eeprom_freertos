
Usart_to_i2c_eeprom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004de0  08004de0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08004de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          000000f0  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000160  20000160  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000b488  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001b7c  00000000  00000000  0002b528  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a58  00000000  00000000  0002d0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000988  00000000  00000000  0002db00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004fb7  00000000  00000000  0002e488  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000035d3  00000000  00000000  0003343f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00036a12  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002fa8  00000000  00000000  00036a90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d34 	.word	0x08004d34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004d34 	.word	0x08004d34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	4a17      	ldr	r2, [pc, #92]	; (8000540 <MX_GPIO_Init+0x68>)
 80004e4:	4b16      	ldr	r3, [pc, #88]	; (8000540 <MX_GPIO_Init+0x68>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b14      	ldr	r3, [pc, #80]	; (8000540 <MX_GPIO_Init+0x68>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	4a10      	ldr	r2, [pc, #64]	; (8000540 <MX_GPIO_Init+0x68>)
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <MX_GPIO_Init+0x68>)
 8000502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000504:	f043 0302 	orr.w	r3, r3, #2
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <MX_GPIO_Init+0x68>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0302 	and.w	r3, r3, #2
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	4a09      	ldr	r2, [pc, #36]	; (8000540 <MX_GPIO_Init+0x68>)
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_GPIO_Init+0x68>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_GPIO_Init+0x68>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40023800 	.word	0x40023800

08000544 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <MX_I2C2_Init+0x50>)
 800054a:	4a13      	ldr	r2, [pc, #76]	; (8000598 <MX_I2C2_Init+0x54>)
 800054c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_I2C2_Init+0x50>)
 8000550:	4a12      	ldr	r2, [pc, #72]	; (800059c <MX_I2C2_Init+0x58>)
 8000552:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_I2C2_Init+0x50>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_I2C2_Init+0x50>)
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_I2C2_Init+0x50>)
 8000562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000566:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <MX_I2C2_Init+0x50>)
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_I2C2_Init+0x50>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <MX_I2C2_Init+0x50>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_I2C2_Init+0x50>)
 800057c:	2200      	movs	r2, #0
 800057e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <MX_I2C2_Init+0x50>)
 8000582:	f000 fdef 	bl	8001164 <HAL_I2C_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800058c:	f000 f8f2 	bl	8000774 <Error_Handler>
  }

}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000098 	.word	0x20000098
 8000598:	40005800 	.word	0x40005800
 800059c:	000186a0 	.word	0x000186a0

080005a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <HAL_I2C_MspInit+0xa4>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d13c      	bne.n	800063c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4a20      	ldr	r2, [pc, #128]	; (8000648 <HAL_I2C_MspInit+0xa8>)
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <HAL_I2C_MspInit+0xa8>)
 80005ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <HAL_I2C_MspInit+0xa8>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    PB12     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80005de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80005e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005e4:	2312      	movs	r3, #18
 80005e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ec:	2303      	movs	r3, #3
 80005ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80005f0:	2304      	movs	r3, #4
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	4814      	ldr	r0, [pc, #80]	; (800064c <HAL_I2C_MspInit+0xac>)
 80005fc:	f000 fc18 	bl	8000e30 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	4a10      	ldr	r2, [pc, #64]	; (8000648 <HAL_I2C_MspInit+0xa8>)
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <HAL_I2C_MspInit+0xa8>)
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800060e:	6413      	str	r3, [r2, #64]	; 0x40
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <HAL_I2C_MspInit+0xa8>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	2021      	movs	r0, #33	; 0x21
 8000622:	f000 fb9e 	bl	8000d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000626:	2021      	movs	r0, #33	; 0x21
 8000628:	f000 fbb7 	bl	8000d9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	2022      	movs	r0, #34	; 0x22
 8000632:	f000 fb96 	bl	8000d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000636:	2022      	movs	r0, #34	; 0x22
 8000638:	f000 fbaf 	bl	8000d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800063c:	bf00      	nop
 800063e:	3728      	adds	r7, #40	; 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40005800 	.word	0x40005800
 8000648:	40023800 	.word	0x40023800
 800064c:	40020400 	.word	0x40020400

08000650 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <_write>:

int _write(int file, uint8_t *p, int len) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	b29a      	uxth	r2, r3
 8000674:	230a      	movs	r3, #10
 8000676:	68b9      	ldr	r1, [r7, #8]
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <_write+0x24>)
 800067a:	f002 ffd1 	bl	8003620 <HAL_UART_Transmit>
	return len;
 800067e:	687b      	ldr	r3, [r7, #4]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200000ec 	.word	0x200000ec

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 f9fa 	bl	8000a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f810 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f7ff ff1e 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C2_Init();
 800069c:	f7ff ff52 	bl	8000544 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 80006a0:	f000 f978 	bl	8000994 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Hello world\n");
 80006a4:	4803      	ldr	r0, [pc, #12]	; (80006b4 <main+0x28>)
 80006a6:	f003 ff33 	bl	8004510 <puts>
	  HAL_Delay(1000);
 80006aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ae:	f000 fa5d 	bl	8000b6c <HAL_Delay>
  {
 80006b2:	e7f7      	b.n	80006a4 <main+0x18>
 80006b4:	08004d4c 	.word	0x08004d4c

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 febe 	bl	8004448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4a22      	ldr	r2, [pc, #136]	; (800076c <SystemClock_Config+0xb4>)
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <SystemClock_Config+0xb4>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <SystemClock_Config+0xb4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <SystemClock_Config+0xb8>)
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <SystemClock_Config+0xb8>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <SystemClock_Config+0xb8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f002 fadf 	bl	8002cec <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000734:	f000 f81e 	bl	8000774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fd3a 	bl	80031cc <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800075e:	f000 f809 	bl	8000774 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <HAL_MspInit+0x4c>)
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_MspInit+0x4c>)
 8000792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000798:	6453      	str	r3, [r2, #68]	; 0x44
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <HAL_MspInit+0x4c>)
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <HAL_MspInit+0x4c>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <MemManage_Handler+0x4>

080007ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 f980 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <I2C2_EV_IRQHandler+0x10>)
 8000836:	f000 fdcd 	bl	80013d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000098 	.word	0x20000098

08000844 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <I2C2_ER_IRQHandler+0x10>)
 800084a:	f000 ff12 	bl	8001672 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000098 	.word	0x20000098

08000858 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <USART3_IRQHandler+0x10>)
 800085e:	f002 ff77 	bl	8003750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000ec 	.word	0x200000ec

0800086c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	e00a      	b.n	8000894 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800087e:	68bc      	ldr	r4, [r7, #8]
 8000880:	1c63      	adds	r3, r4, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	f3af 8000 	nop.w
 8000888:	4603      	mov	r3, r0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	429a      	cmp	r2, r3
 800089a:	dbf0      	blt.n	800087e <_read+0x12>
	}

return len;
 800089c:	687b      	ldr	r3, [r7, #4]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	371c      	adds	r7, #28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd90      	pop	{r4, r7, pc}
	...

080008a8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <_sbrk+0x50>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x16>
		heap_end = &end;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <_sbrk+0x50>)
 80008ba:	4a10      	ldr	r2, [pc, #64]	; (80008fc <_sbrk+0x54>)
 80008bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <_sbrk+0x50>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <_sbrk+0x50>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4413      	add	r3, r2
 80008cc:	466a      	mov	r2, sp
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d907      	bls.n	80008e2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80008d2:	f003 fd8f 	bl	80043f4 <__errno>
 80008d6:	4602      	mov	r2, r0
 80008d8:	230c      	movs	r3, #12
 80008da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80008dc:	f04f 33ff 	mov.w	r3, #4294967295
 80008e0:	e006      	b.n	80008f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <_sbrk+0x50>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a03      	ldr	r2, [pc, #12]	; (80008f8 <_sbrk+0x50>)
 80008ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	20000160 	.word	0x20000160

08000900 <_close>:

int _close(int file)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	return -1;
 8000908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000928:	605a      	str	r2, [r3, #4]
	return 0;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <_isatty>:

int _isatty(int file)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	return 1;
 8000940:	2301      	movs	r3, #1
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800094e:	b480      	push	{r7}
 8000950:	b085      	sub	sp, #20
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
	return 0;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800096c:	4a08      	ldr	r2, [pc, #32]	; (8000990 <SystemInit+0x28>)
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <SystemInit+0x28>)
 8000970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SystemInit+0x28>)
 800097e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000982:	609a      	str	r2, [r3, #8]
#endif
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART3_UART_Init+0x4c>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <MX_USART3_UART_Init+0x50>)
 800099c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_USART3_UART_Init+0x4c>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART3_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART3_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART3_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART3_UART_Init+0x4c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART3_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART3_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USART3_UART_Init+0x4c>)
 80009cc:	f002 fdce 	bl	800356c <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009d6:	f7ff fecd 	bl	8000774 <Error_Handler>
  }

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000ec 	.word	0x200000ec
 80009e4:	40004800 	.word	0x40004800

080009e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <HAL_UART_MspInit+0x94>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d134      	bne.n	8000a74 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <HAL_UART_MspInit+0x98>)
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <HAL_UART_MspInit+0x98>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <HAL_UART_MspInit+0x98>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <HAL_UART_MspInit+0x98>)
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_UART_MspInit+0x98>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_UART_MspInit+0x98>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a54:	2307      	movs	r3, #7
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4809      	ldr	r0, [pc, #36]	; (8000a84 <HAL_UART_MspInit+0x9c>)
 8000a60:	f000 f9e6 	bl	8000e30 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	2027      	movs	r0, #39	; 0x27
 8000a6a:	f000 f97a 	bl	8000d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a6e:	2027      	movs	r0, #39	; 0x27
 8000a70:	f000 f993 	bl	8000d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a74:	bf00      	nop
 8000a76:	3728      	adds	r7, #40	; 0x28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40004800 	.word	0x40004800
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020800 	.word	0x40020800

08000a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_Init+0x40>)
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_Init+0x40>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a98:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <HAL_Init+0x40>)
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <HAL_Init+0x40>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_Init+0x40>)
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_Init+0x40>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f94b 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 f808 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abc:	f7ff fe62 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023c00 	.word	0x40023c00

08000acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_InitTick+0x54>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_InitTick+0x58>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f963 	bl	8000db6 <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00e      	b.n	8000b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d80a      	bhi.n	8000b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f000 f92b 	bl	8000d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <HAL_InitTick+0x5c>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e000      	b.n	8000b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000004 	.word	0x20000004

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x20>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_IncTick+0x24>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000158 	.word	0x20000158

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000158 	.word	0x20000158

08000b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b74:	f7ff ffee 	bl	8000b54 <HAL_GetTick>
 8000b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b84:	d005      	beq.n	8000b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_Delay+0x40>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b92:	bf00      	nop
 8000b94:	f7ff ffde 	bl	8000b54 <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1ad2      	subs	r2, r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d3f7      	bcc.n	8000b94 <HAL_Delay+0x28>
  {
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000008 	.word	0x20000008

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	4909      	ldr	r1, [pc, #36]	; (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	095b      	lsrs	r3, r3, #5
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	f002 021f 	and.w	r2, r2, #31
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	490d      	ldr	r1, [pc, #52]	; (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	4909      	ldr	r1, [pc, #36]	; (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	2201      	movs	r2, #1
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	1e5a      	subs	r2, r3, #1
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cea:	2101      	movs	r1, #1
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	1e59      	subs	r1, r3, #1
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f7ff ff90 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff2b 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff40 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff90 	bl	8000ca4 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5f 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff33 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffa2 	bl	8000d08 <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d004      	beq.n	8000dec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e00c      	b.n	8000e06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2205      	movs	r2, #5
 8000df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	6812      	ldr	r2, [r2, #0]
 8000dfc:	6812      	ldr	r2, [r2, #0]
 8000dfe:	f022 0201 	bic.w	r2, r2, #1
 8000e02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e20:	b2db      	uxtb	r3, r3
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e16b      	b.n	8001124 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 815a 	bne.w	800111e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d00b      	beq.n	8000e8a <HAL_GPIO_Init+0x5a>
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d007      	beq.n	8000e8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e7e:	2b11      	cmp	r3, #17
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b12      	cmp	r3, #18
 8000e88:	d130      	bne.n	8000eec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	f003 0201 	and.w	r2, r3, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0xfc>
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b12      	cmp	r3, #18
 8000f2a:	d123      	bne.n	8000f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0203 	and.w	r2, r3, #3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80b4 	beq.w	800111e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4a5f      	ldr	r2, [pc, #380]	; (8001138 <HAL_GPIO_Init+0x308>)
 8000fbc:	4b5e      	ldr	r3, [pc, #376]	; (8001138 <HAL_GPIO_Init+0x308>)
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b5c      	ldr	r3, [pc, #368]	; (8001138 <HAL_GPIO_Init+0x308>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a5a      	ldr	r2, [pc, #360]	; (800113c <HAL_GPIO_Init+0x30c>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a51      	ldr	r2, [pc, #324]	; (8001140 <HAL_GPIO_Init+0x310>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d02b      	beq.n	8001056 <HAL_GPIO_Init+0x226>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a50      	ldr	r2, [pc, #320]	; (8001144 <HAL_GPIO_Init+0x314>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d025      	beq.n	8001052 <HAL_GPIO_Init+0x222>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4f      	ldr	r2, [pc, #316]	; (8001148 <HAL_GPIO_Init+0x318>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <HAL_GPIO_Init+0x21e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4e      	ldr	r2, [pc, #312]	; (800114c <HAL_GPIO_Init+0x31c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x21a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4d      	ldr	r2, [pc, #308]	; (8001150 <HAL_GPIO_Init+0x320>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x216>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4c      	ldr	r2, [pc, #304]	; (8001154 <HAL_GPIO_Init+0x324>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x212>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4b      	ldr	r2, [pc, #300]	; (8001158 <HAL_GPIO_Init+0x328>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x20e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4a      	ldr	r2, [pc, #296]	; (800115c <HAL_GPIO_Init+0x32c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x20a>
 8001036:	2307      	movs	r3, #7
 8001038:	e00e      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103a:	2308      	movs	r3, #8
 800103c:	e00c      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800103e:	2306      	movs	r3, #6
 8001040:	e00a      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001042:	2305      	movs	r3, #5
 8001044:	e008      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001046:	2304      	movs	r3, #4
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104a:	2303      	movs	r3, #3
 800104c:	e004      	b.n	8001058 <HAL_GPIO_Init+0x228>
 800104e:	2302      	movs	r3, #2
 8001050:	e002      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <HAL_GPIO_Init+0x228>
 8001056:	2300      	movs	r3, #0
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	f002 0203 	and.w	r2, r2, #3
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	4093      	lsls	r3, r2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001068:	4934      	ldr	r1, [pc, #208]	; (800113c <HAL_GPIO_Init+0x30c>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001076:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <HAL_GPIO_Init+0x330>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800109a:	4a31      	ldr	r2, [pc, #196]	; (8001160 <HAL_GPIO_Init+0x330>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a0:	4b2f      	ldr	r3, [pc, #188]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c4:	4a26      	ldr	r2, [pc, #152]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <HAL_GPIO_Init+0x330>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001118:	4a11      	ldr	r2, [pc, #68]	; (8001160 <HAL_GPIO_Init+0x330>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3301      	adds	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	f67f ae90 	bls.w	8000e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800112c:	bf00      	nop
 800112e:	3724      	adds	r7, #36	; 0x24
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40023800 	.word	0x40023800
 800113c:	40013800 	.word	0x40013800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021000 	.word	0x40021000
 8001154:	40021400 	.word	0x40021400
 8001158:	40021800 	.word	0x40021800
 800115c:	40021c00 	.word	0x40021c00
 8001160:	40013c00 	.word	0x40013c00

08001164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e11f      	b.n	80013b6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d106      	bne.n	8001190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fa08 	bl	80005a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2224      	movs	r2, #36	; 0x24
 8001194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	f022 0201 	bic.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011c8:	f002 f9a8 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 80011cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4a7b      	ldr	r2, [pc, #492]	; (80013c0 <HAL_I2C_Init+0x25c>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d807      	bhi.n	80011e8 <HAL_I2C_Init+0x84>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4a7a      	ldr	r2, [pc, #488]	; (80013c4 <HAL_I2C_Init+0x260>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	bf94      	ite	ls
 80011e0:	2301      	movls	r3, #1
 80011e2:	2300      	movhi	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	e006      	b.n	80011f6 <HAL_I2C_Init+0x92>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4a77      	ldr	r2, [pc, #476]	; (80013c8 <HAL_I2C_Init+0x264>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	bf94      	ite	ls
 80011f0:	2301      	movls	r3, #1
 80011f2:	2300      	movhi	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e0db      	b.n	80013b6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4a72      	ldr	r2, [pc, #456]	; (80013cc <HAL_I2C_Init+0x268>)
 8001202:	fba2 2303 	umull	r2, r3, r2, r3
 8001206:	0c9b      	lsrs	r3, r3, #18
 8001208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	6852      	ldr	r2, [r2, #4]
 8001214:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	430a      	orrs	r2, r1
 800121c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4863      	ldr	r0, [pc, #396]	; (80013c0 <HAL_I2C_Init+0x25c>)
 8001232:	4283      	cmp	r3, r0
 8001234:	d802      	bhi.n	800123c <HAL_I2C_Init+0xd8>
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3301      	adds	r3, #1
 800123a:	e009      	b.n	8001250 <HAL_I2C_Init+0xec>
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001242:	fb00 f303 	mul.w	r3, r0, r3
 8001246:	4862      	ldr	r0, [pc, #392]	; (80013d0 <HAL_I2C_Init+0x26c>)
 8001248:	fba0 0303 	umull	r0, r3, r0, r3
 800124c:	099b      	lsrs	r3, r3, #6
 800124e:	3301      	adds	r3, #1
 8001250:	430b      	orrs	r3, r1
 8001252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001262:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4955      	ldr	r1, [pc, #340]	; (80013c0 <HAL_I2C_Init+0x25c>)
 800126c:	428b      	cmp	r3, r1
 800126e:	d80d      	bhi.n	800128c <HAL_I2C_Init+0x128>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1e59      	subs	r1, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fbb1 f3f3 	udiv	r3, r1, r3
 800127e:	3301      	adds	r3, #1
 8001280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001284:	2b04      	cmp	r3, #4
 8001286:	bf38      	it	cc
 8001288:	2304      	movcc	r3, #4
 800128a:	e04f      	b.n	800132c <HAL_I2C_Init+0x1c8>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d111      	bne.n	80012b8 <HAL_I2C_Init+0x154>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	1e5c      	subs	r4, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6859      	ldr	r1, [r3, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	440b      	add	r3, r1
 80012a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80012a6:	3301      	adds	r3, #1
 80012a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf0c      	ite	eq
 80012b0:	2301      	moveq	r3, #1
 80012b2:	2300      	movne	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	e012      	b.n	80012de <HAL_I2C_Init+0x17a>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	1e5c      	subs	r4, r3, #1
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6859      	ldr	r1, [r3, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	0099      	lsls	r1, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	fbb4 f3f3 	udiv	r3, r4, r3
 80012ce:	3301      	adds	r3, #1
 80012d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bf0c      	ite	eq
 80012d8:	2301      	moveq	r3, #1
 80012da:	2300      	movne	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_I2C_Init+0x182>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e022      	b.n	800132c <HAL_I2C_Init+0x1c8>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10e      	bne.n	800130c <HAL_I2C_Init+0x1a8>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	1e5c      	subs	r4, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6859      	ldr	r1, [r3, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	440b      	add	r3, r1
 80012fc:	fbb4 f3f3 	udiv	r3, r4, r3
 8001300:	3301      	adds	r3, #1
 8001302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800130a:	e00f      	b.n	800132c <HAL_I2C_Init+0x1c8>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1e5c      	subs	r4, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6859      	ldr	r1, [r3, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	0099      	lsls	r1, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001322:	3301      	adds	r3, #1
 8001324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800132c:	4313      	orrs	r3, r2
 800132e:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	69d0      	ldr	r0, [r2, #28]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6a12      	ldr	r2, [r2, #32]
 8001346:	4302      	orrs	r2, r0
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800135a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	6908      	ldr	r0, [r1, #16]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	68c9      	ldr	r1, [r1, #12]
 8001366:	4301      	orrs	r1, r0
 8001368:	430b      	orrs	r3, r1
 800136a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	68d2      	ldr	r2, [r2, #12]
 8001376:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6950      	ldr	r0, [r2, #20]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6992      	ldr	r2, [r2, #24]
 8001382:	4302      	orrs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	f042 0201 	orr.w	r2, r2, #1
 8001396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2220      	movs	r2, #32
 80013a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd90      	pop	{r4, r7, pc}
 80013be:	bf00      	nop
 80013c0:	000186a0 	.word	0x000186a0
 80013c4:	001e847f 	.word	0x001e847f
 80013c8:	003d08ff 	.word	0x003d08ff
 80013cc:	431bde83 	.word	0x431bde83
 80013d0:	10624dd3 	.word	0x10624dd3

080013d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80013f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	2b10      	cmp	r3, #16
 8001402:	d003      	beq.n	800140c <HAL_I2C_EV_IRQHandler+0x38>
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b40      	cmp	r3, #64	; 0x40
 8001408:	f040 80ad 	bne.w	8001566 <HAL_I2C_EV_IRQHandler+0x192>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10d      	bne.n	8001442 <HAL_I2C_EV_IRQHandler+0x6e>
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800142c:	d003      	beq.n	8001436 <HAL_I2C_EV_IRQHandler+0x62>
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001434:	d101      	bne.n	800143a <HAL_I2C_EV_IRQHandler+0x66>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <HAL_I2C_EV_IRQHandler+0x68>
 800143a:	2300      	movs	r3, #0
 800143c:	2b01      	cmp	r3, #1
 800143e:	f000 8110 	beq.w	8001662 <HAL_I2C_EV_IRQHandler+0x28e>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00b      	beq.n	8001464 <HAL_I2C_EV_IRQHandler+0x90>
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f001 fc2c 	bl	8002cb4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 fd3d 	bl	8001edc <I2C_Master_SB>
 8001462:	e07f      	b.n	8001564 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <HAL_I2C_EV_IRQHandler+0xac>
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 fdb3 	bl	8001fe4 <I2C_Master_ADD10>
 800147e:	e071      	b.n	8001564 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d008      	beq.n	800149c <HAL_I2C_EV_IRQHandler+0xc8>
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fdcf 	bl	8002038 <I2C_Master_ADDR>
 800149a:	e063      	b.n	8001564 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d032      	beq.n	800150c <HAL_I2C_EV_IRQHandler+0x138>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014b4:	f000 80d7 	beq.w	8001666 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00d      	beq.n	80014de <HAL_I2C_EV_IRQHandler+0x10a>
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <HAL_I2C_EV_IRQHandler+0x10a>
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d103      	bne.n	80014de <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f9d2 	bl	8001880 <I2C_MasterTransmit_TXE>
 80014dc:	e042      	b.n	8001564 <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80be 	beq.w	8001666 <HAL_I2C_EV_IRQHandler+0x292>
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80b8 	beq.w	8001666 <HAL_I2C_EV_IRQHandler+0x292>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	2b10      	cmp	r3, #16
 80014fa:	d103      	bne.n	8001504 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fa5b 	bl	80019b8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001502:	e0b0      	b.n	8001666 <HAL_I2C_EV_IRQHandler+0x292>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 fabf 	bl	8001a88 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800150a:	e0ac      	b.n	8001666 <HAL_I2C_EV_IRQHandler+0x292>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800151a:	f000 80a4 	beq.w	8001666 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00d      	beq.n	8001544 <HAL_I2C_EV_IRQHandler+0x170>
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152e:	2b00      	cmp	r3, #0
 8001530:	d008      	beq.n	8001544 <HAL_I2C_EV_IRQHandler+0x170>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d103      	bne.n	8001544 <HAL_I2C_EV_IRQHandler+0x170>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 fb32 	bl	8001ba6 <I2C_MasterReceive_RXNE>
 8001542:	e00f      	b.n	8001564 <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 808b 	beq.w	8001666 <HAL_I2C_EV_IRQHandler+0x292>
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8085 	beq.w	8001666 <HAL_I2C_EV_IRQHandler+0x292>
        {
          I2C_MasterReceive_BTF(hi2c);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 fbd3 	bl	8001d08 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001562:	e080      	b.n	8001666 <HAL_I2C_EV_IRQHandler+0x292>
 8001564:	e07f      	b.n	8001666 <HAL_I2C_EV_IRQHandler+0x292>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <HAL_I2C_EV_IRQHandler+0x1a4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	e007      	b.n	8001588 <HAL_I2C_EV_IRQHandler+0x1b4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d011      	beq.n	80015b6 <HAL_I2C_EV_IRQHandler+0x1e2>
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00c      	beq.n	80015b6 <HAL_I2C_EV_IRQHandler+0x1e2>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_I2C_EV_IRQHandler+0x1d8>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80015ac:	69b9      	ldr	r1, [r7, #24]
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 ff91 	bl	80024d6 <I2C_Slave_ADDR>
 80015b4:	e05a      	b.n	800166c <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_I2C_EV_IRQHandler+0x1fe>
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_I2C_EV_IRQHandler+0x1fe>
    {
      I2C_Slave_STOPF(hi2c);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 ffc6 	bl	800255c <I2C_Slave_STOPF>
 80015d0:	e04c      	b.n	800166c <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80015d2:	7bbb      	ldrb	r3, [r7, #14]
 80015d4:	2b21      	cmp	r3, #33	; 0x21
 80015d6:	d002      	beq.n	80015de <HAL_I2C_EV_IRQHandler+0x20a>
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	2b29      	cmp	r3, #41	; 0x29
 80015dc:	d120      	bne.n	8001620 <HAL_I2C_EV_IRQHandler+0x24c>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00d      	beq.n	8001604 <HAL_I2C_EV_IRQHandler+0x230>
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d008      	beq.n	8001604 <HAL_I2C_EV_IRQHandler+0x230>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d103      	bne.n	8001604 <HAL_I2C_EV_IRQHandler+0x230>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 feac 	bl	800235a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001602:	e032      	b.n	800166a <HAL_I2C_EV_IRQHandler+0x296>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b00      	cmp	r3, #0
 800160c:	d02d      	beq.n	800166a <HAL_I2C_EV_IRQHandler+0x296>
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001614:	2b00      	cmp	r3, #0
 8001616:	d028      	beq.n	800166a <HAL_I2C_EV_IRQHandler+0x296>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 fedb 	bl	80023d4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800161e:	e024      	b.n	800166a <HAL_I2C_EV_IRQHandler+0x296>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00d      	beq.n	8001646 <HAL_I2C_EV_IRQHandler+0x272>
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_I2C_EV_IRQHandler+0x272>
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	d103      	bne.n	8001646 <HAL_I2C_EV_IRQHandler+0x272>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fee9 	bl	8002416 <I2C_SlaveReceive_RXNE>
 8001644:	e012      	b.n	800166c <HAL_I2C_EV_IRQHandler+0x298>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00d      	beq.n	800166c <HAL_I2C_EV_IRQHandler+0x298>
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001656:	2b00      	cmp	r3, #0
 8001658:	d008      	beq.n	800166c <HAL_I2C_EV_IRQHandler+0x298>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 ff19 	bl	8002492 <I2C_SlaveReceive_BTF>
 8001660:	e004      	b.n	800166c <HAL_I2C_EV_IRQHandler+0x298>
      return;
 8001662:	bf00      	nop
 8001664:	e002      	b.n	800166c <HAL_I2C_EV_IRQHandler+0x298>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001666:	bf00      	nop
 8001668:	e000      	b.n	800166c <HAL_I2C_EV_IRQHandler+0x298>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800166a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800166c:	3720      	adds	r7, #32
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b08a      	sub	sp, #40	; 0x28
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001694:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00d      	beq.n	80016bc <HAL_I2C_ER_IRQHandler+0x4a>
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d008      	beq.n	80016bc <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80016ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00d      	beq.n	80016e2 <HAL_I2C_ER_IRQHandler+0x70>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80016e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d03e      	beq.n	800176a <HAL_I2C_ER_IRQHandler+0xf8>
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d039      	beq.n	800176a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80016f6:	7efb      	ldrb	r3, [r7, #27]
 80016f8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fe:	b29b      	uxth	r3, r3
 8001700:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001708:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001710:	7ebb      	ldrb	r3, [r7, #26]
 8001712:	2b20      	cmp	r3, #32
 8001714:	d112      	bne.n	800173c <HAL_I2C_ER_IRQHandler+0xca>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10f      	bne.n	800173c <HAL_I2C_ER_IRQHandler+0xca>
 800171c:	7cfb      	ldrb	r3, [r7, #19]
 800171e:	2b21      	cmp	r3, #33	; 0x21
 8001720:	d008      	beq.n	8001734 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001722:	7cfb      	ldrb	r3, [r7, #19]
 8001724:	2b29      	cmp	r3, #41	; 0x29
 8001726:	d005      	beq.n	8001734 <HAL_I2C_ER_IRQHandler+0xc2>
 8001728:	7cfb      	ldrb	r3, [r7, #19]
 800172a:	2b28      	cmp	r3, #40	; 0x28
 800172c:	d106      	bne.n	800173c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b21      	cmp	r3, #33	; 0x21
 8001732:	d103      	bne.n	800173c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f001 f841 	bl	80027bc <I2C_Slave_AF>
 800173a:	e016      	b.n	800176a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001744:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800174e:	7efb      	ldrb	r3, [r7, #27]
 8001750:	2b10      	cmp	r3, #16
 8001752:	d002      	beq.n	800175a <HAL_I2C_ER_IRQHandler+0xe8>
 8001754:	7efb      	ldrb	r3, [r7, #27]
 8001756:	2b40      	cmp	r3, #64	; 0x40
 8001758:	d107      	bne.n	800176a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001768:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00d      	beq.n	8001790 <HAL_I2C_ER_IRQHandler+0x11e>
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d008      	beq.n	8001790 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800178e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	2b00      	cmp	r3, #0
 8001794:	d008      	beq.n	80017a8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f001 f87a 	bl	800289c <I2C_ITError>
  }
}
 80017a8:	bf00      	nop
 80017aa:	3728      	adds	r7, #40	; 0x28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	70fb      	strb	r3, [r7, #3]
 800180c:	4613      	mov	r3, r2
 800180e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800188e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001896:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d150      	bne.n	8001948 <I2C_MasterTransmit_TXE+0xc8>
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	2b21      	cmp	r3, #33	; 0x21
 80018aa:	d14d      	bne.n	8001948 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d01d      	beq.n	80018ee <I2C_MasterTransmit_TXE+0x6e>
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b20      	cmp	r3, #32
 80018b6:	d01a      	beq.n	80018ee <I2C_MasterTransmit_TXE+0x6e>
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018be:	d016      	beq.n	80018ee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	6852      	ldr	r2, [r2, #4]
 80018ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018ce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2211      	movs	r2, #17
 80018d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2220      	movs	r2, #32
 80018e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff62 	bl	80017b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018ec:	e060      	b.n	80019b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	6852      	ldr	r2, [r2, #4]
 80018f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018fc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800190c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b40      	cmp	r3, #64	; 0x40
 8001926:	d107      	bne.n	8001938 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff7d 	bl	8001830 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001936:	e03b      	b.n	80019b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff35 	bl	80017b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001946:	e033      	b.n	80019b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b21      	cmp	r3, #33	; 0x21
 800194c:	d005      	beq.n	800195a <I2C_MasterTransmit_TXE+0xda>
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	2b40      	cmp	r3, #64	; 0x40
 8001952:	d12d      	bne.n	80019b0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	2b22      	cmp	r3, #34	; 0x22
 8001958:	d12a      	bne.n	80019b0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195e:	b29b      	uxth	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d108      	bne.n	8001976 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	6852      	ldr	r2, [r2, #4]
 800196e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001972:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001974:	e01c      	b.n	80019b0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b40      	cmp	r3, #64	; 0x40
 8001980:	d103      	bne.n	800198a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f880 	bl	8001a88 <I2C_MemoryTransmit_TXE_BTF>
}
 8001988:	e012      	b.n	80019b0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001992:	7812      	ldrb	r2, [r2, #0]
 8001994:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80019ae:	e7ff      	b.n	80019b0 <I2C_MasterTransmit_TXE+0x130>
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b21      	cmp	r3, #33	; 0x21
 80019d0:	d156      	bne.n	8001a80 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d012      	beq.n	8001a02 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019e4:	7812      	ldrb	r2, [r2, #0]
 80019e6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001a00:	e03e      	b.n	8001a80 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d01d      	beq.n	8001a44 <I2C_MasterTransmit_BTF+0x8c>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b20      	cmp	r3, #32
 8001a0c:	d01a      	beq.n	8001a44 <I2C_MasterTransmit_BTF+0x8c>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a14:	d016      	beq.n	8001a44 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	6852      	ldr	r2, [r2, #4]
 8001a20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a24:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2211      	movs	r2, #17
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2220      	movs	r2, #32
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff feb7 	bl	80017b0 <HAL_I2C_MasterTxCpltCallback>
}
 8001a42:	e01d      	b.n	8001a80 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	6852      	ldr	r2, [r2, #4]
 8001a4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a52:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a62:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fe98 	bl	80017b0 <HAL_I2C_MasterTxCpltCallback>
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d11d      	bne.n	8001adc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d10b      	bne.n	8001ac0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ab8:	1c9a      	adds	r2, r3, #2
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001abe:	e06e      	b.n	8001b9e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ac8:	b292      	uxth	r2, r2
 8001aca:	1212      	asrs	r2, r2, #8
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ada:	e060      	b.n	8001b9e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d10b      	bne.n	8001afc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001afa:	e050      	b.n	8001b9e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d14c      	bne.n	8001b9e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	2b22      	cmp	r3, #34	; 0x22
 8001b08:	d108      	bne.n	8001b1c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b18:	601a      	str	r2, [r3, #0]
}
 8001b1a:	e040      	b.n	8001b9e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d015      	beq.n	8001b52 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	2b21      	cmp	r3, #33	; 0x21
 8001b2a:	d112      	bne.n	8001b52 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b34:	7812      	ldrb	r2, [r2, #0]
 8001b36:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b50:	e025      	b.n	8001b9e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d120      	bne.n	8001b9e <I2C_MemoryTransmit_TXE_BTF+0x116>
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	2b21      	cmp	r3, #33	; 0x21
 8001b60:	d11d      	bne.n	8001b9e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	6852      	ldr	r2, [r2, #4]
 8001b6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b70:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b80:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fe49 	bl	8001830 <HAL_I2C_MemTxCpltCallback>
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b22      	cmp	r3, #34	; 0x22
 8001bb8:	f040 80a2 	bne.w	8001d00 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d921      	bls.n	8001c0e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	6912      	ldr	r2, [r2, #16]
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	f040 8082 	bne.w	8001d00 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	6852      	ldr	r2, [r2, #4]
 8001c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c0a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001c0c:	e078      	b.n	8001d00 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d074      	beq.n	8001d00 <I2C_MasterReceive_RXNE+0x15a>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d002      	beq.n	8001c22 <I2C_MasterReceive_RXNE+0x7c>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d16e      	bne.n	8001d00 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f001 f814 	bl	8002c50 <I2C_WaitOnSTOPRequestThroughIT>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d142      	bne.n	8001cb4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c3c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	6852      	ldr	r2, [r2, #4]
 8001c48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c4c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	6912      	ldr	r2, [r2, #16]
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b40      	cmp	r3, #64	; 0x40
 8001c86:	d10a      	bne.n	8001c9e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fdd4 	bl	8001844 <HAL_I2C_MemRxCpltCallback>
}
 8001c9c:	e030      	b.n	8001d00 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2212      	movs	r2, #18
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff fd89 	bl	80017c4 <HAL_I2C_MasterRxCpltCallback>
}
 8001cb2:	e025      	b.n	8001d00 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	6852      	ldr	r2, [r2, #4]
 8001cbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cc2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	6912      	ldr	r2, [r2, #16]
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2220      	movs	r2, #32
 8001cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fdac 	bl	8001858 <HAL_I2C_ErrorCallback>
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d11b      	bne.n	8001d58 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	6852      	ldr	r2, [r2, #4]
 8001d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d2e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	6912      	ldr	r2, [r2, #16]
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001d56:	e0bd      	b.n	8001ed4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d129      	bne.n	8001db6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	6852      	ldr	r2, [r2, #4]
 8001d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d70:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d00a      	beq.n	8001d8e <I2C_MasterReceive_BTF+0x86>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d007      	beq.n	8001d8e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	6912      	ldr	r2, [r2, #16]
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001db4:	e08e      	b.n	8001ed4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d176      	bne.n	8001eae <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d002      	beq.n	8001dcc <I2C_MasterReceive_BTF+0xc4>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b10      	cmp	r3, #16
 8001dca:	d108      	bne.n	8001dde <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e019      	b.n	8001e12 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d002      	beq.n	8001dea <I2C_MasterReceive_BTF+0xe2>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d108      	bne.n	8001dfc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e00a      	b.n	8001e12 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b10      	cmp	r3, #16
 8001e00:	d007      	beq.n	8001e12 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e10:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	6912      	ldr	r2, [r2, #16]
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	6912      	ldr	r2, [r2, #16]
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	6852      	ldr	r2, [r2, #4]
 8001e68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e6c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b40      	cmp	r3, #64	; 0x40
 8001e80:	d10a      	bne.n	8001e98 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff fcd7 	bl	8001844 <HAL_I2C_MemRxCpltCallback>
}
 8001e96:	e01d      	b.n	8001ed4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2212      	movs	r2, #18
 8001ea4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fc8c 	bl	80017c4 <HAL_I2C_MasterRxCpltCallback>
}
 8001eac:	e012      	b.n	8001ed4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	6912      	ldr	r2, [r2, #16]
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b40      	cmp	r3, #64	; 0x40
 8001eee:	d116      	bne.n	8001f1e <I2C_Master_SB+0x42>
  {
    if (hi2c->EventCount == 0U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d108      	bne.n	8001f0a <I2C_Master_SB+0x2e>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f06:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001f08:	e066      	b.n	8001fd8 <I2C_Master_SB+0xfc>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	611a      	str	r2, [r3, #16]
}
 8001f1c:	e05c      	b.n	8001fd8 <I2C_Master_SB+0xfc>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f26:	d132      	bne.n	8001f8e <I2C_Master_SB+0xb2>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b21      	cmp	r3, #33	; 0x21
 8001f32:	d108      	bne.n	8001f46 <I2C_Master_SB+0x6a>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f42:	611a      	str	r2, [r3, #16]
 8001f44:	e008      	b.n	8001f58 <I2C_Master_SB+0x7c>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	f042 0201 	orr.w	r2, r2, #1
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d004      	beq.n	8001f6a <I2C_Master_SB+0x8e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d108      	bne.n	8001f7c <I2C_Master_SB+0xa0>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d032      	beq.n	8001fd8 <I2C_Master_SB+0xfc>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d02d      	beq.n	8001fd8 <I2C_Master_SB+0xfc>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	6852      	ldr	r2, [r2, #4]
 8001f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f8a:	605a      	str	r2, [r3, #4]
}
 8001f8c:	e024      	b.n	8001fd8 <I2C_Master_SB+0xfc>
      if (hi2c->EventCount == 0U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10e      	bne.n	8001fb4 <I2C_Master_SB+0xd8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f9e:	b292      	uxth	r2, r2
 8001fa0:	11d2      	asrs	r2, r2, #7
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f002 0206 	and.w	r2, r2, #6
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	f062 020f 	orn	r2, r2, #15
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	611a      	str	r2, [r3, #16]
}
 8001fb2:	e011      	b.n	8001fd8 <I2C_Master_SB+0xfc>
      else if (hi2c->EventCount == 1U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d10d      	bne.n	8001fd8 <I2C_Master_SB+0xfc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fc4:	b292      	uxth	r2, r2
 8001fc6:	11d2      	asrs	r2, r2, #7
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	f002 0206 	and.w	r2, r2, #6
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	f062 020e 	orn	r2, r2, #14
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	611a      	str	r2, [r3, #16]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d103      	bne.n	8002008 <I2C_Master_ADD10+0x24>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002004:	2b00      	cmp	r3, #0
 8002006:	d011      	beq.n	800202c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d104      	bne.n	800201c <I2C_Master_ADD10+0x38>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	6852      	ldr	r2, [r2, #4]
 8002026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800202a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002038:	b480      	push	{r7}
 800203a:	b091      	sub	sp, #68	; 0x44
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002046:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b22      	cmp	r3, #34	; 0x22
 8002060:	f040 8169 	bne.w	8002336 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10f      	bne.n	800208c <I2C_Master_ADDR+0x54>
 800206c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002070:	2b40      	cmp	r3, #64	; 0x40
 8002072:	d10b      	bne.n	800208c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002074:	2300      	movs	r3, #0
 8002076:	633b      	str	r3, [r7, #48]	; 0x30
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	633b      	str	r3, [r7, #48]	; 0x30
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	633b      	str	r3, [r7, #48]	; 0x30
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	e160      	b.n	800234e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002090:	2b00      	cmp	r3, #0
 8002092:	d11d      	bne.n	80020d0 <I2C_Master_ADDR+0x98>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800209c:	d118      	bne.n	80020d0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020c2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	651a      	str	r2, [r3, #80]	; 0x50
 80020ce:	e13e      	b.n	800234e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d113      	bne.n	8002102 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ee:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	e115      	b.n	800232e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	f040 808a 	bne.w	8002222 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002110:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002114:	d137      	bne.n	8002186 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002124:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002134:	d113      	bne.n	800215e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002144:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	e0e7      	b.n	800232e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	623b      	str	r3, [r7, #32]
 8002172:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e0d3      	b.n	800232e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002188:	2b08      	cmp	r3, #8
 800218a:	d02e      	beq.n	80021ea <I2C_Master_ADDR+0x1b2>
 800218c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218e:	2b20      	cmp	r3, #32
 8002190:	d02b      	beq.n	80021ea <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002194:	2b12      	cmp	r3, #18
 8002196:	d102      	bne.n	800219e <I2C_Master_ADDR+0x166>
 8002198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800219a:	2b01      	cmp	r3, #1
 800219c:	d125      	bne.n	80021ea <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800219e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d00e      	beq.n	80021c2 <I2C_Master_ADDR+0x18a>
 80021a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d00b      	beq.n	80021c2 <I2C_Master_ADDR+0x18a>
 80021aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d008      	beq.n	80021c2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e007      	b.n	80021d2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	e0a1      	b.n	800232e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e085      	b.n	800232e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d14d      	bne.n	80022c8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222e:	2b04      	cmp	r3, #4
 8002230:	d016      	beq.n	8002260 <I2C_Master_ADDR+0x228>
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002234:	2b02      	cmp	r3, #2
 8002236:	d013      	beq.n	8002260 <I2C_Master_ADDR+0x228>
 8002238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223a:	2b10      	cmp	r3, #16
 800223c:	d010      	beq.n	8002260 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800224c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e007      	b.n	8002270 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800226e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800227a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800227e:	d117      	bne.n	80022b0 <I2C_Master_ADDR+0x278>
 8002280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002282:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002286:	d00b      	beq.n	80022a0 <I2C_Master_ADDR+0x268>
 8002288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228a:	2b01      	cmp	r3, #1
 800228c:	d008      	beq.n	80022a0 <I2C_Master_ADDR+0x268>
 800228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002290:	2b08      	cmp	r3, #8
 8002292:	d005      	beq.n	80022a0 <I2C_Master_ADDR+0x268>
 8002294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002296:	2b10      	cmp	r3, #16
 8002298:	d002      	beq.n	80022a0 <I2C_Master_ADDR+0x268>
 800229a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229c:	2b20      	cmp	r3, #32
 800229e:	d107      	bne.n	80022b0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	6852      	ldr	r2, [r2, #4]
 80022aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022ae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	e032      	b.n	800232e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022d6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022e6:	d117      	bne.n	8002318 <I2C_Master_ADDR+0x2e0>
 80022e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022ee:	d00b      	beq.n	8002308 <I2C_Master_ADDR+0x2d0>
 80022f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d008      	beq.n	8002308 <I2C_Master_ADDR+0x2d0>
 80022f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d005      	beq.n	8002308 <I2C_Master_ADDR+0x2d0>
 80022fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d002      	beq.n	8002308 <I2C_Master_ADDR+0x2d0>
 8002302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002304:	2b20      	cmp	r3, #32
 8002306:	d107      	bne.n	8002318 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	6852      	ldr	r2, [r2, #4]
 8002312:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002316:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002334:	e00b      	b.n	800234e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	e7ff      	b.n	800234e <I2C_Master_ADDR+0x316>
 800234e:	bf00      	nop
 8002350:	3744      	adds	r7, #68	; 0x44
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002368:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d02b      	beq.n	80023cc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d114      	bne.n	80023cc <I2C_SlaveTransmit_TXE+0x72>
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	2b29      	cmp	r3, #41	; 0x29
 80023a6:	d111      	bne.n	80023cc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	6852      	ldr	r2, [r2, #4]
 80023b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2221      	movs	r2, #33	; 0x21
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2228      	movs	r2, #40	; 0x28
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff fa06 	bl	80017d8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d011      	beq.n	800240a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ee:	7812      	ldrb	r2, [r2, #0]
 80023f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002424:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d02c      	beq.n	800248a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	6912      	ldr	r2, [r2, #16]
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d114      	bne.n	800248a <I2C_SlaveReceive_RXNE+0x74>
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	2b2a      	cmp	r3, #42	; 0x2a
 8002464:	d111      	bne.n	800248a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	6852      	ldr	r2, [r2, #4]
 8002470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002474:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2222      	movs	r2, #34	; 0x22
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2228      	movs	r2, #40	; 0x28
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff f9b1 	bl	80017ec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d012      	beq.n	80024ca <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	6912      	ldr	r2, [r2, #16]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024f0:	2b28      	cmp	r3, #40	; 0x28
 80024f2:	d125      	bne.n	8002540 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	6852      	ldr	r2, [r2, #4]
 80024fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002502:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	81bb      	strh	r3, [r7, #12]
 8002522:	e002      	b.n	800252a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002532:	89ba      	ldrh	r2, [r7, #12]
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	4619      	mov	r1, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff f961 	bl	8001800 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800253e:	e008      	b.n	8002552 <I2C_Slave_ADDR+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0202 	mvn.w	r2, #2
 8002548:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	6852      	ldr	r2, [r2, #4]
 8002576:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800257a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800257c:	2300      	movs	r3, #0
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b8:	d172      	bne.n	80026a0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b22      	cmp	r3, #34	; 0x22
 80025be:	d002      	beq.n	80025c6 <I2C_Slave_STOPF+0x6a>
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b2a      	cmp	r3, #42	; 0x2a
 80025c4:	d135      	bne.n	8002632 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f043 0204 	orr.w	r2, r3, #4
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	6852      	ldr	r2, [r2, #4]
 80025f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fc07 	bl	8000e12 <HAL_DMA_GetState>
 8002604:	4603      	mov	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d049      	beq.n	800269e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	4a69      	ldr	r2, [pc, #420]	; (80027b4 <I2C_Slave_STOPF+0x258>)
 8002610:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fbd9 	bl	8000dce <HAL_DMA_Abort_IT>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d03d      	beq.n	800269e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800262c:	4610      	mov	r0, r2
 800262e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002630:	e035      	b.n	800269e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	b29a      	uxth	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f043 0204 	orr.w	r2, r3, #4
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	6852      	ldr	r2, [r2, #4]
 8002660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002664:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fbd1 	bl	8000e12 <HAL_DMA_GetState>
 8002670:	4603      	mov	r3, r0
 8002672:	2b01      	cmp	r3, #1
 8002674:	d014      	beq.n	80026a0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267a:	4a4e      	ldr	r2, [pc, #312]	; (80027b4 <I2C_Slave_STOPF+0x258>)
 800267c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fba3 	bl	8000dce <HAL_DMA_Abort_IT>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002698:	4610      	mov	r0, r2
 800269a:	4798      	blx	r3
 800269c:	e000      	b.n	80026a0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800269e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d03e      	beq.n	8002728 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d112      	bne.n	80026de <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	6912      	ldr	r2, [r2, #16]
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e8:	2b40      	cmp	r3, #64	; 0x40
 80026ea:	d112      	bne.n	8002712 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	6912      	ldr	r2, [r2, #16]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f043 0204 	orr.w	r2, r3, #4
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f8b3 	bl	800289c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002736:	e039      	b.n	80027ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b2a      	cmp	r3, #42	; 0x2a
 800273c:	d109      	bne.n	8002752 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2228      	movs	r2, #40	; 0x28
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff f84d 	bl	80017ec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b28      	cmp	r3, #40	; 0x28
 800275c:	d111      	bne.n	8002782 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <I2C_Slave_STOPF+0x25c>)
 8002762:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff f84e 	bl	800181c <HAL_I2C_ListenCpltCallback>
}
 8002780:	e014      	b.n	80027ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	2b22      	cmp	r3, #34	; 0x22
 8002788:	d002      	beq.n	8002790 <I2C_Slave_STOPF+0x234>
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b22      	cmp	r3, #34	; 0x22
 800278e:	d10d      	bne.n	80027ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff f820 	bl	80017ec <HAL_I2C_SlaveRxCpltCallback>
}
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	08002b01 	.word	0x08002b01
 80027b8:	ffff0000 	.word	0xffff0000

080027bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d002      	beq.n	80027de <I2C_Slave_AF+0x22>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d129      	bne.n	8002832 <I2C_Slave_AF+0x76>
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2b28      	cmp	r3, #40	; 0x28
 80027e2:	d126      	bne.n	8002832 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a2c      	ldr	r2, [pc, #176]	; (8002898 <I2C_Slave_AF+0xdc>)
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	6852      	ldr	r2, [r2, #4]
 80027f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002802:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002812:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe fff6 	bl	800181c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002830:	e02e      	b.n	8002890 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	2b21      	cmp	r3, #33	; 0x21
 8002836:	d126      	bne.n	8002886 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a17      	ldr	r2, [pc, #92]	; (8002898 <I2C_Slave_AF+0xdc>)
 800283c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2221      	movs	r2, #33	; 0x21
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	6852      	ldr	r2, [r2, #4]
 800285e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002862:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800286c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800287c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe ffaa 	bl	80017d8 <HAL_I2C_SlaveTxCpltCallback>
}
 8002884:	e004      	b.n	8002890 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800288e:	615a      	str	r2, [r3, #20]
}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	ffff0000 	.word	0xffff0000

0800289c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80028b4:	7bbb      	ldrb	r3, [r7, #14]
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d002      	beq.n	80028c0 <I2C_ITError+0x24>
 80028ba:	7bbb      	ldrb	r3, [r7, #14]
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d10a      	bne.n	80028d6 <I2C_ITError+0x3a>
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b22      	cmp	r3, #34	; 0x22
 80028c4:	d107      	bne.n	80028d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028dc:	2b28      	cmp	r3, #40	; 0x28
 80028de:	d107      	bne.n	80028f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2228      	movs	r2, #40	; 0x28
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028ee:	e015      	b.n	800291c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028fe:	d00a      	beq.n	8002916 <I2C_ITError+0x7a>
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b60      	cmp	r3, #96	; 0x60
 8002904:	d007      	beq.n	8002916 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800292a:	d162      	bne.n	80029f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	6852      	ldr	r2, [r2, #4]
 8002936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800293a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d020      	beq.n	800298c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	4a6a      	ldr	r2, [pc, #424]	; (8002af8 <I2C_ITError+0x25c>)
 8002950:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fa39 	bl	8000dce <HAL_DMA_Abort_IT>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8089 	beq.w	8002a76 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002986:	4610      	mov	r0, r2
 8002988:	4798      	blx	r3
 800298a:	e074      	b.n	8002a76 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	4a59      	ldr	r2, [pc, #356]	; (8002af8 <I2C_ITError+0x25c>)
 8002992:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe fa18 	bl	8000dce <HAL_DMA_Abort_IT>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d068      	beq.n	8002a76 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	d10b      	bne.n	80029ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	6912      	ldr	r2, [r2, #16]
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	f022 0201 	bic.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029ec:	4610      	mov	r0, r2
 80029ee:	4798      	blx	r3
 80029f0:	e041      	b.n	8002a76 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b60      	cmp	r3, #96	; 0x60
 80029fc:	d125      	bne.n	8002a4a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d10b      	bne.n	8002a32 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	6912      	ldr	r2, [r2, #16]
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe ff12 	bl	800186c <HAL_I2C_AbortCpltCallback>
 8002a48:	e015      	b.n	8002a76 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b40      	cmp	r3, #64	; 0x40
 8002a56:	d10b      	bne.n	8002a70 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	6912      	ldr	r2, [r2, #16]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7fe fef1 	bl	8001858 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10e      	bne.n	8002aa4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d104      	bne.n	8002aa4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	6852      	ldr	r2, [r2, #4]
 8002aae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ab2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d113      	bne.n	8002af0 <I2C_ITError+0x254>
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b28      	cmp	r3, #40	; 0x28
 8002acc:	d110      	bne.n	8002af0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <I2C_ITError+0x260>)
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe fe96 	bl	800181c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	08002b01 	.word	0x08002b01
 8002afc:	ffff0000 	.word	0xffff0000

08002b00 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b18:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b1a:	4b4b      	ldr	r3, [pc, #300]	; (8002c48 <I2C_DMAAbort+0x148>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	08db      	lsrs	r3, r3, #3
 8002b20:	4a4a      	ldr	r2, [pc, #296]	; (8002c4c <I2C_DMAAbort+0x14c>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0a1a      	lsrs	r2, r3, #8
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00da      	lsls	r2, r3, #3
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f043 0220 	orr.w	r2, r3, #32
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002b46:	e00a      	b.n	8002b5e <I2C_DMAAbort+0x5e>
    }
    count--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b5c:	d0ea      	beq.n	8002b34 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2200      	movs	r2, #0
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b60      	cmp	r3, #96	; 0x60
 8002bce:	d10e      	bne.n	8002bee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2200      	movs	r2, #0
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f7fe fe40 	bl	800186c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002bec:	e027      	b.n	8002c3e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bf4:	2b28      	cmp	r3, #40	; 0x28
 8002bf6:	d117      	bne.n	8002c28 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c16:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2228      	movs	r2, #40	; 0x28
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c26:	e007      	b.n	8002c38 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002c38:	6978      	ldr	r0, [r7, #20]
 8002c3a:	f7fe fe0d 	bl	8001858 <HAL_I2C_ErrorCallback>
}
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	14f8b589 	.word	0x14f8b589

08002c50 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c5c:	4b13      	ldr	r3, [pc, #76]	; (8002cac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	08db      	lsrs	r3, r3, #3
 8002c62:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	0a1a      	lsrs	r2, r3, #8
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d107      	bne.n	8002c8e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e008      	b.n	8002ca0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9c:	d0e9      	beq.n	8002c72 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	14f8b589 	.word	0x14f8b589

08002cb4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002cc4:	d103      	bne.n	8002cce <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ccc:	e007      	b.n	8002cde <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002cd6:	d102      	bne.n	8002cde <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2208      	movs	r2, #8
 8002cdc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e25b      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d075      	beq.n	8002df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0a:	4ba3      	ldr	r3, [pc, #652]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d00c      	beq.n	8002d30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d16:	4ba0      	ldr	r3, [pc, #640]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d112      	bne.n	8002d48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d22:	4b9d      	ldr	r3, [pc, #628]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d2e:	d10b      	bne.n	8002d48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d30:	4b99      	ldr	r3, [pc, #612]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d05b      	beq.n	8002df4 <HAL_RCC_OscConfig+0x108>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d157      	bne.n	8002df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e236      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d50:	d106      	bne.n	8002d60 <HAL_RCC_OscConfig+0x74>
 8002d52:	4a91      	ldr	r2, [pc, #580]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	4b90      	ldr	r3, [pc, #576]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e01d      	b.n	8002d9c <HAL_RCC_OscConfig+0xb0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x98>
 8002d6a:	4a8b      	ldr	r2, [pc, #556]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	4b8a      	ldr	r3, [pc, #552]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4a88      	ldr	r2, [pc, #544]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	4b87      	ldr	r3, [pc, #540]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e00b      	b.n	8002d9c <HAL_RCC_OscConfig+0xb0>
 8002d84:	4a84      	ldr	r2, [pc, #528]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d86:	4b84      	ldr	r3, [pc, #528]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4a81      	ldr	r2, [pc, #516]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d92:	4b81      	ldr	r3, [pc, #516]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d013      	beq.n	8002dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fd fed6 	bl	8000b54 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fd fed2 	bl	8000b54 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1fb      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b76      	ldr	r3, [pc, #472]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0xc0>
 8002dca:	e014      	b.n	8002df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fd fec2 	bl	8000b54 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7fd febe 	bl	8000b54 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1e7      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	4b6c      	ldr	r3, [pc, #432]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xe8>
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d063      	beq.n	8002eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e02:	4b65      	ldr	r3, [pc, #404]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0e:	4b62      	ldr	r3, [pc, #392]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d11c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d116      	bne.n	8002e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	4b5c      	ldr	r3, [pc, #368]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_RCC_OscConfig+0x152>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e1bb      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3e:	4956      	ldr	r1, [pc, #344]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	4b55      	ldr	r3, [pc, #340]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	e03a      	b.n	8002eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5c:	4b4f      	ldr	r3, [pc, #316]	; (8002f9c <HAL_RCC_OscConfig+0x2b0>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fd fe77 	bl	8000b54 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7fd fe73 	bl	8000b54 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e19c      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	4b46      	ldr	r3, [pc, #280]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e88:	4943      	ldr	r1, [pc, #268]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e8a:	4b43      	ldr	r3, [pc, #268]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
 8002e9c:	e015      	b.n	8002eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9e:	4b3f      	ldr	r3, [pc, #252]	; (8002f9c <HAL_RCC_OscConfig+0x2b0>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7fd fe56 	bl	8000b54 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eac:	f7fd fe52 	bl	8000b54 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e17b      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d030      	beq.n	8002f38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d016      	beq.n	8002f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ede:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <HAL_RCC_OscConfig+0x2b4>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fd fe36 	bl	8000b54 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eec:	f7fd fe32 	bl	8000b54 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e15b      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	4b26      	ldr	r3, [pc, #152]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x200>
 8002f0a:	e015      	b.n	8002f38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f0c:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_RCC_OscConfig+0x2b4>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f12:	f7fd fe1f 	bl	8000b54 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1a:	f7fd fe1b 	bl	8000b54 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e144      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2c:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f0      	bne.n	8002f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80a0 	beq.w	8003086 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10f      	bne.n	8002f76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6413      	str	r3, [r2, #64]	; 0x40
 8002f66:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_OscConfig+0x2b8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d121      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f82:	4a08      	ldr	r2, [pc, #32]	; (8002fa4 <HAL_RCC_OscConfig+0x2b8>)
 8002f84:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <HAL_RCC_OscConfig+0x2b8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f8e:	f7fd fde1 	bl	8000b54 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	e011      	b.n	8002fba <HAL_RCC_OscConfig+0x2ce>
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	42470000 	.word	0x42470000
 8002fa0:	42470e80 	.word	0x42470e80
 8002fa4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa8:	f7fd fdd4 	bl	8000b54 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0fd      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	4b81      	ldr	r3, [pc, #516]	; (80031c0 <HAL_RCC_OscConfig+0x4d4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d106      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2f0>
 8002fce:	4a7d      	ldr	r2, [pc, #500]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 8002fd0:	4b7c      	ldr	r3, [pc, #496]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fda:	e01c      	b.n	8003016 <HAL_RCC_OscConfig+0x32a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d10c      	bne.n	8002ffe <HAL_RCC_OscConfig+0x312>
 8002fe4:	4a77      	ldr	r2, [pc, #476]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 8002fe6:	4b77      	ldr	r3, [pc, #476]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	f043 0304 	orr.w	r3, r3, #4
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff0:	4a74      	ldr	r2, [pc, #464]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 8002ff2:	4b74      	ldr	r3, [pc, #464]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffc:	e00b      	b.n	8003016 <HAL_RCC_OscConfig+0x32a>
 8002ffe:	4a71      	ldr	r2, [pc, #452]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 8003000:	4b70      	ldr	r3, [pc, #448]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	6713      	str	r3, [r2, #112]	; 0x70
 800300a:	4a6e      	ldr	r2, [pc, #440]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 800300c:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	f023 0304 	bic.w	r3, r3, #4
 8003014:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d015      	beq.n	800304a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301e:	f7fd fd99 	bl	8000b54 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7fd fd95 	bl	8000b54 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	; 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e0bc      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303c:	4b61      	ldr	r3, [pc, #388]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0ee      	beq.n	8003026 <HAL_RCC_OscConfig+0x33a>
 8003048:	e014      	b.n	8003074 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fd fd83 	bl	8000b54 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7fd fd7f 	bl	8000b54 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0a6      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003068:	4b56      	ldr	r3, [pc, #344]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ee      	bne.n	8003052 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003074:	7dfb      	ldrb	r3, [r7, #23]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d105      	bne.n	8003086 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307a:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 800307c:	4b51      	ldr	r3, [pc, #324]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003084:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 8092 	beq.w	80031b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003090:	4b4c      	ldr	r3, [pc, #304]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b08      	cmp	r3, #8
 800309a:	d05c      	beq.n	8003156 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d141      	bne.n	8003128 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	4b48      	ldr	r3, [pc, #288]	; (80031c8 <HAL_RCC_OscConfig+0x4dc>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fd fd53 	bl	8000b54 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b2:	f7fd fd4f 	bl	8000b54 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e078      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c4:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f0      	bne.n	80030b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030d0:	493c      	ldr	r1, [pc, #240]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	019b      	lsls	r3, r3, #6
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	3b01      	subs	r3, #1
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	4313      	orrs	r3, r2
 80030f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030fa:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <HAL_RCC_OscConfig+0x4dc>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fd fd28 	bl	8000b54 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003108:	f7fd fd24 	bl	8000b54 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e04d      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311a:	4b2a      	ldr	r3, [pc, #168]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x41c>
 8003126:	e045      	b.n	80031b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003128:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <HAL_RCC_OscConfig+0x4dc>)
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fd fd11 	bl	8000b54 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003136:	f7fd fd0d 	bl	8000b54 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e036      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003148:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f0      	bne.n	8003136 <HAL_RCC_OscConfig+0x44a>
 8003154:	e02e      	b.n	80031b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e029      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003162:	4b18      	ldr	r3, [pc, #96]	; (80031c4 <HAL_RCC_OscConfig+0x4d8>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	429a      	cmp	r2, r3
 8003174:	d11c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d115      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800318a:	4013      	ands	r3, r2
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003190:	4293      	cmp	r3, r2
 8003192:	d10d      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d106      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40007000 	.word	0x40007000
 80031c4:	40023800 	.word	0x40023800
 80031c8:	42470060 	.word	0x42470060

080031cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0cc      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b68      	ldr	r3, [pc, #416]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 020f 	and.w	r2, r3, #15
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d20c      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b65      	ldr	r3, [pc, #404]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 020f 	and.w	r2, r3, #15
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0b8      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003220:	4a59      	ldr	r2, [pc, #356]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4b59      	ldr	r3, [pc, #356]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800322a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003238:	4a53      	ldr	r2, [pc, #332]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4b53      	ldr	r3, [pc, #332]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4950      	ldr	r1, [pc, #320]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	4b50      	ldr	r3, [pc, #320]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d044      	beq.n	80032ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d119      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e07f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d003      	beq.n	800328a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003286:	2b03      	cmp	r3, #3
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328a:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e06f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329a:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e067      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032aa:	4937      	ldr	r1, [pc, #220]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	4b36      	ldr	r3, [pc, #216]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f023 0203 	bic.w	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032bc:	f7fd fc4a 	bl	8000b54 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	e00a      	b.n	80032da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f7fd fc46 	bl	8000b54 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e04f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 020c 	and.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1eb      	bne.n	80032c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ec:	4b25      	ldr	r3, [pc, #148]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 020f 	and.w	r2, r3, #15
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d90c      	bls.n	8003314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b22      	ldr	r3, [pc, #136]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_RCC_ClockConfig+0x1b8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 020f 	and.w	r2, r3, #15
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e032      	b.n	800337a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003320:	4919      	ldr	r1, [pc, #100]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800333e:	4912      	ldr	r1, [pc, #72]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003352:	f000 f821 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003356:	4601      	mov	r1, r0
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <HAL_RCC_ClockConfig+0x1c0>)
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	fa21 f303 	lsr.w	r3, r1, r3
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd fbaa 	bl	8000acc <HAL_InitTick>

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023c00 	.word	0x40023c00
 8003388:	40023800 	.word	0x40023800
 800338c:	08004d58 	.word	0x08004d58
 8003390:	20000000 	.word	0x20000000
 8003394:	20000004 	.word	0x20000004

08003398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800339c:	b087      	sub	sp, #28
 800339e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033a0:	2200      	movs	r2, #0
 80033a2:	60fa      	str	r2, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	617a      	str	r2, [r7, #20]
 80033a8:	2200      	movs	r2, #0
 80033aa:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80033ac:	2200      	movs	r2, #0
 80033ae:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b0:	4a51      	ldr	r2, [pc, #324]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033b2:	6892      	ldr	r2, [r2, #8]
 80033b4:	f002 020c 	and.w	r2, r2, #12
 80033b8:	2a04      	cmp	r2, #4
 80033ba:	d007      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x34>
 80033bc:	2a08      	cmp	r2, #8
 80033be:	d008      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	f040 8090 	bne.w	80034e6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c6:	4b4d      	ldr	r3, [pc, #308]	; (80034fc <HAL_RCC_GetSysClockFreq+0x164>)
 80033c8:	613b      	str	r3, [r7, #16]
       break;
 80033ca:	e08f      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033cc:	4b4c      	ldr	r3, [pc, #304]	; (8003500 <HAL_RCC_GetSysClockFreq+0x168>)
 80033ce:	613b      	str	r3, [r7, #16]
      break;
 80033d0:	e08c      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033d2:	4a49      	ldr	r2, [pc, #292]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033d4:	6852      	ldr	r2, [r2, #4]
 80033d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80033da:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033dc:	4a46      	ldr	r2, [pc, #280]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033de:	6852      	ldr	r2, [r2, #4]
 80033e0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80033e4:	2a00      	cmp	r2, #0
 80033e6:	d023      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e8:	4b43      	ldr	r3, [pc, #268]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	f04f 0400 	mov.w	r4, #0
 80033f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	ea03 0301 	and.w	r3, r3, r1
 80033fe:	ea04 0402 	and.w	r4, r4, r2
 8003402:	4a3f      	ldr	r2, [pc, #252]	; (8003500 <HAL_RCC_GetSysClockFreq+0x168>)
 8003404:	fb02 f104 	mul.w	r1, r2, r4
 8003408:	2200      	movs	r2, #0
 800340a:	fb02 f203 	mul.w	r2, r2, r3
 800340e:	440a      	add	r2, r1
 8003410:	493b      	ldr	r1, [pc, #236]	; (8003500 <HAL_RCC_GetSysClockFreq+0x168>)
 8003412:	fba3 0101 	umull	r0, r1, r3, r1
 8003416:	1853      	adds	r3, r2, r1
 8003418:	4619      	mov	r1, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f04f 0400 	mov.w	r4, #0
 8003420:	461a      	mov	r2, r3
 8003422:	4623      	mov	r3, r4
 8003424:	f7fc fed0 	bl	80001c8 <__aeabi_uldivmod>
 8003428:	4603      	mov	r3, r0
 800342a:	460c      	mov	r4, r1
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	e04c      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003430:	4a31      	ldr	r2, [pc, #196]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003432:	6852      	ldr	r2, [r2, #4]
 8003434:	0992      	lsrs	r2, r2, #6
 8003436:	4611      	mov	r1, r2
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8003440:	f04f 0600 	mov.w	r6, #0
 8003444:	ea05 0501 	and.w	r5, r5, r1
 8003448:	ea06 0602 	and.w	r6, r6, r2
 800344c:	4629      	mov	r1, r5
 800344e:	4632      	mov	r2, r6
 8003450:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8003454:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8003458:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800345c:	4651      	mov	r1, sl
 800345e:	465a      	mov	r2, fp
 8003460:	46aa      	mov	sl, r5
 8003462:	46b3      	mov	fp, r6
 8003464:	4655      	mov	r5, sl
 8003466:	465e      	mov	r6, fp
 8003468:	1b4d      	subs	r5, r1, r5
 800346a:	eb62 0606 	sbc.w	r6, r2, r6
 800346e:	4629      	mov	r1, r5
 8003470:	4632      	mov	r2, r6
 8003472:	0194      	lsls	r4, r2, #6
 8003474:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003478:	018b      	lsls	r3, r1, #6
 800347a:	1a5b      	subs	r3, r3, r1
 800347c:	eb64 0402 	sbc.w	r4, r4, r2
 8003480:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003484:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003488:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800348c:	4643      	mov	r3, r8
 800348e:	464c      	mov	r4, r9
 8003490:	4655      	mov	r5, sl
 8003492:	465e      	mov	r6, fp
 8003494:	18ed      	adds	r5, r5, r3
 8003496:	eb46 0604 	adc.w	r6, r6, r4
 800349a:	462b      	mov	r3, r5
 800349c:	4634      	mov	r4, r6
 800349e:	02a2      	lsls	r2, r4, #10
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	029b      	lsls	r3, r3, #10
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	e897 0018 	ldmia.w	r7, {r3, r4}
 80034b2:	4618      	mov	r0, r3
 80034b4:	4621      	mov	r1, r4
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f04f 0400 	mov.w	r4, #0
 80034bc:	461a      	mov	r2, r3
 80034be:	4623      	mov	r3, r4
 80034c0:	f7fc fe82 	bl	80001c8 <__aeabi_uldivmod>
 80034c4:	4603      	mov	r3, r0
 80034c6:	460c      	mov	r4, r1
 80034c8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	3301      	adds	r3, #1
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	613b      	str	r3, [r7, #16]
      break;
 80034e4:	e002      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_RCC_GetSysClockFreq+0x164>)
 80034e8:	613b      	str	r3, [r7, #16]
      break;
 80034ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ec:	693b      	ldr	r3, [r7, #16]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	00f42400 	.word	0x00f42400
 8003500:	017d7840 	.word	0x017d7840

08003504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_RCC_GetHCLKFreq+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000000 	.word	0x20000000

0800351c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003520:	f7ff fff0 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 8003524:	4601      	mov	r1, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	0a9b      	lsrs	r3, r3, #10
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4a03      	ldr	r2, [pc, #12]	; (8003540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003532:	5cd3      	ldrb	r3, [r2, r3]
 8003534:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	08004d68 	.word	0x08004d68

08003544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003548:	f7ff ffdc 	bl	8003504 <HAL_RCC_GetHCLKFreq>
 800354c:	4601      	mov	r1, r0
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	0b5b      	lsrs	r3, r3, #13
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4a03      	ldr	r2, [pc, #12]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800355a:	5cd3      	ldrb	r3, [r2, r3]
 800355c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40023800 	.word	0x40023800
 8003568:	08004d68 	.word	0x08004d68

0800356c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e04a      	b.n	8003614 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d111      	bne.n	80035ae <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fa26 	bl	80039e4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a1e      	ldr	r2, [pc, #120]	; (800361c <HAL_UART_Init+0xb0>)
 80035a4:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2224      	movs	r2, #36	; 0x24
 80035b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	68d2      	ldr	r2, [r2, #12]
 80035c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fbac 	bl	8003d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	6912      	ldr	r2, [r2, #16]
 80035d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	6952      	ldr	r2, [r2, #20]
 80035e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	68d2      	ldr	r2, [r2, #12]
 80035f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	080009e9 	.word	0x080009e9

08003620 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b20      	cmp	r3, #32
 800363e:	f040 8082 	bne.w	8003746 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_UART_Transmit+0x2e>
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e07a      	b.n	8003748 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_UART_Transmit+0x40>
 800365c:	2302      	movs	r3, #2
 800365e:	e073      	b.n	8003748 <HAL_UART_Transmit+0x128>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2221      	movs	r2, #33	; 0x21
 8003672:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003676:	f7fd fa6d 	bl	8000b54 <HAL_GetTick>
 800367a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	88fa      	ldrh	r2, [r7, #6]
 8003686:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003690:	e041      	b.n	8003716 <HAL_UART_Transmit+0xf6>
    {
      huart->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a8:	d121      	bne.n	80036ee <HAL_UART_Transmit+0xce>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2200      	movs	r2, #0
 80036b2:	2180      	movs	r1, #128	; 0x80
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f9c7 	bl	8003a48 <UART_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e041      	b.n	8003748 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <HAL_UART_Transmit+0xc6>
        {
          pData += 2U;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3302      	adds	r3, #2
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	e017      	b.n	8003716 <HAL_UART_Transmit+0xf6>
        }
        else
        {
          pData += 1U;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	3301      	adds	r3, #1
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	e013      	b.n	8003716 <HAL_UART_Transmit+0xf6>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2180      	movs	r1, #128	; 0x80
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f9a5 	bl	8003a48 <UART_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_UART_Transmit+0xe8>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e01f      	b.n	8003748 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	1c59      	adds	r1, r3, #1
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1b8      	bne.n	8003692 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2200      	movs	r2, #0
 8003728:	2140      	movs	r1, #64	; 0x40
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f98c 	bl	8003a48 <UART_WaitOnFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_UART_Transmit+0x11a>
    {
      return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e006      	b.n	8003748 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e000      	b.n	8003748 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8003746:	2302      	movs	r3, #2
  }
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003770:	2300      	movs	r3, #0
 8003772:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10d      	bne.n	80037a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_UART_IRQHandler+0x52>
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa3f 	bl	8003c1e <UART_Receive_IT>
      return;
 80037a0:	e0d4      	b.n	800394c <HAL_UART_IRQHandler+0x1fc>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80b3 	beq.w	8003910 <HAL_UART_IRQHandler+0x1c0>
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <HAL_UART_IRQHandler+0x70>
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80a8 	beq.w	8003910 <HAL_UART_IRQHandler+0x1c0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_UART_IRQHandler+0x90>
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	f043 0201 	orr.w	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_UART_IRQHandler+0xb0>
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f8:	f043 0202 	orr.w	r2, r3, #2
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_UART_IRQHandler+0xd0>
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	f043 0204 	orr.w	r2, r3, #4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00f      	beq.n	800384a <HAL_UART_IRQHandler+0xfa>
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d104      	bne.n	800383e <HAL_UART_IRQHandler+0xee>
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003842:	f043 0208 	orr.w	r2, r3, #8
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d07b      	beq.n	800394a <HAL_UART_IRQHandler+0x1fa>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_UART_IRQHandler+0x11c>
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9d9 	bl	8003c1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	bf0c      	ite	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	2300      	movne	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <HAL_UART_IRQHandler+0x144>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d033      	beq.n	80038fc <HAL_UART_IRQHandler+0x1ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f921 	bl	8003adc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a4:	2b40      	cmp	r3, #64	; 0x40
 80038a6:	d124      	bne.n	80038f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	6952      	ldr	r2, [r2, #20]
 80038b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c4:	4a23      	ldr	r2, [pc, #140]	; (8003954 <HAL_UART_IRQHandler+0x204>)
 80038c6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fd fa7e 	bl	8000dce <HAL_DMA_Abort_IT>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d019      	beq.n	800390c <HAL_UART_IRQHandler+0x1bc>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038e2:	4610      	mov	r0, r2
 80038e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e6:	e011      	b.n	800390c <HAL_UART_IRQHandler+0x1bc>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f0:	e00c      	b.n	800390c <HAL_UART_IRQHandler+0x1bc>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fa:	e007      	b.n	800390c <HAL_UART_IRQHandler+0x1bc>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800390a:	e01e      	b.n	800394a <HAL_UART_IRQHandler+0x1fa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	bf00      	nop
    return;
 800390e:	e01c      	b.n	800394a <HAL_UART_IRQHandler+0x1fa>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_UART_IRQHandler+0x1dc>
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_UART_IRQHandler+0x1dc>
  {
    UART_Transmit_IT(huart);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f90c 	bl	8003b42 <UART_Transmit_IT>
    return;
 800392a:	e00f      	b.n	800394c <HAL_UART_IRQHandler+0x1fc>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_UART_IRQHandler+0x1fc>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_UART_IRQHandler+0x1fc>
  {
    UART_EndTransmit_IT(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f953 	bl	8003bec <UART_EndTransmit_IT>
    return;
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <HAL_UART_IRQHandler+0x1fc>
    return;
 800394a:	bf00      	nop
  }
}
 800394c:	3720      	adds	r7, #32
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	08003b19 	.word	0x08003b19

08003958 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a0e      	ldr	r2, [pc, #56]	; (8003a28 <UART_InitCallbacksToDefault+0x44>)
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a0d      	ldr	r2, [pc, #52]	; (8003a2c <UART_InitCallbacksToDefault+0x48>)
 80039f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <UART_InitCallbacksToDefault+0x4c>)
 80039fc:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <UART_InitCallbacksToDefault+0x50>)
 8003a02:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a0c      	ldr	r2, [pc, #48]	; (8003a38 <UART_InitCallbacksToDefault+0x54>)
 8003a08:	651a      	str	r2, [r3, #80]	; 0x50
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a0b      	ldr	r2, [pc, #44]	; (8003a3c <UART_InitCallbacksToDefault+0x58>)
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <UART_InitCallbacksToDefault+0x5c>)
 8003a14:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <UART_InitCallbacksToDefault+0x60>)
 8003a1a:	65da      	str	r2, [r3, #92]	; 0x5c

}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	08003959 	.word	0x08003959
 8003a2c:	08000651 	.word	0x08000651
 8003a30:	08003981 	.word	0x08003981
 8003a34:	0800396d 	.word	0x0800396d
 8003a38:	08003995 	.word	0x08003995
 8003a3c:	080039a9 	.word	0x080039a9
 8003a40:	080039bd 	.word	0x080039bd
 8003a44:	080039d1 	.word	0x080039d1

08003a48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a58:	e02c      	b.n	8003ab4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a60:	d028      	beq.n	8003ab4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a68:	f7fd f874 	bl	8000b54 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	1ad2      	subs	r2, r2, r3
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d91d      	bls.n	8003ab4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	68d2      	ldr	r2, [r2, #12]
 8003a82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	6952      	ldr	r2, [r2, #20]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e00f      	b.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	401a      	ands	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d0c3      	beq.n	8003a5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	68d2      	ldr	r2, [r2, #12]
 8003aee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003af2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	6952      	ldr	r2, [r2, #20]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b085      	sub	sp, #20
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b21      	cmp	r3, #33	; 0x21
 8003b54:	d143      	bne.n	8003bde <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5e:	d119      	bne.n	8003b94 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	8812      	ldrh	r2, [r2, #0]
 8003b6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b72:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	1c9a      	adds	r2, r3, #2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	621a      	str	r2, [r3, #32]
 8003b86:	e00e      	b.n	8003ba6 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	621a      	str	r2, [r3, #32]
 8003b92:	e008      	b.n	8003ba6 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	1c58      	adds	r0, r3, #1
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	6208      	str	r0, [r1, #32]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	68d2      	ldr	r2, [r2, #12]
 8003bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	68d2      	ldr	r2, [r2, #12]
 8003bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e000      	b.n	8003be0 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003bde:	2302      	movs	r3, #2
  }
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	68d2      	ldr	r2, [r2, #12]
 8003bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b084      	sub	sp, #16
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b22      	cmp	r3, #34	; 0x22
 8003c30:	d172      	bne.n	8003d18 <UART_Receive_IT+0xfa>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3a:	d123      	bne.n	8003c84 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10e      	bne.n	8003c68 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	1c9a      	adds	r2, r3, #2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	629a      	str	r2, [r3, #40]	; 0x28
 8003c66:	e029      	b.n	8003cbc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	629a      	str	r2, [r3, #40]	; 0x28
 8003c82:	e01b      	b.n	8003cbc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10a      	bne.n	8003ca2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	1c59      	adds	r1, r3, #1
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6291      	str	r1, [r2, #40]	; 0x28
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	6852      	ldr	r2, [r2, #4]
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]
 8003ca0:	e00c      	b.n	8003cbc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	1c59      	adds	r1, r3, #1
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6291      	str	r1, [r2, #40]	; 0x28
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	6852      	ldr	r2, [r2, #4]
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d121      	bne.n	8003d14 <UART_Receive_IT+0xf6>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	68d2      	ldr	r2, [r2, #12]
 8003cda:	f022 0220 	bic.w	r2, r2, #32
 8003cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	68d2      	ldr	r2, [r2, #12]
 8003cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	6952      	ldr	r2, [r2, #20]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	4798      	blx	r3
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e002      	b.n	8003d1a <UART_Receive_IT+0xfc>
    }
    return HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e000      	b.n	8003d1a <UART_Receive_IT+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
  }
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d28:	b0a3      	sub	sp, #140	; 0x8c
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d30:	6819      	ldr	r1, [r3, #0]
 8003d32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 8003d5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d60:	6819      	ldr	r1, [r3, #0]
 8003d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8003d6c:	f022 020c 	bic.w	r2, r2, #12
 8003d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d7a:	6819      	ldr	r1, [r3, #0]
 8003d7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d96:	f040 8171 	bne.w	800407c <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4ab4      	ldr	r2, [pc, #720]	; (8004070 <UART_SetConfig+0x34c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d005      	beq.n	8003db0 <UART_SetConfig+0x8c>
 8003da4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4ab2      	ldr	r2, [pc, #712]	; (8004074 <UART_SetConfig+0x350>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	f040 80b1 	bne.w	8003f12 <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003db0:	f7ff fbc8 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8003db4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003db8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dba:	681d      	ldr	r5, [r3, #0]
 8003dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4614      	mov	r4, r2
 8003dca:	18db      	adds	r3, r3, r3
 8003dcc:	eb44 0404 	adc.w	r4, r4, r4
 8003dd0:	185b      	adds	r3, r3, r1
 8003dd2:	eb44 0402 	adc.w	r4, r4, r2
 8003dd6:	00e0      	lsls	r0, r4, #3
 8003dd8:	6478      	str	r0, [r7, #68]	; 0x44
 8003dda:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003ddc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003de0:	6478      	str	r0, [r7, #68]	; 0x44
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	643b      	str	r3, [r7, #64]	; 0x40
 8003de6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003dea:	eb13 0801 	adds.w	r8, r3, r1
 8003dee:	eb44 0902 	adc.w	r9, r4, r2
 8003df2:	4640      	mov	r0, r8
 8003df4:	4649      	mov	r1, r9
 8003df6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f04f 0400 	mov.w	r4, #0
 8003dfe:	18db      	adds	r3, r3, r3
 8003e00:	eb44 0404 	adc.w	r4, r4, r4
 8003e04:	461a      	mov	r2, r3
 8003e06:	4623      	mov	r3, r4
 8003e08:	f7fc f9de 	bl	80001c8 <__aeabi_uldivmod>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b99      	ldr	r3, [pc, #612]	; (8004078 <UART_SetConfig+0x354>)
 8003e14:	fba3 2302 	umull	r2, r3, r3, r2
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	011e      	lsls	r6, r3, #4
 8003e1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e20:	4619      	mov	r1, r3
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4614      	mov	r4, r2
 8003e2a:	18db      	adds	r3, r3, r3
 8003e2c:	eb44 0404 	adc.w	r4, r4, r4
 8003e30:	185b      	adds	r3, r3, r1
 8003e32:	eb44 0402 	adc.w	r4, r4, r2
 8003e36:	00e0      	lsls	r0, r4, #3
 8003e38:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003e3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003e3c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003e40:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e46:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003e4a:	eb13 0801 	adds.w	r8, r3, r1
 8003e4e:	eb44 0902 	adc.w	r9, r4, r2
 8003e52:	4640      	mov	r0, r8
 8003e54:	4649      	mov	r1, r9
 8003e56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f04f 0400 	mov.w	r4, #0
 8003e5e:	18db      	adds	r3, r3, r3
 8003e60:	eb44 0404 	adc.w	r4, r4, r4
 8003e64:	461a      	mov	r2, r3
 8003e66:	4623      	mov	r3, r4
 8003e68:	f7fc f9ae 	bl	80001c8 <__aeabi_uldivmod>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	460c      	mov	r4, r1
 8003e70:	461a      	mov	r2, r3
 8003e72:	4b81      	ldr	r3, [pc, #516]	; (8004078 <UART_SetConfig+0x354>)
 8003e74:	fba3 1302 	umull	r1, r3, r3, r2
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	2164      	movs	r1, #100	; 0x64
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	3332      	adds	r3, #50	; 0x32
 8003e86:	4a7c      	ldr	r2, [pc, #496]	; (8004078 <UART_SetConfig+0x354>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e94:	441e      	add	r6, r3
 8003e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4614      	mov	r4, r2
 8003ea4:	18db      	adds	r3, r3, r3
 8003ea6:	eb44 0404 	adc.w	r4, r4, r4
 8003eaa:	185b      	adds	r3, r3, r1
 8003eac:	eb44 0402 	adc.w	r4, r4, r2
 8003eb0:	00e0      	lsls	r0, r4, #3
 8003eb2:	6378      	str	r0, [r7, #52]	; 0x34
 8003eb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003eb6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003eba:	6378      	str	r0, [r7, #52]	; 0x34
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8003ec0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003ec4:	eb13 0801 	adds.w	r8, r3, r1
 8003ec8:	eb44 0902 	adc.w	r9, r4, r2
 8003ecc:	4640      	mov	r0, r8
 8003ece:	4649      	mov	r1, r9
 8003ed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f04f 0400 	mov.w	r4, #0
 8003ed8:	18db      	adds	r3, r3, r3
 8003eda:	eb44 0404 	adc.w	r4, r4, r4
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4623      	mov	r3, r4
 8003ee2:	f7fc f971 	bl	80001c8 <__aeabi_uldivmod>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	460c      	mov	r4, r1
 8003eea:	461a      	mov	r2, r3
 8003eec:	4b62      	ldr	r3, [pc, #392]	; (8004078 <UART_SetConfig+0x354>)
 8003eee:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2164      	movs	r1, #100	; 0x64
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	3332      	adds	r3, #50	; 0x32
 8003f00:	4a5d      	ldr	r2, [pc, #372]	; (8004078 <UART_SetConfig+0x354>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	4433      	add	r3, r6
 8003f0e:	60ab      	str	r3, [r5, #8]
 8003f10:	e240      	b.n	8004394 <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f12:	f7ff fb03 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8003f16:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	673a      	str	r2, [r7, #112]	; 0x70
 8003f20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f24:	4619      	mov	r1, r3
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4614      	mov	r4, r2
 8003f2e:	18db      	adds	r3, r3, r3
 8003f30:	eb44 0404 	adc.w	r4, r4, r4
 8003f34:	185b      	adds	r3, r3, r1
 8003f36:	eb44 0402 	adc.w	r4, r4, r2
 8003f3a:	00e0      	lsls	r0, r4, #3
 8003f3c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003f3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f40:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003f44:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f4a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003f4e:	185d      	adds	r5, r3, r1
 8003f50:	eb44 0602 	adc.w	r6, r4, r2
 8003f54:	4628      	mov	r0, r5
 8003f56:	4631      	mov	r1, r6
 8003f58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f04f 0400 	mov.w	r4, #0
 8003f60:	18db      	adds	r3, r3, r3
 8003f62:	eb44 0404 	adc.w	r4, r4, r4
 8003f66:	461a      	mov	r2, r3
 8003f68:	4623      	mov	r3, r4
 8003f6a:	f7fc f92d 	bl	80001c8 <__aeabi_uldivmod>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	460c      	mov	r4, r1
 8003f72:	461a      	mov	r2, r3
 8003f74:	4b40      	ldr	r3, [pc, #256]	; (8004078 <UART_SetConfig+0x354>)
 8003f76:	fba3 2302 	umull	r2, r3, r3, r2
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	011e      	lsls	r6, r3, #4
 8003f7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f82:	4619      	mov	r1, r3
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4614      	mov	r4, r2
 8003f8c:	18db      	adds	r3, r3, r3
 8003f8e:	eb44 0404 	adc.w	r4, r4, r4
 8003f92:	185b      	adds	r3, r3, r1
 8003f94:	eb44 0402 	adc.w	r4, r4, r2
 8003f98:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8003f9c:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8003fa0:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8003fa4:	4653      	mov	r3, sl
 8003fa6:	465c      	mov	r4, fp
 8003fa8:	eb13 0a01 	adds.w	sl, r3, r1
 8003fac:	eb44 0b02 	adc.w	fp, r4, r2
 8003fb0:	4650      	mov	r0, sl
 8003fb2:	4659      	mov	r1, fp
 8003fb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f04f 0400 	mov.w	r4, #0
 8003fbc:	18db      	adds	r3, r3, r3
 8003fbe:	eb44 0404 	adc.w	r4, r4, r4
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4623      	mov	r3, r4
 8003fc6:	f7fc f8ff 	bl	80001c8 <__aeabi_uldivmod>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	460c      	mov	r4, r1
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b29      	ldr	r3, [pc, #164]	; (8004078 <UART_SetConfig+0x354>)
 8003fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	2164      	movs	r1, #100	; 0x64
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	3332      	adds	r3, #50	; 0x32
 8003fe4:	4a24      	ldr	r2, [pc, #144]	; (8004078 <UART_SetConfig+0x354>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ff2:	441e      	add	r6, r3
 8003ff4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4614      	mov	r4, r2
 8004002:	18db      	adds	r3, r3, r3
 8004004:	eb44 0404 	adc.w	r4, r4, r4
 8004008:	185b      	adds	r3, r3, r1
 800400a:	eb44 0402 	adc.w	r4, r4, r2
 800400e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8004012:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8004016:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800401a:	4643      	mov	r3, r8
 800401c:	464c      	mov	r4, r9
 800401e:	eb13 0801 	adds.w	r8, r3, r1
 8004022:	eb44 0902 	adc.w	r9, r4, r2
 8004026:	4640      	mov	r0, r8
 8004028:	4649      	mov	r1, r9
 800402a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f04f 0400 	mov.w	r4, #0
 8004032:	18db      	adds	r3, r3, r3
 8004034:	eb44 0404 	adc.w	r4, r4, r4
 8004038:	461a      	mov	r2, r3
 800403a:	4623      	mov	r3, r4
 800403c:	f7fc f8c4 	bl	80001c8 <__aeabi_uldivmod>
 8004040:	4603      	mov	r3, r0
 8004042:	460c      	mov	r4, r1
 8004044:	461a      	mov	r2, r3
 8004046:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <UART_SetConfig+0x354>)
 8004048:	fba3 1302 	umull	r1, r3, r3, r2
 800404c:	095b      	lsrs	r3, r3, #5
 800404e:	2164      	movs	r1, #100	; 0x64
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	3332      	adds	r3, #50	; 0x32
 800405a:	4a07      	ldr	r2, [pc, #28]	; (8004078 <UART_SetConfig+0x354>)
 800405c:	fba2 2303 	umull	r2, r3, r2, r3
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	4433      	add	r3, r6
 8004068:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800406a:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800406c:	e192      	b.n	8004394 <UART_SetConfig+0x670>
 800406e:	bf00      	nop
 8004070:	40011000 	.word	0x40011000
 8004074:	40011400 	.word	0x40011400
 8004078:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800407c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4bc1      	ldr	r3, [pc, #772]	; (8004388 <UART_SetConfig+0x664>)
 8004082:	429a      	cmp	r2, r3
 8004084:	d005      	beq.n	8004092 <UART_SetConfig+0x36e>
 8004086:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4bc0      	ldr	r3, [pc, #768]	; (800438c <UART_SetConfig+0x668>)
 800408c:	429a      	cmp	r2, r3
 800408e:	f040 80bf 	bne.w	8004210 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004092:	f7ff fa57 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8004096:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800409a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800409c:	681e      	ldr	r6, [r3, #0]
 800409e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040a2:	4619      	mov	r1, r3
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	460b      	mov	r3, r1
 80040aa:	4614      	mov	r4, r2
 80040ac:	18db      	adds	r3, r3, r3
 80040ae:	eb44 0404 	adc.w	r4, r4, r4
 80040b2:	185b      	adds	r3, r3, r1
 80040b4:	eb44 0402 	adc.w	r4, r4, r2
 80040b8:	00e0      	lsls	r0, r4, #3
 80040ba:	6278      	str	r0, [r7, #36]	; 0x24
 80040bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040be:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80040c2:	6278      	str	r0, [r7, #36]	; 0x24
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	623b      	str	r3, [r7, #32]
 80040c8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80040cc:	eb13 0801 	adds.w	r8, r3, r1
 80040d0:	eb44 0902 	adc.w	r9, r4, r2
 80040d4:	4640      	mov	r0, r8
 80040d6:	4649      	mov	r1, r9
 80040d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f04f 0400 	mov.w	r4, #0
 80040e0:	00a2      	lsls	r2, r4, #2
 80040e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80040e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040e6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80040ea:	65fa      	str	r2, [r7, #92]	; 0x5c
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80040f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040f4:	f7fc f868 	bl	80001c8 <__aeabi_uldivmod>
 80040f8:	4603      	mov	r3, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	461a      	mov	r2, r3
 80040fe:	4ba4      	ldr	r3, [pc, #656]	; (8004390 <UART_SetConfig+0x66c>)
 8004100:	fba3 2302 	umull	r2, r3, r3, r2
 8004104:	095b      	lsrs	r3, r3, #5
 8004106:	011d      	lsls	r5, r3, #4
 8004108:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800410c:	4619      	mov	r1, r3
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	460b      	mov	r3, r1
 8004114:	4614      	mov	r4, r2
 8004116:	18db      	adds	r3, r3, r3
 8004118:	eb44 0404 	adc.w	r4, r4, r4
 800411c:	185b      	adds	r3, r3, r1
 800411e:	eb44 0402 	adc.w	r4, r4, r2
 8004122:	00e0      	lsls	r0, r4, #3
 8004124:	61f8      	str	r0, [r7, #28]
 8004126:	69f8      	ldr	r0, [r7, #28]
 8004128:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800412c:	61f8      	str	r0, [r7, #28]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004136:	eb13 0801 	adds.w	r8, r3, r1
 800413a:	eb44 0902 	adc.w	r9, r4, r2
 800413e:	4640      	mov	r0, r8
 8004140:	4649      	mov	r1, r9
 8004142:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f04f 0400 	mov.w	r4, #0
 800414a:	00a2      	lsls	r2, r4, #2
 800414c:	657a      	str	r2, [r7, #84]	; 0x54
 800414e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004150:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004154:	657a      	str	r2, [r7, #84]	; 0x54
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	653b      	str	r3, [r7, #80]	; 0x50
 800415a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800415e:	f7fc f833 	bl	80001c8 <__aeabi_uldivmod>
 8004162:	4603      	mov	r3, r0
 8004164:	460c      	mov	r4, r1
 8004166:	461a      	mov	r2, r3
 8004168:	4b89      	ldr	r3, [pc, #548]	; (8004390 <UART_SetConfig+0x66c>)
 800416a:	fba3 1302 	umull	r1, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2164      	movs	r1, #100	; 0x64
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	3332      	adds	r3, #50	; 0x32
 800417c:	4a84      	ldr	r2, [pc, #528]	; (8004390 <UART_SetConfig+0x66c>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004188:	441d      	add	r5, r3
 800418a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800418e:	4619      	mov	r1, r3
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	460b      	mov	r3, r1
 8004196:	4614      	mov	r4, r2
 8004198:	18db      	adds	r3, r3, r3
 800419a:	eb44 0404 	adc.w	r4, r4, r4
 800419e:	185b      	adds	r3, r3, r1
 80041a0:	eb44 0402 	adc.w	r4, r4, r2
 80041a4:	00e0      	lsls	r0, r4, #3
 80041a6:	6178      	str	r0, [r7, #20]
 80041a8:	6978      	ldr	r0, [r7, #20]
 80041aa:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80041ae:	6178      	str	r0, [r7, #20]
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80041b8:	eb13 0801 	adds.w	r8, r3, r1
 80041bc:	eb44 0902 	adc.w	r9, r4, r2
 80041c0:	4640      	mov	r0, r8
 80041c2:	4649      	mov	r1, r9
 80041c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f04f 0400 	mov.w	r4, #0
 80041cc:	00a2      	lsls	r2, r4, #2
 80041ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80041d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041d2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80041d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	64bb      	str	r3, [r7, #72]	; 0x48
 80041dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041e0:	f7fb fff2 	bl	80001c8 <__aeabi_uldivmod>
 80041e4:	4603      	mov	r3, r0
 80041e6:	460c      	mov	r4, r1
 80041e8:	461a      	mov	r2, r3
 80041ea:	4b69      	ldr	r3, [pc, #420]	; (8004390 <UART_SetConfig+0x66c>)
 80041ec:	fba3 1302 	umull	r1, r3, r3, r2
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	2164      	movs	r1, #100	; 0x64
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	3332      	adds	r3, #50	; 0x32
 80041fe:	4a64      	ldr	r2, [pc, #400]	; (8004390 <UART_SetConfig+0x66c>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	442b      	add	r3, r5
 800420c:	60b3      	str	r3, [r6, #8]
 800420e:	e0c1      	b.n	8004394 <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004210:	f7ff f984 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8004214:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004218:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	65bb      	str	r3, [r7, #88]	; 0x58
 800421e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004222:	4619      	mov	r1, r3
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	460b      	mov	r3, r1
 800422a:	4614      	mov	r4, r2
 800422c:	18db      	adds	r3, r3, r3
 800422e:	eb44 0404 	adc.w	r4, r4, r4
 8004232:	185b      	adds	r3, r3, r1
 8004234:	eb44 0402 	adc.w	r4, r4, r2
 8004238:	00e6      	lsls	r6, r4, #3
 800423a:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800423e:	00dd      	lsls	r5, r3, #3
 8004240:	462b      	mov	r3, r5
 8004242:	4634      	mov	r4, r6
 8004244:	185d      	adds	r5, r3, r1
 8004246:	eb44 0602 	adc.w	r6, r4, r2
 800424a:	4628      	mov	r0, r5
 800424c:	4631      	mov	r1, r6
 800424e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f04f 0400 	mov.w	r4, #0
 8004256:	00a5      	lsls	r5, r4, #2
 8004258:	677d      	str	r5, [r7, #116]	; 0x74
 800425a:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 800425c:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8004260:	677d      	str	r5, [r7, #116]	; 0x74
 8004262:	009c      	lsls	r4, r3, #2
 8004264:	673c      	str	r4, [r7, #112]	; 0x70
 8004266:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800426a:	f7fb ffad 	bl	80001c8 <__aeabi_uldivmod>
 800426e:	4603      	mov	r3, r0
 8004270:	460c      	mov	r4, r1
 8004272:	461a      	mov	r2, r3
 8004274:	4b46      	ldr	r3, [pc, #280]	; (8004390 <UART_SetConfig+0x66c>)
 8004276:	fba3 1302 	umull	r1, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	011d      	lsls	r5, r3, #4
 800427e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004282:	4619      	mov	r1, r3
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	460b      	mov	r3, r1
 800428a:	4614      	mov	r4, r2
 800428c:	18db      	adds	r3, r3, r3
 800428e:	eb44 0404 	adc.w	r4, r4, r4
 8004292:	185b      	adds	r3, r3, r1
 8004294:	eb44 0402 	adc.w	r4, r4, r2
 8004298:	00e0      	lsls	r0, r4, #3
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	00d8      	lsls	r0, r3, #3
 80042a6:	60b8      	str	r0, [r7, #8]
 80042a8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80042ac:	eb13 0801 	adds.w	r8, r3, r1
 80042b0:	eb44 0902 	adc.w	r9, r4, r2
 80042b4:	4640      	mov	r0, r8
 80042b6:	4649      	mov	r1, r9
 80042b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f04f 0400 	mov.w	r4, #0
 80042c0:	00a6      	lsls	r6, r4, #2
 80042c2:	66fe      	str	r6, [r7, #108]	; 0x6c
 80042c4:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 80042c6:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80042ca:	66fe      	str	r6, [r7, #108]	; 0x6c
 80042cc:	009c      	lsls	r4, r3, #2
 80042ce:	66bc      	str	r4, [r7, #104]	; 0x68
 80042d0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80042d4:	f7fb ff78 	bl	80001c8 <__aeabi_uldivmod>
 80042d8:	4603      	mov	r3, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	461a      	mov	r2, r3
 80042de:	4b2c      	ldr	r3, [pc, #176]	; (8004390 <UART_SetConfig+0x66c>)
 80042e0:	fba3 1302 	umull	r1, r3, r3, r2
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	2164      	movs	r1, #100	; 0x64
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	3332      	adds	r3, #50	; 0x32
 80042f2:	4a27      	ldr	r2, [pc, #156]	; (8004390 <UART_SetConfig+0x66c>)
 80042f4:	fba2 1303 	umull	r1, r3, r2, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042fe:	441d      	add	r5, r3
 8004300:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004304:	4619      	mov	r1, r3
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	460b      	mov	r3, r1
 800430c:	4614      	mov	r4, r2
 800430e:	18db      	adds	r3, r3, r3
 8004310:	eb44 0404 	adc.w	r4, r4, r4
 8004314:	185b      	adds	r3, r3, r1
 8004316:	eb44 0402 	adc.w	r4, r4, r2
 800431a:	00e0      	lsls	r0, r4, #3
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	00d8      	lsls	r0, r3, #3
 8004328:	6038      	str	r0, [r7, #0]
 800432a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800432e:	eb13 0801 	adds.w	r8, r3, r1
 8004332:	eb44 0902 	adc.w	r9, r4, r2
 8004336:	4640      	mov	r0, r8
 8004338:	4649      	mov	r1, r9
 800433a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f04f 0400 	mov.w	r4, #0
 8004342:	00a6      	lsls	r6, r4, #2
 8004344:	667e      	str	r6, [r7, #100]	; 0x64
 8004346:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8004348:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800434c:	667e      	str	r6, [r7, #100]	; 0x64
 800434e:	009c      	lsls	r4, r3, #2
 8004350:	663c      	str	r4, [r7, #96]	; 0x60
 8004352:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004356:	f7fb ff37 	bl	80001c8 <__aeabi_uldivmod>
 800435a:	4603      	mov	r3, r0
 800435c:	460c      	mov	r4, r1
 800435e:	461a      	mov	r2, r3
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <UART_SetConfig+0x66c>)
 8004362:	fba3 1302 	umull	r1, r3, r3, r2
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	2164      	movs	r1, #100	; 0x64
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	3332      	adds	r3, #50	; 0x32
 8004374:	4a06      	ldr	r2, [pc, #24]	; (8004390 <UART_SetConfig+0x66c>)
 8004376:	fba2 1303 	umull	r1, r3, r2, r3
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	442b      	add	r3, r5
 8004382:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004384:	6093      	str	r3, [r2, #8]
}
 8004386:	e005      	b.n	8004394 <UART_SetConfig+0x670>
 8004388:	40011000 	.word	0x40011000
 800438c:	40011400 	.word	0x40011400
 8004390:	51eb851f 	.word	0x51eb851f
 8004394:	bf00      	nop
 8004396:	378c      	adds	r7, #140	; 0x8c
 8004398:	46bd      	mov	sp, r7
 800439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800439e:	bf00      	nop

080043a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80043a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80043a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80043a6:	e003      	b.n	80043b0 <LoopCopyDataInit>

080043a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80043aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80043ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80043ae:	3104      	adds	r1, #4

080043b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80043b0:	480b      	ldr	r0, [pc, #44]	; (80043e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80043b2:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80043b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80043b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80043b8:	d3f6      	bcc.n	80043a8 <CopyDataInit>
  ldr  r2, =_sbss
 80043ba:	4a0b      	ldr	r2, [pc, #44]	; (80043e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80043bc:	e002      	b.n	80043c4 <LoopFillZerobss>

080043be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80043be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80043c0:	f842 3b04 	str.w	r3, [r2], #4

080043c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80043c4:	4b09      	ldr	r3, [pc, #36]	; (80043ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80043c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043c8:	d3f9      	bcc.n	80043be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043ca:	f7fc facd 	bl	8000968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043ce:	f000 f817 	bl	8004400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043d2:	f7fc f95b 	bl	800068c <main>
  bx  lr    
 80043d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80043dc:	08004de4 	.word	0x08004de4
  ldr  r0, =_sdata
 80043e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80043e4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80043e8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80043ec:	20000160 	.word	0x20000160

080043f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043f0:	e7fe      	b.n	80043f0 <ADC_IRQHandler>
	...

080043f4 <__errno>:
 80043f4:	4b01      	ldr	r3, [pc, #4]	; (80043fc <__errno+0x8>)
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	2000000c 	.word	0x2000000c

08004400 <__libc_init_array>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	4e0d      	ldr	r6, [pc, #52]	; (8004438 <__libc_init_array+0x38>)
 8004404:	4c0d      	ldr	r4, [pc, #52]	; (800443c <__libc_init_array+0x3c>)
 8004406:	1ba4      	subs	r4, r4, r6
 8004408:	10a4      	asrs	r4, r4, #2
 800440a:	2500      	movs	r5, #0
 800440c:	42a5      	cmp	r5, r4
 800440e:	d109      	bne.n	8004424 <__libc_init_array+0x24>
 8004410:	4e0b      	ldr	r6, [pc, #44]	; (8004440 <__libc_init_array+0x40>)
 8004412:	4c0c      	ldr	r4, [pc, #48]	; (8004444 <__libc_init_array+0x44>)
 8004414:	f000 fc8e 	bl	8004d34 <_init>
 8004418:	1ba4      	subs	r4, r4, r6
 800441a:	10a4      	asrs	r4, r4, #2
 800441c:	2500      	movs	r5, #0
 800441e:	42a5      	cmp	r5, r4
 8004420:	d105      	bne.n	800442e <__libc_init_array+0x2e>
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004428:	4798      	blx	r3
 800442a:	3501      	adds	r5, #1
 800442c:	e7ee      	b.n	800440c <__libc_init_array+0xc>
 800442e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004432:	4798      	blx	r3
 8004434:	3501      	adds	r5, #1
 8004436:	e7f2      	b.n	800441e <__libc_init_array+0x1e>
 8004438:	08004ddc 	.word	0x08004ddc
 800443c:	08004ddc 	.word	0x08004ddc
 8004440:	08004ddc 	.word	0x08004ddc
 8004444:	08004de0 	.word	0x08004de0

08004448 <memset>:
 8004448:	4402      	add	r2, r0
 800444a:	4603      	mov	r3, r0
 800444c:	4293      	cmp	r3, r2
 800444e:	d100      	bne.n	8004452 <memset+0xa>
 8004450:	4770      	bx	lr
 8004452:	f803 1b01 	strb.w	r1, [r3], #1
 8004456:	e7f9      	b.n	800444c <memset+0x4>

08004458 <_puts_r>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	460e      	mov	r6, r1
 800445c:	4605      	mov	r5, r0
 800445e:	b118      	cbz	r0, 8004468 <_puts_r+0x10>
 8004460:	6983      	ldr	r3, [r0, #24]
 8004462:	b90b      	cbnz	r3, 8004468 <_puts_r+0x10>
 8004464:	f000 fa0e 	bl	8004884 <__sinit>
 8004468:	69ab      	ldr	r3, [r5, #24]
 800446a:	68ac      	ldr	r4, [r5, #8]
 800446c:	b913      	cbnz	r3, 8004474 <_puts_r+0x1c>
 800446e:	4628      	mov	r0, r5
 8004470:	f000 fa08 	bl	8004884 <__sinit>
 8004474:	4b23      	ldr	r3, [pc, #140]	; (8004504 <_puts_r+0xac>)
 8004476:	429c      	cmp	r4, r3
 8004478:	d117      	bne.n	80044aa <_puts_r+0x52>
 800447a:	686c      	ldr	r4, [r5, #4]
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	071b      	lsls	r3, r3, #28
 8004480:	d51d      	bpl.n	80044be <_puts_r+0x66>
 8004482:	6923      	ldr	r3, [r4, #16]
 8004484:	b1db      	cbz	r3, 80044be <_puts_r+0x66>
 8004486:	3e01      	subs	r6, #1
 8004488:	68a3      	ldr	r3, [r4, #8]
 800448a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800448e:	3b01      	subs	r3, #1
 8004490:	60a3      	str	r3, [r4, #8]
 8004492:	b9e9      	cbnz	r1, 80044d0 <_puts_r+0x78>
 8004494:	2b00      	cmp	r3, #0
 8004496:	da2e      	bge.n	80044f6 <_puts_r+0x9e>
 8004498:	4622      	mov	r2, r4
 800449a:	210a      	movs	r1, #10
 800449c:	4628      	mov	r0, r5
 800449e:	f000 f83f 	bl	8004520 <__swbuf_r>
 80044a2:	3001      	adds	r0, #1
 80044a4:	d011      	beq.n	80044ca <_puts_r+0x72>
 80044a6:	200a      	movs	r0, #10
 80044a8:	bd70      	pop	{r4, r5, r6, pc}
 80044aa:	4b17      	ldr	r3, [pc, #92]	; (8004508 <_puts_r+0xb0>)
 80044ac:	429c      	cmp	r4, r3
 80044ae:	d101      	bne.n	80044b4 <_puts_r+0x5c>
 80044b0:	68ac      	ldr	r4, [r5, #8]
 80044b2:	e7e3      	b.n	800447c <_puts_r+0x24>
 80044b4:	4b15      	ldr	r3, [pc, #84]	; (800450c <_puts_r+0xb4>)
 80044b6:	429c      	cmp	r4, r3
 80044b8:	bf08      	it	eq
 80044ba:	68ec      	ldreq	r4, [r5, #12]
 80044bc:	e7de      	b.n	800447c <_puts_r+0x24>
 80044be:	4621      	mov	r1, r4
 80044c0:	4628      	mov	r0, r5
 80044c2:	f000 f87f 	bl	80045c4 <__swsetup_r>
 80044c6:	2800      	cmp	r0, #0
 80044c8:	d0dd      	beq.n	8004486 <_puts_r+0x2e>
 80044ca:	f04f 30ff 	mov.w	r0, #4294967295
 80044ce:	bd70      	pop	{r4, r5, r6, pc}
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	da04      	bge.n	80044de <_puts_r+0x86>
 80044d4:	69a2      	ldr	r2, [r4, #24]
 80044d6:	4293      	cmp	r3, r2
 80044d8:	db06      	blt.n	80044e8 <_puts_r+0x90>
 80044da:	290a      	cmp	r1, #10
 80044dc:	d004      	beq.n	80044e8 <_puts_r+0x90>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	6022      	str	r2, [r4, #0]
 80044e4:	7019      	strb	r1, [r3, #0]
 80044e6:	e7cf      	b.n	8004488 <_puts_r+0x30>
 80044e8:	4622      	mov	r2, r4
 80044ea:	4628      	mov	r0, r5
 80044ec:	f000 f818 	bl	8004520 <__swbuf_r>
 80044f0:	3001      	adds	r0, #1
 80044f2:	d1c9      	bne.n	8004488 <_puts_r+0x30>
 80044f4:	e7e9      	b.n	80044ca <_puts_r+0x72>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	200a      	movs	r0, #10
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	6022      	str	r2, [r4, #0]
 80044fe:	7018      	strb	r0, [r3, #0]
 8004500:	bd70      	pop	{r4, r5, r6, pc}
 8004502:	bf00      	nop
 8004504:	08004d94 	.word	0x08004d94
 8004508:	08004db4 	.word	0x08004db4
 800450c:	08004d74 	.word	0x08004d74

08004510 <puts>:
 8004510:	4b02      	ldr	r3, [pc, #8]	; (800451c <puts+0xc>)
 8004512:	4601      	mov	r1, r0
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	f7ff bf9f 	b.w	8004458 <_puts_r>
 800451a:	bf00      	nop
 800451c:	2000000c 	.word	0x2000000c

08004520 <__swbuf_r>:
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	460e      	mov	r6, r1
 8004524:	4614      	mov	r4, r2
 8004526:	4605      	mov	r5, r0
 8004528:	b118      	cbz	r0, 8004532 <__swbuf_r+0x12>
 800452a:	6983      	ldr	r3, [r0, #24]
 800452c:	b90b      	cbnz	r3, 8004532 <__swbuf_r+0x12>
 800452e:	f000 f9a9 	bl	8004884 <__sinit>
 8004532:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <__swbuf_r+0x98>)
 8004534:	429c      	cmp	r4, r3
 8004536:	d12a      	bne.n	800458e <__swbuf_r+0x6e>
 8004538:	686c      	ldr	r4, [r5, #4]
 800453a:	69a3      	ldr	r3, [r4, #24]
 800453c:	60a3      	str	r3, [r4, #8]
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	071a      	lsls	r2, r3, #28
 8004542:	d52e      	bpl.n	80045a2 <__swbuf_r+0x82>
 8004544:	6923      	ldr	r3, [r4, #16]
 8004546:	b363      	cbz	r3, 80045a2 <__swbuf_r+0x82>
 8004548:	6923      	ldr	r3, [r4, #16]
 800454a:	6820      	ldr	r0, [r4, #0]
 800454c:	1ac0      	subs	r0, r0, r3
 800454e:	6963      	ldr	r3, [r4, #20]
 8004550:	b2f6      	uxtb	r6, r6
 8004552:	4298      	cmp	r0, r3
 8004554:	4637      	mov	r7, r6
 8004556:	db04      	blt.n	8004562 <__swbuf_r+0x42>
 8004558:	4621      	mov	r1, r4
 800455a:	4628      	mov	r0, r5
 800455c:	f000 f928 	bl	80047b0 <_fflush_r>
 8004560:	bb28      	cbnz	r0, 80045ae <__swbuf_r+0x8e>
 8004562:	68a3      	ldr	r3, [r4, #8]
 8004564:	3b01      	subs	r3, #1
 8004566:	60a3      	str	r3, [r4, #8]
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	6022      	str	r2, [r4, #0]
 800456e:	701e      	strb	r6, [r3, #0]
 8004570:	6963      	ldr	r3, [r4, #20]
 8004572:	3001      	adds	r0, #1
 8004574:	4298      	cmp	r0, r3
 8004576:	d004      	beq.n	8004582 <__swbuf_r+0x62>
 8004578:	89a3      	ldrh	r3, [r4, #12]
 800457a:	07db      	lsls	r3, r3, #31
 800457c:	d519      	bpl.n	80045b2 <__swbuf_r+0x92>
 800457e:	2e0a      	cmp	r6, #10
 8004580:	d117      	bne.n	80045b2 <__swbuf_r+0x92>
 8004582:	4621      	mov	r1, r4
 8004584:	4628      	mov	r0, r5
 8004586:	f000 f913 	bl	80047b0 <_fflush_r>
 800458a:	b190      	cbz	r0, 80045b2 <__swbuf_r+0x92>
 800458c:	e00f      	b.n	80045ae <__swbuf_r+0x8e>
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <__swbuf_r+0x9c>)
 8004590:	429c      	cmp	r4, r3
 8004592:	d101      	bne.n	8004598 <__swbuf_r+0x78>
 8004594:	68ac      	ldr	r4, [r5, #8]
 8004596:	e7d0      	b.n	800453a <__swbuf_r+0x1a>
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <__swbuf_r+0xa0>)
 800459a:	429c      	cmp	r4, r3
 800459c:	bf08      	it	eq
 800459e:	68ec      	ldreq	r4, [r5, #12]
 80045a0:	e7cb      	b.n	800453a <__swbuf_r+0x1a>
 80045a2:	4621      	mov	r1, r4
 80045a4:	4628      	mov	r0, r5
 80045a6:	f000 f80d 	bl	80045c4 <__swsetup_r>
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d0cc      	beq.n	8004548 <__swbuf_r+0x28>
 80045ae:	f04f 37ff 	mov.w	r7, #4294967295
 80045b2:	4638      	mov	r0, r7
 80045b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045b6:	bf00      	nop
 80045b8:	08004d94 	.word	0x08004d94
 80045bc:	08004db4 	.word	0x08004db4
 80045c0:	08004d74 	.word	0x08004d74

080045c4 <__swsetup_r>:
 80045c4:	4b32      	ldr	r3, [pc, #200]	; (8004690 <__swsetup_r+0xcc>)
 80045c6:	b570      	push	{r4, r5, r6, lr}
 80045c8:	681d      	ldr	r5, [r3, #0]
 80045ca:	4606      	mov	r6, r0
 80045cc:	460c      	mov	r4, r1
 80045ce:	b125      	cbz	r5, 80045da <__swsetup_r+0x16>
 80045d0:	69ab      	ldr	r3, [r5, #24]
 80045d2:	b913      	cbnz	r3, 80045da <__swsetup_r+0x16>
 80045d4:	4628      	mov	r0, r5
 80045d6:	f000 f955 	bl	8004884 <__sinit>
 80045da:	4b2e      	ldr	r3, [pc, #184]	; (8004694 <__swsetup_r+0xd0>)
 80045dc:	429c      	cmp	r4, r3
 80045de:	d10f      	bne.n	8004600 <__swsetup_r+0x3c>
 80045e0:	686c      	ldr	r4, [r5, #4]
 80045e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	0715      	lsls	r5, r2, #28
 80045ea:	d42c      	bmi.n	8004646 <__swsetup_r+0x82>
 80045ec:	06d0      	lsls	r0, r2, #27
 80045ee:	d411      	bmi.n	8004614 <__swsetup_r+0x50>
 80045f0:	2209      	movs	r2, #9
 80045f2:	6032      	str	r2, [r6, #0]
 80045f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045f8:	81a3      	strh	r3, [r4, #12]
 80045fa:	f04f 30ff 	mov.w	r0, #4294967295
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	4b25      	ldr	r3, [pc, #148]	; (8004698 <__swsetup_r+0xd4>)
 8004602:	429c      	cmp	r4, r3
 8004604:	d101      	bne.n	800460a <__swsetup_r+0x46>
 8004606:	68ac      	ldr	r4, [r5, #8]
 8004608:	e7eb      	b.n	80045e2 <__swsetup_r+0x1e>
 800460a:	4b24      	ldr	r3, [pc, #144]	; (800469c <__swsetup_r+0xd8>)
 800460c:	429c      	cmp	r4, r3
 800460e:	bf08      	it	eq
 8004610:	68ec      	ldreq	r4, [r5, #12]
 8004612:	e7e6      	b.n	80045e2 <__swsetup_r+0x1e>
 8004614:	0751      	lsls	r1, r2, #29
 8004616:	d512      	bpl.n	800463e <__swsetup_r+0x7a>
 8004618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800461a:	b141      	cbz	r1, 800462e <__swsetup_r+0x6a>
 800461c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004620:	4299      	cmp	r1, r3
 8004622:	d002      	beq.n	800462a <__swsetup_r+0x66>
 8004624:	4630      	mov	r0, r6
 8004626:	f000 fa1b 	bl	8004a60 <_free_r>
 800462a:	2300      	movs	r3, #0
 800462c:	6363      	str	r3, [r4, #52]	; 0x34
 800462e:	89a3      	ldrh	r3, [r4, #12]
 8004630:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004634:	81a3      	strh	r3, [r4, #12]
 8004636:	2300      	movs	r3, #0
 8004638:	6063      	str	r3, [r4, #4]
 800463a:	6923      	ldr	r3, [r4, #16]
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	89a3      	ldrh	r3, [r4, #12]
 8004640:	f043 0308 	orr.w	r3, r3, #8
 8004644:	81a3      	strh	r3, [r4, #12]
 8004646:	6923      	ldr	r3, [r4, #16]
 8004648:	b94b      	cbnz	r3, 800465e <__swsetup_r+0x9a>
 800464a:	89a3      	ldrh	r3, [r4, #12]
 800464c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004654:	d003      	beq.n	800465e <__swsetup_r+0x9a>
 8004656:	4621      	mov	r1, r4
 8004658:	4630      	mov	r0, r6
 800465a:	f000 f9c1 	bl	80049e0 <__smakebuf_r>
 800465e:	89a2      	ldrh	r2, [r4, #12]
 8004660:	f012 0301 	ands.w	r3, r2, #1
 8004664:	d00c      	beq.n	8004680 <__swsetup_r+0xbc>
 8004666:	2300      	movs	r3, #0
 8004668:	60a3      	str	r3, [r4, #8]
 800466a:	6963      	ldr	r3, [r4, #20]
 800466c:	425b      	negs	r3, r3
 800466e:	61a3      	str	r3, [r4, #24]
 8004670:	6923      	ldr	r3, [r4, #16]
 8004672:	b953      	cbnz	r3, 800468a <__swsetup_r+0xc6>
 8004674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004678:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800467c:	d1ba      	bne.n	80045f4 <__swsetup_r+0x30>
 800467e:	bd70      	pop	{r4, r5, r6, pc}
 8004680:	0792      	lsls	r2, r2, #30
 8004682:	bf58      	it	pl
 8004684:	6963      	ldrpl	r3, [r4, #20]
 8004686:	60a3      	str	r3, [r4, #8]
 8004688:	e7f2      	b.n	8004670 <__swsetup_r+0xac>
 800468a:	2000      	movs	r0, #0
 800468c:	e7f7      	b.n	800467e <__swsetup_r+0xba>
 800468e:	bf00      	nop
 8004690:	2000000c 	.word	0x2000000c
 8004694:	08004d94 	.word	0x08004d94
 8004698:	08004db4 	.word	0x08004db4
 800469c:	08004d74 	.word	0x08004d74

080046a0 <__sflush_r>:
 80046a0:	898a      	ldrh	r2, [r1, #12]
 80046a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a6:	4605      	mov	r5, r0
 80046a8:	0710      	lsls	r0, r2, #28
 80046aa:	460c      	mov	r4, r1
 80046ac:	d45a      	bmi.n	8004764 <__sflush_r+0xc4>
 80046ae:	684b      	ldr	r3, [r1, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	dc05      	bgt.n	80046c0 <__sflush_r+0x20>
 80046b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	dc02      	bgt.n	80046c0 <__sflush_r+0x20>
 80046ba:	2000      	movs	r0, #0
 80046bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046c2:	2e00      	cmp	r6, #0
 80046c4:	d0f9      	beq.n	80046ba <__sflush_r+0x1a>
 80046c6:	2300      	movs	r3, #0
 80046c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046cc:	682f      	ldr	r7, [r5, #0]
 80046ce:	602b      	str	r3, [r5, #0]
 80046d0:	d033      	beq.n	800473a <__sflush_r+0x9a>
 80046d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046d4:	89a3      	ldrh	r3, [r4, #12]
 80046d6:	075a      	lsls	r2, r3, #29
 80046d8:	d505      	bpl.n	80046e6 <__sflush_r+0x46>
 80046da:	6863      	ldr	r3, [r4, #4]
 80046dc:	1ac0      	subs	r0, r0, r3
 80046de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046e0:	b10b      	cbz	r3, 80046e6 <__sflush_r+0x46>
 80046e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046e4:	1ac0      	subs	r0, r0, r3
 80046e6:	2300      	movs	r3, #0
 80046e8:	4602      	mov	r2, r0
 80046ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046ec:	6a21      	ldr	r1, [r4, #32]
 80046ee:	4628      	mov	r0, r5
 80046f0:	47b0      	blx	r6
 80046f2:	1c43      	adds	r3, r0, #1
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	d106      	bne.n	8004706 <__sflush_r+0x66>
 80046f8:	6829      	ldr	r1, [r5, #0]
 80046fa:	291d      	cmp	r1, #29
 80046fc:	d84b      	bhi.n	8004796 <__sflush_r+0xf6>
 80046fe:	4a2b      	ldr	r2, [pc, #172]	; (80047ac <__sflush_r+0x10c>)
 8004700:	40ca      	lsrs	r2, r1
 8004702:	07d6      	lsls	r6, r2, #31
 8004704:	d547      	bpl.n	8004796 <__sflush_r+0xf6>
 8004706:	2200      	movs	r2, #0
 8004708:	6062      	str	r2, [r4, #4]
 800470a:	04d9      	lsls	r1, r3, #19
 800470c:	6922      	ldr	r2, [r4, #16]
 800470e:	6022      	str	r2, [r4, #0]
 8004710:	d504      	bpl.n	800471c <__sflush_r+0x7c>
 8004712:	1c42      	adds	r2, r0, #1
 8004714:	d101      	bne.n	800471a <__sflush_r+0x7a>
 8004716:	682b      	ldr	r3, [r5, #0]
 8004718:	b903      	cbnz	r3, 800471c <__sflush_r+0x7c>
 800471a:	6560      	str	r0, [r4, #84]	; 0x54
 800471c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800471e:	602f      	str	r7, [r5, #0]
 8004720:	2900      	cmp	r1, #0
 8004722:	d0ca      	beq.n	80046ba <__sflush_r+0x1a>
 8004724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004728:	4299      	cmp	r1, r3
 800472a:	d002      	beq.n	8004732 <__sflush_r+0x92>
 800472c:	4628      	mov	r0, r5
 800472e:	f000 f997 	bl	8004a60 <_free_r>
 8004732:	2000      	movs	r0, #0
 8004734:	6360      	str	r0, [r4, #52]	; 0x34
 8004736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800473a:	6a21      	ldr	r1, [r4, #32]
 800473c:	2301      	movs	r3, #1
 800473e:	4628      	mov	r0, r5
 8004740:	47b0      	blx	r6
 8004742:	1c41      	adds	r1, r0, #1
 8004744:	d1c6      	bne.n	80046d4 <__sflush_r+0x34>
 8004746:	682b      	ldr	r3, [r5, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0c3      	beq.n	80046d4 <__sflush_r+0x34>
 800474c:	2b1d      	cmp	r3, #29
 800474e:	d001      	beq.n	8004754 <__sflush_r+0xb4>
 8004750:	2b16      	cmp	r3, #22
 8004752:	d101      	bne.n	8004758 <__sflush_r+0xb8>
 8004754:	602f      	str	r7, [r5, #0]
 8004756:	e7b0      	b.n	80046ba <__sflush_r+0x1a>
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800475e:	81a3      	strh	r3, [r4, #12]
 8004760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004764:	690f      	ldr	r7, [r1, #16]
 8004766:	2f00      	cmp	r7, #0
 8004768:	d0a7      	beq.n	80046ba <__sflush_r+0x1a>
 800476a:	0793      	lsls	r3, r2, #30
 800476c:	680e      	ldr	r6, [r1, #0]
 800476e:	bf08      	it	eq
 8004770:	694b      	ldreq	r3, [r1, #20]
 8004772:	600f      	str	r7, [r1, #0]
 8004774:	bf18      	it	ne
 8004776:	2300      	movne	r3, #0
 8004778:	eba6 0807 	sub.w	r8, r6, r7
 800477c:	608b      	str	r3, [r1, #8]
 800477e:	f1b8 0f00 	cmp.w	r8, #0
 8004782:	dd9a      	ble.n	80046ba <__sflush_r+0x1a>
 8004784:	4643      	mov	r3, r8
 8004786:	463a      	mov	r2, r7
 8004788:	6a21      	ldr	r1, [r4, #32]
 800478a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800478c:	4628      	mov	r0, r5
 800478e:	47b0      	blx	r6
 8004790:	2800      	cmp	r0, #0
 8004792:	dc07      	bgt.n	80047a4 <__sflush_r+0x104>
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479a:	81a3      	strh	r3, [r4, #12]
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a4:	4407      	add	r7, r0
 80047a6:	eba8 0800 	sub.w	r8, r8, r0
 80047aa:	e7e8      	b.n	800477e <__sflush_r+0xde>
 80047ac:	20400001 	.word	0x20400001

080047b0 <_fflush_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	690b      	ldr	r3, [r1, #16]
 80047b4:	4605      	mov	r5, r0
 80047b6:	460c      	mov	r4, r1
 80047b8:	b1db      	cbz	r3, 80047f2 <_fflush_r+0x42>
 80047ba:	b118      	cbz	r0, 80047c4 <_fflush_r+0x14>
 80047bc:	6983      	ldr	r3, [r0, #24]
 80047be:	b90b      	cbnz	r3, 80047c4 <_fflush_r+0x14>
 80047c0:	f000 f860 	bl	8004884 <__sinit>
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <_fflush_r+0x48>)
 80047c6:	429c      	cmp	r4, r3
 80047c8:	d109      	bne.n	80047de <_fflush_r+0x2e>
 80047ca:	686c      	ldr	r4, [r5, #4]
 80047cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047d0:	b17b      	cbz	r3, 80047f2 <_fflush_r+0x42>
 80047d2:	4621      	mov	r1, r4
 80047d4:	4628      	mov	r0, r5
 80047d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047da:	f7ff bf61 	b.w	80046a0 <__sflush_r>
 80047de:	4b07      	ldr	r3, [pc, #28]	; (80047fc <_fflush_r+0x4c>)
 80047e0:	429c      	cmp	r4, r3
 80047e2:	d101      	bne.n	80047e8 <_fflush_r+0x38>
 80047e4:	68ac      	ldr	r4, [r5, #8]
 80047e6:	e7f1      	b.n	80047cc <_fflush_r+0x1c>
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <_fflush_r+0x50>)
 80047ea:	429c      	cmp	r4, r3
 80047ec:	bf08      	it	eq
 80047ee:	68ec      	ldreq	r4, [r5, #12]
 80047f0:	e7ec      	b.n	80047cc <_fflush_r+0x1c>
 80047f2:	2000      	movs	r0, #0
 80047f4:	bd38      	pop	{r3, r4, r5, pc}
 80047f6:	bf00      	nop
 80047f8:	08004d94 	.word	0x08004d94
 80047fc:	08004db4 	.word	0x08004db4
 8004800:	08004d74 	.word	0x08004d74

08004804 <_cleanup_r>:
 8004804:	4901      	ldr	r1, [pc, #4]	; (800480c <_cleanup_r+0x8>)
 8004806:	f000 b8a9 	b.w	800495c <_fwalk_reent>
 800480a:	bf00      	nop
 800480c:	080047b1 	.word	0x080047b1

08004810 <std.isra.0>:
 8004810:	2300      	movs	r3, #0
 8004812:	b510      	push	{r4, lr}
 8004814:	4604      	mov	r4, r0
 8004816:	6003      	str	r3, [r0, #0]
 8004818:	6043      	str	r3, [r0, #4]
 800481a:	6083      	str	r3, [r0, #8]
 800481c:	8181      	strh	r1, [r0, #12]
 800481e:	6643      	str	r3, [r0, #100]	; 0x64
 8004820:	81c2      	strh	r2, [r0, #14]
 8004822:	6103      	str	r3, [r0, #16]
 8004824:	6143      	str	r3, [r0, #20]
 8004826:	6183      	str	r3, [r0, #24]
 8004828:	4619      	mov	r1, r3
 800482a:	2208      	movs	r2, #8
 800482c:	305c      	adds	r0, #92	; 0x5c
 800482e:	f7ff fe0b 	bl	8004448 <memset>
 8004832:	4b05      	ldr	r3, [pc, #20]	; (8004848 <std.isra.0+0x38>)
 8004834:	6263      	str	r3, [r4, #36]	; 0x24
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <std.isra.0+0x3c>)
 8004838:	62a3      	str	r3, [r4, #40]	; 0x28
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <std.isra.0+0x40>)
 800483c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800483e:	4b05      	ldr	r3, [pc, #20]	; (8004854 <std.isra.0+0x44>)
 8004840:	6224      	str	r4, [r4, #32]
 8004842:	6323      	str	r3, [r4, #48]	; 0x30
 8004844:	bd10      	pop	{r4, pc}
 8004846:	bf00      	nop
 8004848:	08004bd9 	.word	0x08004bd9
 800484c:	08004bfb 	.word	0x08004bfb
 8004850:	08004c33 	.word	0x08004c33
 8004854:	08004c57 	.word	0x08004c57

08004858 <__sfmoreglue>:
 8004858:	b570      	push	{r4, r5, r6, lr}
 800485a:	1e4a      	subs	r2, r1, #1
 800485c:	2568      	movs	r5, #104	; 0x68
 800485e:	4355      	muls	r5, r2
 8004860:	460e      	mov	r6, r1
 8004862:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004866:	f000 f949 	bl	8004afc <_malloc_r>
 800486a:	4604      	mov	r4, r0
 800486c:	b140      	cbz	r0, 8004880 <__sfmoreglue+0x28>
 800486e:	2100      	movs	r1, #0
 8004870:	e880 0042 	stmia.w	r0, {r1, r6}
 8004874:	300c      	adds	r0, #12
 8004876:	60a0      	str	r0, [r4, #8]
 8004878:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800487c:	f7ff fde4 	bl	8004448 <memset>
 8004880:	4620      	mov	r0, r4
 8004882:	bd70      	pop	{r4, r5, r6, pc}

08004884 <__sinit>:
 8004884:	6983      	ldr	r3, [r0, #24]
 8004886:	b510      	push	{r4, lr}
 8004888:	4604      	mov	r4, r0
 800488a:	bb33      	cbnz	r3, 80048da <__sinit+0x56>
 800488c:	6483      	str	r3, [r0, #72]	; 0x48
 800488e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004890:	6503      	str	r3, [r0, #80]	; 0x50
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <__sinit+0x58>)
 8004894:	4a12      	ldr	r2, [pc, #72]	; (80048e0 <__sinit+0x5c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6282      	str	r2, [r0, #40]	; 0x28
 800489a:	4298      	cmp	r0, r3
 800489c:	bf04      	itt	eq
 800489e:	2301      	moveq	r3, #1
 80048a0:	6183      	streq	r3, [r0, #24]
 80048a2:	f000 f81f 	bl	80048e4 <__sfp>
 80048a6:	6060      	str	r0, [r4, #4]
 80048a8:	4620      	mov	r0, r4
 80048aa:	f000 f81b 	bl	80048e4 <__sfp>
 80048ae:	60a0      	str	r0, [r4, #8]
 80048b0:	4620      	mov	r0, r4
 80048b2:	f000 f817 	bl	80048e4 <__sfp>
 80048b6:	2200      	movs	r2, #0
 80048b8:	60e0      	str	r0, [r4, #12]
 80048ba:	2104      	movs	r1, #4
 80048bc:	6860      	ldr	r0, [r4, #4]
 80048be:	f7ff ffa7 	bl	8004810 <std.isra.0>
 80048c2:	2201      	movs	r2, #1
 80048c4:	2109      	movs	r1, #9
 80048c6:	68a0      	ldr	r0, [r4, #8]
 80048c8:	f7ff ffa2 	bl	8004810 <std.isra.0>
 80048cc:	2202      	movs	r2, #2
 80048ce:	2112      	movs	r1, #18
 80048d0:	68e0      	ldr	r0, [r4, #12]
 80048d2:	f7ff ff9d 	bl	8004810 <std.isra.0>
 80048d6:	2301      	movs	r3, #1
 80048d8:	61a3      	str	r3, [r4, #24]
 80048da:	bd10      	pop	{r4, pc}
 80048dc:	08004d70 	.word	0x08004d70
 80048e0:	08004805 	.word	0x08004805

080048e4 <__sfp>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	4b1c      	ldr	r3, [pc, #112]	; (8004958 <__sfp+0x74>)
 80048e8:	681e      	ldr	r6, [r3, #0]
 80048ea:	69b3      	ldr	r3, [r6, #24]
 80048ec:	4607      	mov	r7, r0
 80048ee:	b913      	cbnz	r3, 80048f6 <__sfp+0x12>
 80048f0:	4630      	mov	r0, r6
 80048f2:	f7ff ffc7 	bl	8004884 <__sinit>
 80048f6:	3648      	adds	r6, #72	; 0x48
 80048f8:	68b4      	ldr	r4, [r6, #8]
 80048fa:	6873      	ldr	r3, [r6, #4]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	d503      	bpl.n	8004908 <__sfp+0x24>
 8004900:	6833      	ldr	r3, [r6, #0]
 8004902:	b133      	cbz	r3, 8004912 <__sfp+0x2e>
 8004904:	6836      	ldr	r6, [r6, #0]
 8004906:	e7f7      	b.n	80048f8 <__sfp+0x14>
 8004908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800490c:	b16d      	cbz	r5, 800492a <__sfp+0x46>
 800490e:	3468      	adds	r4, #104	; 0x68
 8004910:	e7f4      	b.n	80048fc <__sfp+0x18>
 8004912:	2104      	movs	r1, #4
 8004914:	4638      	mov	r0, r7
 8004916:	f7ff ff9f 	bl	8004858 <__sfmoreglue>
 800491a:	6030      	str	r0, [r6, #0]
 800491c:	2800      	cmp	r0, #0
 800491e:	d1f1      	bne.n	8004904 <__sfp+0x20>
 8004920:	230c      	movs	r3, #12
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	4604      	mov	r4, r0
 8004926:	4620      	mov	r0, r4
 8004928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800492a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800492e:	81e3      	strh	r3, [r4, #14]
 8004930:	2301      	movs	r3, #1
 8004932:	81a3      	strh	r3, [r4, #12]
 8004934:	6665      	str	r5, [r4, #100]	; 0x64
 8004936:	6025      	str	r5, [r4, #0]
 8004938:	60a5      	str	r5, [r4, #8]
 800493a:	6065      	str	r5, [r4, #4]
 800493c:	6125      	str	r5, [r4, #16]
 800493e:	6165      	str	r5, [r4, #20]
 8004940:	61a5      	str	r5, [r4, #24]
 8004942:	2208      	movs	r2, #8
 8004944:	4629      	mov	r1, r5
 8004946:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800494a:	f7ff fd7d 	bl	8004448 <memset>
 800494e:	6365      	str	r5, [r4, #52]	; 0x34
 8004950:	63a5      	str	r5, [r4, #56]	; 0x38
 8004952:	64a5      	str	r5, [r4, #72]	; 0x48
 8004954:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004956:	e7e6      	b.n	8004926 <__sfp+0x42>
 8004958:	08004d70 	.word	0x08004d70

0800495c <_fwalk_reent>:
 800495c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004960:	4680      	mov	r8, r0
 8004962:	4689      	mov	r9, r1
 8004964:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004968:	2600      	movs	r6, #0
 800496a:	b914      	cbnz	r4, 8004972 <_fwalk_reent+0x16>
 800496c:	4630      	mov	r0, r6
 800496e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004972:	68a5      	ldr	r5, [r4, #8]
 8004974:	6867      	ldr	r7, [r4, #4]
 8004976:	3f01      	subs	r7, #1
 8004978:	d501      	bpl.n	800497e <_fwalk_reent+0x22>
 800497a:	6824      	ldr	r4, [r4, #0]
 800497c:	e7f5      	b.n	800496a <_fwalk_reent+0xe>
 800497e:	89ab      	ldrh	r3, [r5, #12]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d907      	bls.n	8004994 <_fwalk_reent+0x38>
 8004984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004988:	3301      	adds	r3, #1
 800498a:	d003      	beq.n	8004994 <_fwalk_reent+0x38>
 800498c:	4629      	mov	r1, r5
 800498e:	4640      	mov	r0, r8
 8004990:	47c8      	blx	r9
 8004992:	4306      	orrs	r6, r0
 8004994:	3568      	adds	r5, #104	; 0x68
 8004996:	e7ee      	b.n	8004976 <_fwalk_reent+0x1a>

08004998 <__swhatbuf_r>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	460e      	mov	r6, r1
 800499c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a0:	2900      	cmp	r1, #0
 80049a2:	b090      	sub	sp, #64	; 0x40
 80049a4:	4614      	mov	r4, r2
 80049a6:	461d      	mov	r5, r3
 80049a8:	da07      	bge.n	80049ba <__swhatbuf_r+0x22>
 80049aa:	2300      	movs	r3, #0
 80049ac:	602b      	str	r3, [r5, #0]
 80049ae:	89b3      	ldrh	r3, [r6, #12]
 80049b0:	061a      	lsls	r2, r3, #24
 80049b2:	d410      	bmi.n	80049d6 <__swhatbuf_r+0x3e>
 80049b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b8:	e00e      	b.n	80049d8 <__swhatbuf_r+0x40>
 80049ba:	aa01      	add	r2, sp, #4
 80049bc:	f000 f972 	bl	8004ca4 <_fstat_r>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	dbf2      	blt.n	80049aa <__swhatbuf_r+0x12>
 80049c4:	9a02      	ldr	r2, [sp, #8]
 80049c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049ce:	425a      	negs	r2, r3
 80049d0:	415a      	adcs	r2, r3
 80049d2:	602a      	str	r2, [r5, #0]
 80049d4:	e7ee      	b.n	80049b4 <__swhatbuf_r+0x1c>
 80049d6:	2340      	movs	r3, #64	; 0x40
 80049d8:	2000      	movs	r0, #0
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	b010      	add	sp, #64	; 0x40
 80049de:	bd70      	pop	{r4, r5, r6, pc}

080049e0 <__smakebuf_r>:
 80049e0:	898b      	ldrh	r3, [r1, #12]
 80049e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049e4:	079d      	lsls	r5, r3, #30
 80049e6:	4606      	mov	r6, r0
 80049e8:	460c      	mov	r4, r1
 80049ea:	d507      	bpl.n	80049fc <__smakebuf_r+0x1c>
 80049ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	6123      	str	r3, [r4, #16]
 80049f4:	2301      	movs	r3, #1
 80049f6:	6163      	str	r3, [r4, #20]
 80049f8:	b002      	add	sp, #8
 80049fa:	bd70      	pop	{r4, r5, r6, pc}
 80049fc:	ab01      	add	r3, sp, #4
 80049fe:	466a      	mov	r2, sp
 8004a00:	f7ff ffca 	bl	8004998 <__swhatbuf_r>
 8004a04:	9900      	ldr	r1, [sp, #0]
 8004a06:	4605      	mov	r5, r0
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f000 f877 	bl	8004afc <_malloc_r>
 8004a0e:	b948      	cbnz	r0, 8004a24 <__smakebuf_r+0x44>
 8004a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a14:	059a      	lsls	r2, r3, #22
 8004a16:	d4ef      	bmi.n	80049f8 <__smakebuf_r+0x18>
 8004a18:	f023 0303 	bic.w	r3, r3, #3
 8004a1c:	f043 0302 	orr.w	r3, r3, #2
 8004a20:	81a3      	strh	r3, [r4, #12]
 8004a22:	e7e3      	b.n	80049ec <__smakebuf_r+0xc>
 8004a24:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <__smakebuf_r+0x7c>)
 8004a26:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	6020      	str	r0, [r4, #0]
 8004a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a30:	81a3      	strh	r3, [r4, #12]
 8004a32:	9b00      	ldr	r3, [sp, #0]
 8004a34:	6163      	str	r3, [r4, #20]
 8004a36:	9b01      	ldr	r3, [sp, #4]
 8004a38:	6120      	str	r0, [r4, #16]
 8004a3a:	b15b      	cbz	r3, 8004a54 <__smakebuf_r+0x74>
 8004a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a40:	4630      	mov	r0, r6
 8004a42:	f000 f941 	bl	8004cc8 <_isatty_r>
 8004a46:	b128      	cbz	r0, 8004a54 <__smakebuf_r+0x74>
 8004a48:	89a3      	ldrh	r3, [r4, #12]
 8004a4a:	f023 0303 	bic.w	r3, r3, #3
 8004a4e:	f043 0301 	orr.w	r3, r3, #1
 8004a52:	81a3      	strh	r3, [r4, #12]
 8004a54:	89a3      	ldrh	r3, [r4, #12]
 8004a56:	431d      	orrs	r5, r3
 8004a58:	81a5      	strh	r5, [r4, #12]
 8004a5a:	e7cd      	b.n	80049f8 <__smakebuf_r+0x18>
 8004a5c:	08004805 	.word	0x08004805

08004a60 <_free_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4605      	mov	r5, r0
 8004a64:	2900      	cmp	r1, #0
 8004a66:	d045      	beq.n	8004af4 <_free_r+0x94>
 8004a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a6c:	1f0c      	subs	r4, r1, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bfb8      	it	lt
 8004a72:	18e4      	addlt	r4, r4, r3
 8004a74:	f000 f94a 	bl	8004d0c <__malloc_lock>
 8004a78:	4a1f      	ldr	r2, [pc, #124]	; (8004af8 <_free_r+0x98>)
 8004a7a:	6813      	ldr	r3, [r2, #0]
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	b933      	cbnz	r3, 8004a8e <_free_r+0x2e>
 8004a80:	6063      	str	r3, [r4, #4]
 8004a82:	6014      	str	r4, [r2, #0]
 8004a84:	4628      	mov	r0, r5
 8004a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a8a:	f000 b940 	b.w	8004d0e <__malloc_unlock>
 8004a8e:	42a3      	cmp	r3, r4
 8004a90:	d90c      	bls.n	8004aac <_free_r+0x4c>
 8004a92:	6821      	ldr	r1, [r4, #0]
 8004a94:	1862      	adds	r2, r4, r1
 8004a96:	4293      	cmp	r3, r2
 8004a98:	bf04      	itt	eq
 8004a9a:	681a      	ldreq	r2, [r3, #0]
 8004a9c:	685b      	ldreq	r3, [r3, #4]
 8004a9e:	6063      	str	r3, [r4, #4]
 8004aa0:	bf04      	itt	eq
 8004aa2:	1852      	addeq	r2, r2, r1
 8004aa4:	6022      	streq	r2, [r4, #0]
 8004aa6:	6004      	str	r4, [r0, #0]
 8004aa8:	e7ec      	b.n	8004a84 <_free_r+0x24>
 8004aaa:	4613      	mov	r3, r2
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	b10a      	cbz	r2, 8004ab4 <_free_r+0x54>
 8004ab0:	42a2      	cmp	r2, r4
 8004ab2:	d9fa      	bls.n	8004aaa <_free_r+0x4a>
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	1858      	adds	r0, r3, r1
 8004ab8:	42a0      	cmp	r0, r4
 8004aba:	d10b      	bne.n	8004ad4 <_free_r+0x74>
 8004abc:	6820      	ldr	r0, [r4, #0]
 8004abe:	4401      	add	r1, r0
 8004ac0:	1858      	adds	r0, r3, r1
 8004ac2:	4282      	cmp	r2, r0
 8004ac4:	6019      	str	r1, [r3, #0]
 8004ac6:	d1dd      	bne.n	8004a84 <_free_r+0x24>
 8004ac8:	6810      	ldr	r0, [r2, #0]
 8004aca:	6852      	ldr	r2, [r2, #4]
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	4401      	add	r1, r0
 8004ad0:	6019      	str	r1, [r3, #0]
 8004ad2:	e7d7      	b.n	8004a84 <_free_r+0x24>
 8004ad4:	d902      	bls.n	8004adc <_free_r+0x7c>
 8004ad6:	230c      	movs	r3, #12
 8004ad8:	602b      	str	r3, [r5, #0]
 8004ada:	e7d3      	b.n	8004a84 <_free_r+0x24>
 8004adc:	6820      	ldr	r0, [r4, #0]
 8004ade:	1821      	adds	r1, r4, r0
 8004ae0:	428a      	cmp	r2, r1
 8004ae2:	bf04      	itt	eq
 8004ae4:	6811      	ldreq	r1, [r2, #0]
 8004ae6:	6852      	ldreq	r2, [r2, #4]
 8004ae8:	6062      	str	r2, [r4, #4]
 8004aea:	bf04      	itt	eq
 8004aec:	1809      	addeq	r1, r1, r0
 8004aee:	6021      	streq	r1, [r4, #0]
 8004af0:	605c      	str	r4, [r3, #4]
 8004af2:	e7c7      	b.n	8004a84 <_free_r+0x24>
 8004af4:	bd38      	pop	{r3, r4, r5, pc}
 8004af6:	bf00      	nop
 8004af8:	20000090 	.word	0x20000090

08004afc <_malloc_r>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	1ccd      	adds	r5, r1, #3
 8004b00:	f025 0503 	bic.w	r5, r5, #3
 8004b04:	3508      	adds	r5, #8
 8004b06:	2d0c      	cmp	r5, #12
 8004b08:	bf38      	it	cc
 8004b0a:	250c      	movcc	r5, #12
 8004b0c:	2d00      	cmp	r5, #0
 8004b0e:	4606      	mov	r6, r0
 8004b10:	db01      	blt.n	8004b16 <_malloc_r+0x1a>
 8004b12:	42a9      	cmp	r1, r5
 8004b14:	d903      	bls.n	8004b1e <_malloc_r+0x22>
 8004b16:	230c      	movs	r3, #12
 8004b18:	6033      	str	r3, [r6, #0]
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	bd70      	pop	{r4, r5, r6, pc}
 8004b1e:	f000 f8f5 	bl	8004d0c <__malloc_lock>
 8004b22:	4a23      	ldr	r2, [pc, #140]	; (8004bb0 <_malloc_r+0xb4>)
 8004b24:	6814      	ldr	r4, [r2, #0]
 8004b26:	4621      	mov	r1, r4
 8004b28:	b991      	cbnz	r1, 8004b50 <_malloc_r+0x54>
 8004b2a:	4c22      	ldr	r4, [pc, #136]	; (8004bb4 <_malloc_r+0xb8>)
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	b91b      	cbnz	r3, 8004b38 <_malloc_r+0x3c>
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 f841 	bl	8004bb8 <_sbrk_r>
 8004b36:	6020      	str	r0, [r4, #0]
 8004b38:	4629      	mov	r1, r5
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	f000 f83c 	bl	8004bb8 <_sbrk_r>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	d126      	bne.n	8004b92 <_malloc_r+0x96>
 8004b44:	230c      	movs	r3, #12
 8004b46:	6033      	str	r3, [r6, #0]
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f000 f8e0 	bl	8004d0e <__malloc_unlock>
 8004b4e:	e7e4      	b.n	8004b1a <_malloc_r+0x1e>
 8004b50:	680b      	ldr	r3, [r1, #0]
 8004b52:	1b5b      	subs	r3, r3, r5
 8004b54:	d41a      	bmi.n	8004b8c <_malloc_r+0x90>
 8004b56:	2b0b      	cmp	r3, #11
 8004b58:	d90f      	bls.n	8004b7a <_malloc_r+0x7e>
 8004b5a:	600b      	str	r3, [r1, #0]
 8004b5c:	50cd      	str	r5, [r1, r3]
 8004b5e:	18cc      	adds	r4, r1, r3
 8004b60:	4630      	mov	r0, r6
 8004b62:	f000 f8d4 	bl	8004d0e <__malloc_unlock>
 8004b66:	f104 000b 	add.w	r0, r4, #11
 8004b6a:	1d23      	adds	r3, r4, #4
 8004b6c:	f020 0007 	bic.w	r0, r0, #7
 8004b70:	1ac3      	subs	r3, r0, r3
 8004b72:	d01b      	beq.n	8004bac <_malloc_r+0xb0>
 8004b74:	425a      	negs	r2, r3
 8004b76:	50e2      	str	r2, [r4, r3]
 8004b78:	bd70      	pop	{r4, r5, r6, pc}
 8004b7a:	428c      	cmp	r4, r1
 8004b7c:	bf0d      	iteet	eq
 8004b7e:	6863      	ldreq	r3, [r4, #4]
 8004b80:	684b      	ldrne	r3, [r1, #4]
 8004b82:	6063      	strne	r3, [r4, #4]
 8004b84:	6013      	streq	r3, [r2, #0]
 8004b86:	bf18      	it	ne
 8004b88:	460c      	movne	r4, r1
 8004b8a:	e7e9      	b.n	8004b60 <_malloc_r+0x64>
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	6849      	ldr	r1, [r1, #4]
 8004b90:	e7ca      	b.n	8004b28 <_malloc_r+0x2c>
 8004b92:	1cc4      	adds	r4, r0, #3
 8004b94:	f024 0403 	bic.w	r4, r4, #3
 8004b98:	42a0      	cmp	r0, r4
 8004b9a:	d005      	beq.n	8004ba8 <_malloc_r+0xac>
 8004b9c:	1a21      	subs	r1, r4, r0
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f000 f80a 	bl	8004bb8 <_sbrk_r>
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d0cd      	beq.n	8004b44 <_malloc_r+0x48>
 8004ba8:	6025      	str	r5, [r4, #0]
 8004baa:	e7d9      	b.n	8004b60 <_malloc_r+0x64>
 8004bac:	bd70      	pop	{r4, r5, r6, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000090 	.word	0x20000090
 8004bb4:	20000094 	.word	0x20000094

08004bb8 <_sbrk_r>:
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	4c06      	ldr	r4, [pc, #24]	; (8004bd4 <_sbrk_r+0x1c>)
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	4605      	mov	r5, r0
 8004bc0:	4608      	mov	r0, r1
 8004bc2:	6023      	str	r3, [r4, #0]
 8004bc4:	f7fb fe70 	bl	80008a8 <_sbrk>
 8004bc8:	1c43      	adds	r3, r0, #1
 8004bca:	d102      	bne.n	8004bd2 <_sbrk_r+0x1a>
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	b103      	cbz	r3, 8004bd2 <_sbrk_r+0x1a>
 8004bd0:	602b      	str	r3, [r5, #0]
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
 8004bd4:	2000015c 	.word	0x2000015c

08004bd8 <__sread>:
 8004bd8:	b510      	push	{r4, lr}
 8004bda:	460c      	mov	r4, r1
 8004bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be0:	f000 f896 	bl	8004d10 <_read_r>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	bfab      	itete	ge
 8004be8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bea:	89a3      	ldrhlt	r3, [r4, #12]
 8004bec:	181b      	addge	r3, r3, r0
 8004bee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bf2:	bfac      	ite	ge
 8004bf4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bf6:	81a3      	strhlt	r3, [r4, #12]
 8004bf8:	bd10      	pop	{r4, pc}

08004bfa <__swrite>:
 8004bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfe:	461f      	mov	r7, r3
 8004c00:	898b      	ldrh	r3, [r1, #12]
 8004c02:	05db      	lsls	r3, r3, #23
 8004c04:	4605      	mov	r5, r0
 8004c06:	460c      	mov	r4, r1
 8004c08:	4616      	mov	r6, r2
 8004c0a:	d505      	bpl.n	8004c18 <__swrite+0x1e>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c14:	f000 f868 	bl	8004ce8 <_lseek_r>
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c22:	81a3      	strh	r3, [r4, #12]
 8004c24:	4632      	mov	r2, r6
 8004c26:	463b      	mov	r3, r7
 8004c28:	4628      	mov	r0, r5
 8004c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2e:	f000 b817 	b.w	8004c60 <_write_r>

08004c32 <__sseek>:
 8004c32:	b510      	push	{r4, lr}
 8004c34:	460c      	mov	r4, r1
 8004c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c3a:	f000 f855 	bl	8004ce8 <_lseek_r>
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	bf15      	itete	ne
 8004c44:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c4e:	81a3      	strheq	r3, [r4, #12]
 8004c50:	bf18      	it	ne
 8004c52:	81a3      	strhne	r3, [r4, #12]
 8004c54:	bd10      	pop	{r4, pc}

08004c56 <__sclose>:
 8004c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c5a:	f000 b813 	b.w	8004c84 <_close_r>
	...

08004c60 <_write_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	4c07      	ldr	r4, [pc, #28]	; (8004c80 <_write_r+0x20>)
 8004c64:	4605      	mov	r5, r0
 8004c66:	4608      	mov	r0, r1
 8004c68:	4611      	mov	r1, r2
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	6022      	str	r2, [r4, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f7fb fcf8 	bl	8000664 <_write>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_write_r+0x1e>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_write_r+0x1e>
 8004c7c:	602b      	str	r3, [r5, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	2000015c 	.word	0x2000015c

08004c84 <_close_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4c06      	ldr	r4, [pc, #24]	; (8004ca0 <_close_r+0x1c>)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	6023      	str	r3, [r4, #0]
 8004c90:	f7fb fe36 	bl	8000900 <_close>
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	d102      	bne.n	8004c9e <_close_r+0x1a>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	b103      	cbz	r3, 8004c9e <_close_r+0x1a>
 8004c9c:	602b      	str	r3, [r5, #0]
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ca0:	2000015c 	.word	0x2000015c

08004ca4 <_fstat_r>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	4c07      	ldr	r4, [pc, #28]	; (8004cc4 <_fstat_r+0x20>)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	4605      	mov	r5, r0
 8004cac:	4608      	mov	r0, r1
 8004cae:	4611      	mov	r1, r2
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	f7fb fe31 	bl	8000918 <_fstat>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	d102      	bne.n	8004cc0 <_fstat_r+0x1c>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	b103      	cbz	r3, 8004cc0 <_fstat_r+0x1c>
 8004cbe:	602b      	str	r3, [r5, #0]
 8004cc0:	bd38      	pop	{r3, r4, r5, pc}
 8004cc2:	bf00      	nop
 8004cc4:	2000015c 	.word	0x2000015c

08004cc8 <_isatty_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4c06      	ldr	r4, [pc, #24]	; (8004ce4 <_isatty_r+0x1c>)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4605      	mov	r5, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	6023      	str	r3, [r4, #0]
 8004cd4:	f7fb fe30 	bl	8000938 <_isatty>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_isatty_r+0x1a>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_isatty_r+0x1a>
 8004ce0:	602b      	str	r3, [r5, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	2000015c 	.word	0x2000015c

08004ce8 <_lseek_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4c07      	ldr	r4, [pc, #28]	; (8004d08 <_lseek_r+0x20>)
 8004cec:	4605      	mov	r5, r0
 8004cee:	4608      	mov	r0, r1
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	6022      	str	r2, [r4, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f7fb fe29 	bl	800094e <_lseek>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_lseek_r+0x1e>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_lseek_r+0x1e>
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	2000015c 	.word	0x2000015c

08004d0c <__malloc_lock>:
 8004d0c:	4770      	bx	lr

08004d0e <__malloc_unlock>:
 8004d0e:	4770      	bx	lr

08004d10 <_read_r>:
 8004d10:	b538      	push	{r3, r4, r5, lr}
 8004d12:	4c07      	ldr	r4, [pc, #28]	; (8004d30 <_read_r+0x20>)
 8004d14:	4605      	mov	r5, r0
 8004d16:	4608      	mov	r0, r1
 8004d18:	4611      	mov	r1, r2
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	6022      	str	r2, [r4, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f7fb fda4 	bl	800086c <_read>
 8004d24:	1c43      	adds	r3, r0, #1
 8004d26:	d102      	bne.n	8004d2e <_read_r+0x1e>
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	b103      	cbz	r3, 8004d2e <_read_r+0x1e>
 8004d2c:	602b      	str	r3, [r5, #0]
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
 8004d30:	2000015c 	.word	0x2000015c

08004d34 <_init>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	bf00      	nop
 8004d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3a:	bc08      	pop	{r3}
 8004d3c:	469e      	mov	lr, r3
 8004d3e:	4770      	bx	lr

08004d40 <_fini>:
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	bf00      	nop
 8004d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d46:	bc08      	pop	{r3}
 8004d48:	469e      	mov	lr, r3
 8004d4a:	4770      	bx	lr
