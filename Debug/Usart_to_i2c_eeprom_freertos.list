
Usart_to_i2c_eeprom_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  0800813c  0800813c  0001813c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008330  08008330  00018330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008338  08008338  00018338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800833c  0800833c  0001833c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  08008340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  8 .bss          00004b38  20000078  20000078  00020078  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004bb0  20004bb0  00020078  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   00017b18  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003059  00000000  00000000  00037bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000011d8  00000000  00000000  0003ac20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001088  00000000  00000000  0003bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009e19  00000000  00000000  0003ce80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000643b  00000000  00000000  00046c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004d0d4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000505c  00000000  00000000  0004d150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008124 	.word	0x08008124

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008124 	.word	0x08008124

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of myMtxUart3Tx */
  myMtxUart3TxHandle = osMutexNew(&myMtxUart3Tx_attributes);
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <MX_FREERTOS_Init+0x30>)
 8000586:	f004 f945 	bl	8004814 <osMutexNew>
 800058a:	4602      	mov	r2, r0
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_FREERTOS_Init+0x34>)
 800058e:	601a      	str	r2, [r3, #0]

  /* creation of myMtxUart3Rx */
  myMtxUart3RxHandle = osMutexNew(&myMtxUart3Rx_attributes);
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <MX_FREERTOS_Init+0x38>)
 8000592:	f004 f93f 	bl	8004814 <osMutexNew>
 8000596:	4602      	mov	r2, r0
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <MX_FREERTOS_Init+0x3c>)
 800059a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <MX_FREERTOS_Init+0x40>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4808      	ldr	r0, [pc, #32]	; (80005c4 <MX_FREERTOS_Init+0x44>)
 80005a2:	f004 f863 	bl	800466c <osThreadNew>
 80005a6:	4602      	mov	r2, r0
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <MX_FREERTOS_Init+0x48>)
 80005aa:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	08008248 	.word	0x08008248
 80005b4:	20004aac 	.word	0x20004aac
 80005b8:	08008258 	.word	0x08008258
 80005bc:	20004ab0 	.word	0x20004ab0
 80005c0:	08008224 	.word	0x08008224
 80005c4:	080005cd 	.word	0x080005cd
 80005c8:	20004aa8 	.word	0x20004aa8

080005cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f004 f8ef 	bl	80047b8 <osDelay>
 80005da:	e7fb      	b.n	80005d4 <StartDefaultTask+0x8>

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_GPIO_Init+0x68>)
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <MX_GPIO_Init+0x68>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_GPIO_Init+0x68>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4a10      	ldr	r2, [pc, #64]	; (8000644 <MX_GPIO_Init+0x68>)
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_GPIO_Init+0x68>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_GPIO_Init+0x68>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4a09      	ldr	r2, [pc, #36]	; (8000644 <MX_GPIO_Init+0x68>)
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_GPIO_Init+0x68>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_GPIO_Init+0x68>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800

08000648 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_I2C2_Init+0x50>)
 800064e:	4a13      	ldr	r2, [pc, #76]	; (800069c <MX_I2C2_Init+0x54>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_I2C2_Init+0x50>)
 8000654:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_I2C2_Init+0x58>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_I2C2_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_I2C2_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_I2C2_Init+0x50>)
 8000666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800066a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_I2C2_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_I2C2_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_I2C2_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_I2C2_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_I2C2_Init+0x50>)
 8000686:	f000 fe85 	bl	8001394 <HAL_I2C_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000690:	f000 f9b0 	bl	80009f4 <Error_Handler>
  }

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20004ab4 	.word	0x20004ab4
 800069c:	40005800 	.word	0x40005800
 80006a0:	000186a0 	.word	0x000186a0

080006a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <HAL_I2C_MspInit+0xa4>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d13c      	bne.n	8000740 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	4a20      	ldr	r2, [pc, #128]	; (800074c <HAL_I2C_MspInit+0xa8>)
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <HAL_I2C_MspInit+0xa8>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <HAL_I2C_MspInit+0xa8>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    PB12     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80006e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80006e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e8:	2312      	movs	r3, #18
 80006ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006f4:	2304      	movs	r3, #4
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	4814      	ldr	r0, [pc, #80]	; (8000750 <HAL_I2C_MspInit+0xac>)
 8000700:	f000 fcae 	bl	8001060 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	4a10      	ldr	r2, [pc, #64]	; (800074c <HAL_I2C_MspInit+0xa8>)
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <HAL_I2C_MspInit+0xa8>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000712:	6413      	str	r3, [r2, #64]	; 0x40
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <HAL_I2C_MspInit+0xa8>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	2021      	movs	r0, #33	; 0x21
 8000726:	f000 fc34 	bl	8000f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800072a:	2021      	movs	r0, #33	; 0x21
 800072c:	f000 fc4d 	bl	8000fca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2022      	movs	r0, #34	; 0x22
 8000736:	f000 fc2c 	bl	8000f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800073a:	2022      	movs	r0, #34	; 0x22
 800073c:	f000 fc45 	bl	8000fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	; 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40005800 	.word	0x40005800
 800074c:	40023800 	.word	0x40023800
 8000750:	40020400 	.word	0x40020400

08000754 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, uint8_t *p, int len) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	b29a      	uxth	r2, r3
 8000764:	230a      	movs	r3, #10
 8000766:	68b9      	ldr	r1, [r7, #8]
 8000768:	4803      	ldr	r0, [pc, #12]	; (8000778 <_write+0x24>)
 800076a:	f003 f864 	bl	8003836 <HAL_UART_Transmit>
	return len;
 800076e:	687b      	ldr	r3, [r7, #4]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20004b28 	.word	0x20004b28

0800077c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  if (huart->Instance == huart3.Instance)  {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <HAL_UART_RxCpltCallback+0x94>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	429a      	cmp	r2, r3
 800078e:	d13b      	bne.n	8000808 <HAL_UART_RxCpltCallback+0x8c>
	  if (rcvStart <= rcvEnd)
 8000790:	4b20      	ldr	r3, [pc, #128]	; (8000814 <HAL_UART_RxCpltCallback+0x98>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	429a      	cmp	r2, r3
 800079a:	dc08      	bgt.n	80007ae <HAL_UART_RxCpltCallback+0x32>
		  rcvCnt = rcvEnd - rcvStart + 1;
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <HAL_UART_RxCpltCallback+0x98>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	1ad3      	subs	r3, r2, r3
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a1c      	ldr	r2, [pc, #112]	; (800081c <HAL_UART_RxCpltCallback+0xa0>)
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	e008      	b.n	80007c0 <HAL_UART_RxCpltCallback+0x44>
	  else
		  rcvCnt = BUFSIZ - (rcvStart - rcvEnd) + 1;
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <HAL_UART_RxCpltCallback+0x98>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	f1c3 0381 	rsb	r3, r3, #129	; 0x81
 80007bc:	4a17      	ldr	r2, [pc, #92]	; (800081c <HAL_UART_RxCpltCallback+0xa0>)
 80007be:	6013      	str	r3, [r2, #0]

	  if (rcvCnt < BUFSIZ) {
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <HAL_UART_RxCpltCallback+0xa0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b7f      	cmp	r3, #127	; 0x7f
 80007c6:	dc16      	bgt.n	80007f6 <HAL_UART_RxCpltCallback+0x7a>
		  if (rcvEnd < BUFSIZ - 1)
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b7e      	cmp	r3, #126	; 0x7e
 80007ce:	dc05      	bgt.n	80007dc <HAL_UART_RxCpltCallback+0x60>
			  rcvEnd++;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	4a10      	ldr	r2, [pc, #64]	; (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 80007d8:	6013      	str	r3, [r2, #0]
 80007da:	e002      	b.n	80007e2 <HAL_UART_RxCpltCallback+0x66>
		  else
			  rcvEnd = 0;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart3, &rcvBuf[rcvEnd], 1);
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_UART_RxCpltCallback+0xa4>)
 80007e8:	4413      	add	r3, r2
 80007ea:	2201      	movs	r2, #1
 80007ec:	4619      	mov	r1, r3
 80007ee:	4808      	ldr	r0, [pc, #32]	; (8000810 <HAL_UART_RxCpltCallback+0x94>)
 80007f0:	f003 f8b9 	bl	8003966 <HAL_UART_Receive_IT>
	  }
	  else {
		  HAL_UART_Receive_IT(&huart3, &rcvBuf[rcvEnd], 1);
	  }
  }
}
 80007f4:	e008      	b.n	8000808 <HAL_UART_RxCpltCallback+0x8c>
		  HAL_UART_Receive_IT(&huart3, &rcvBuf[rcvEnd], 1);
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <HAL_UART_RxCpltCallback+0x9c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a09      	ldr	r2, [pc, #36]	; (8000820 <HAL_UART_RxCpltCallback+0xa4>)
 80007fc:	4413      	add	r3, r2
 80007fe:	2201      	movs	r2, #1
 8000800:	4619      	mov	r1, r3
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <HAL_UART_RxCpltCallback+0x94>)
 8000804:	f003 f8af 	bl	8003966 <HAL_UART_Receive_IT>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20004b28 	.word	0x20004b28
 8000814:	20004b1c 	.word	0x20004b1c
 8000818:	20004b18 	.word	0x20004b18
 800081c:	20004b20 	.word	0x20004b20
 8000820:	20000094 	.word	0x20000094

08000824 <vTaskUart3RxCmdHandler>:
{
	HAL_UART_Transmit(huart, data,  len, 20);
}

void vTaskUart3RxCmdHandler(void *pvParam)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af02      	add	r7, sp, #8
 800082a:	6078      	str	r0, [r7, #4]
	const char *pchTaskParam = (char*)pvParam;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	60fb      	str	r3, [r7, #12]

	dbug(1, "Task Name: %s\n", pchTaskParam );
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <vTaskUart3RxCmdHandler+0x44>)
 8000836:	2290      	movs	r2, #144	; 0x90
 8000838:	490c      	ldr	r1, [pc, #48]	; (800086c <vTaskUart3RxCmdHandler+0x48>)
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <vTaskUart3RxCmdHandler+0x4c>)
 800083c:	f006 fd7a 	bl	8007334 <iprintf>

	HAL_UART_Receive_IT(&huart3, &rcvBuf[--rcvCnt], 1);
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <vTaskUart3RxCmdHandler+0x50>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	3b01      	subs	r3, #1
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <vTaskUart3RxCmdHandler+0x50>)
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <vTaskUart3RxCmdHandler+0x50>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <vTaskUart3RxCmdHandler+0x54>)
 8000850:	4413      	add	r3, r2
 8000852:	2201      	movs	r2, #1
 8000854:	4619      	mov	r1, r3
 8000856:	4809      	ldr	r0, [pc, #36]	; (800087c <vTaskUart3RxCmdHandler+0x58>)
 8000858:	f003 f885 	bl	8003966 <HAL_UART_Receive_IT>
	{
	    /* USER CODE END WHILE */


		//HAL_Delay(1000);
		vTaskDelay(500);
 800085c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000860:	f005 fc72 	bl	8006148 <vTaskDelay>
 8000864:	e7fa      	b.n	800085c <vTaskUart3RxCmdHandler+0x38>
 8000866:	bf00      	nop
 8000868:	08008268 	.word	0x08008268
 800086c:	08008190 	.word	0x08008190
 8000870:	080081a4 	.word	0x080081a4
 8000874:	20004b20 	.word	0x20004b20
 8000878:	20000094 	.word	0x20000094
 800087c:	20004b28 	.word	0x20004b28

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f000 fa39 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f855 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f7ff fea5 	bl	80005dc <MX_GPIO_Init>
  MX_I2C2_Init();
 8000892:	f7ff fed9 	bl	8000648 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000896:	f000 f9b7 	bl	8000c08 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  sndStart = sndEnd = toSndCnt = -1;
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <main+0x88>)
 800089c:	f04f 32ff 	mov.w	r2, #4294967295
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <main+0x88>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a19      	ldr	r2, [pc, #100]	; (800090c <main+0x8c>)
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <main+0x8c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <main+0x90>)
 80008b0:	6013      	str	r3, [r2, #0]
  rcvStart = rcvEnd = rcvCnt = -1;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <main+0x94>)
 80008b4:	f04f 32ff 	mov.w	r2, #4294967295
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <main+0x94>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a16      	ldr	r2, [pc, #88]	; (8000918 <main+0x98>)
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <main+0x98>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a15      	ldr	r2, [pc, #84]	; (800091c <main+0x9c>)
 80008c8:	6013      	str	r3, [r2, #0]
  memset(sndBuf,  0, BUFSIZ);
 80008ca:	2280      	movs	r2, #128	; 0x80
 80008cc:	2100      	movs	r1, #0
 80008ce:	4814      	ldr	r0, [pc, #80]	; (8000920 <main+0xa0>)
 80008d0:	f006 fd27 	bl	8007322 <memset>
  memset(rcvBuf,  0, BUFSIZ);
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	2100      	movs	r1, #0
 80008d8:	4812      	ldr	r0, [pc, #72]	; (8000924 <main+0xa4>)
 80008da:	f006 fd22 	bl	8007322 <memset>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80008de:	f003 fe5b 	bl	8004598 <osKernelInitialize>
  MX_FREERTOS_Init();
 80008e2:	f7ff fe4d 	bl	8000580 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80008e6:	f003 fe8b 	bl	8004600 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */

  /* USER CODE BEGIN WHILE */

  xTaskCreate(vTaskUart3RxCmdHandler, "vTaskUart3RxCmdHandler", 200, (void*)taskRxName, 1, &hTaskUsart3Rx);
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <main+0xa8>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <main+0xac>)
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	2301      	movs	r3, #1
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	4613      	mov	r3, r2
 80008f8:	22c8      	movs	r2, #200	; 0xc8
 80008fa:	490d      	ldr	r1, [pc, #52]	; (8000930 <main+0xb0>)
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <main+0xb4>)
 80008fe:	f005 fadf 	bl	8005ec0 <xTaskCreate>
  //xTaskCreate(vTaskUart3Tx, "vTaskUart3Tx", 200, (void*)taskTxName, 1, &hTaskUsart3Tx);
  vTaskStartScheduler();
 8000902:	f005 fc55 	bl	80061b0 <vTaskStartScheduler>

  while (1)
 8000906:	e7fe      	b.n	8000906 <main+0x86>
 8000908:	20004b14 	.word	0x20004b14
 800090c:	20004b24 	.word	0x20004b24
 8000910:	20004b08 	.word	0x20004b08
 8000914:	20004b20 	.word	0x20004b20
 8000918:	20004b18 	.word	0x20004b18
 800091c:	20004b1c 	.word	0x20004b1c
 8000920:	20000114 	.word	0x20000114
 8000924:	20000094 	.word	0x20000094
 8000928:	20000000 	.word	0x20000000
 800092c:	20004b10 	.word	0x20004b10
 8000930:	080081f4 	.word	0x080081f4
 8000934:	08000825 	.word	0x08000825

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	; 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2230      	movs	r2, #48	; 0x30
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f006 fceb 	bl	8007322 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	4a22      	ldr	r2, [pc, #136]	; (80009ec <SystemClock_Config+0xb4>)
 8000962:	4b22      	ldr	r3, [pc, #136]	; (80009ec <SystemClock_Config+0xb4>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <SystemClock_Config+0xb4>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <SystemClock_Config+0xb8>)
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <SystemClock_Config+0xb8>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <SystemClock_Config+0xb8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	2301      	movs	r3, #1
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099c:	2310      	movs	r3, #16
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fab7 	bl	8002f1c <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80009b4:	f000 f81e 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b8:	230f      	movs	r3, #15
 80009ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 fd12 	bl	80033fc <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009de:	f000 f809 	bl	80009f4 <Error_Handler>
  }
}
 80009e2:	bf00      	nop
 80009e4:	3750      	adds	r7, #80	; 0x50
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40007000 	.word	0x40007000

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 f988 	bl	8000da0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a90:	f005 ffc4 	bl	8006a1c <xTaskGetSchedulerState>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d001      	beq.n	8000a9e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a9a:	f004 f9f5 	bl	8004e88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <I2C2_EV_IRQHandler+0x10>)
 8000aaa:	f000 fdab 	bl	8001604 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20004ab4 	.word	0x20004ab4

08000ab8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <I2C2_ER_IRQHandler+0x10>)
 8000abe:	f000 fef0 	bl	80018a2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20004ab4 	.word	0x20004ab4

08000acc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <USART3_IRQHandler+0x10>)
 8000ad2:	f002 ff9d 	bl	8003a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20004b28 	.word	0x20004b28

08000ae0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b087      	sub	sp, #28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e00a      	b.n	8000b08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000af2:	68bc      	ldr	r4, [r7, #8]
 8000af4:	1c63      	adds	r3, r4, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	f3af 8000 	nop.w
 8000afc:	4603      	mov	r3, r0
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3301      	adds	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbf0      	blt.n	8000af2 <_read+0x12>
	}

return len;
 8000b10:	687b      	ldr	r3, [r7, #4]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	371c      	adds	r7, #28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd90      	pop	{r4, r7, pc}
	...

08000b1c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_sbrk+0x50>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x16>
		heap_end = &end;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <_sbrk+0x50>)
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <_sbrk+0x54>)
 8000b30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <_sbrk+0x50>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <_sbrk+0x50>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4413      	add	r3, r2
 8000b40:	466a      	mov	r2, sp
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d907      	bls.n	8000b56 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000b46:	f006 fbb7 	bl	80072b8 <__errno>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	230c      	movs	r3, #12
 8000b4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	e006      	b.n	8000b64 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <_sbrk+0x50>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <_sbrk+0x50>)
 8000b60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000194 	.word	0x20000194
 8000b70:	20004bb0 	.word	0x20004bb0

08000b74 <_close>:

int _close(int file)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	return -1;
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9c:	605a      	str	r2, [r3, #4]
	return 0;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_isatty>:

int _isatty(int file)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	return 1;
 8000bb4:	2301      	movs	r3, #1
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b085      	sub	sp, #20
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
	return 0;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <SystemInit+0x28>)
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <SystemInit+0x28>)
 8000be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SystemInit+0x28>)
 8000bf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bf6:	609a      	str	r2, [r3, #8]
#endif
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <MX_USART3_UART_Init+0x50>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c40:	f002 fdac 	bl	800379c <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c4a:	f7ff fed3 	bl	80009f4 <Error_Handler>
  }

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20004b28 	.word	0x20004b28
 8000c58:	40004800 	.word	0x40004800

08000c5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <HAL_UART_MspInit+0x94>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d134      	bne.n	8000ce8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <HAL_UART_MspInit+0x98>)
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_UART_MspInit+0x98>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <HAL_UART_MspInit+0x98>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4a15      	ldr	r2, [pc, #84]	; (8000cf4 <HAL_UART_MspInit+0x98>)
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_UART_MspInit+0x98>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_UART_MspInit+0x98>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cc8:	2307      	movs	r3, #7
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <HAL_UART_MspInit+0x9c>)
 8000cd4:	f000 f9c4 	bl	8001060 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2027      	movs	r0, #39	; 0x27
 8000cde:	f000 f958 	bl	8000f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ce2:	2027      	movs	r0, #39	; 0x27
 8000ce4:	f000 f971 	bl	8000fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40004800 	.word	0x40004800
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020800 	.word	0x40020800

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f929 	bl	8000f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fe68 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f941 	bl	8000fe6 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f909 	bl	8000f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000004 	.word	0x20000004
 8000d98:	2000000c 	.word	0x2000000c
 8000d9c:	20000008 	.word	0x20000008

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	2000000c 	.word	0x2000000c
 8000dc4:	20004b68 	.word	0x20004b68

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20004b68 	.word	0x20004b68

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	4909      	ldr	r1, [pc, #36]	; (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	095b      	lsrs	r3, r3, #5
 8000e5e:	79fa      	ldrb	r2, [r7, #7]
 8000e60:	f002 021f 	and.w	r2, r2, #31
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	490d      	ldr	r1, [pc, #52]	; (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	4909      	ldr	r1, [pc, #36]	; (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	1e5a      	subs	r2, r3, #1
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	401a      	ands	r2, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	1e59      	subs	r1, r3, #1
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f48:	d301      	bcc.n	8000f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00f      	b.n	8000f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <SysTick_Config+0x40>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f56:	210f      	movs	r1, #15
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f7ff ff90 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <SysTick_Config+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Config+0x40>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff2b 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff40 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff90 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5f 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff33 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ffa2 	bl	8000f38 <SysTick_Config>
 8000ff4:	4603      	mov	r3, r0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d004      	beq.n	800101c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e00c      	b.n	8001036 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2205      	movs	r2, #5
 8001020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	f022 0201 	bic.w	r2, r2, #1
 8001032:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001050:	b2db      	uxtb	r3, r3
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e16b      	b.n	8001354 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 815a 	bne.w	800134e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d00b      	beq.n	80010ba <HAL_GPIO_Init+0x5a>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ae:	2b11      	cmp	r3, #17
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b12      	cmp	r3, #18
 80010b8:	d130      	bne.n	800111c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 0201 	and.w	r2, r3, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0xfc>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b12      	cmp	r3, #18
 800115a:	d123      	bne.n	80011a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0203 	and.w	r2, r3, #3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80b4 	beq.w	800134e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4a5f      	ldr	r2, [pc, #380]	; (8001368 <HAL_GPIO_Init+0x308>)
 80011ec:	4b5e      	ldr	r3, [pc, #376]	; (8001368 <HAL_GPIO_Init+0x308>)
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b5c      	ldr	r3, [pc, #368]	; (8001368 <HAL_GPIO_Init+0x308>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001202:	4a5a      	ldr	r2, [pc, #360]	; (800136c <HAL_GPIO_Init+0x30c>)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a51      	ldr	r2, [pc, #324]	; (8001370 <HAL_GPIO_Init+0x310>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d02b      	beq.n	8001286 <HAL_GPIO_Init+0x226>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a50      	ldr	r2, [pc, #320]	; (8001374 <HAL_GPIO_Init+0x314>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d025      	beq.n	8001282 <HAL_GPIO_Init+0x222>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4f      	ldr	r2, [pc, #316]	; (8001378 <HAL_GPIO_Init+0x318>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d01f      	beq.n	800127e <HAL_GPIO_Init+0x21e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4e      	ldr	r2, [pc, #312]	; (800137c <HAL_GPIO_Init+0x31c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d019      	beq.n	800127a <HAL_GPIO_Init+0x21a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4d      	ldr	r2, [pc, #308]	; (8001380 <HAL_GPIO_Init+0x320>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d013      	beq.n	8001276 <HAL_GPIO_Init+0x216>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <HAL_GPIO_Init+0x324>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00d      	beq.n	8001272 <HAL_GPIO_Init+0x212>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4b      	ldr	r2, [pc, #300]	; (8001388 <HAL_GPIO_Init+0x328>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x20e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4a      	ldr	r2, [pc, #296]	; (800138c <HAL_GPIO_Init+0x32c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_GPIO_Init+0x20a>
 8001266:	2307      	movs	r3, #7
 8001268:	e00e      	b.n	8001288 <HAL_GPIO_Init+0x228>
 800126a:	2308      	movs	r3, #8
 800126c:	e00c      	b.n	8001288 <HAL_GPIO_Init+0x228>
 800126e:	2306      	movs	r3, #6
 8001270:	e00a      	b.n	8001288 <HAL_GPIO_Init+0x228>
 8001272:	2305      	movs	r3, #5
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x228>
 8001276:	2304      	movs	r3, #4
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x228>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x228>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x228>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x228>
 8001286:	2300      	movs	r3, #0
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001298:	4934      	ldr	r1, [pc, #208]	; (800136c <HAL_GPIO_Init+0x30c>)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a6:	4b3a      	ldr	r3, [pc, #232]	; (8001390 <HAL_GPIO_Init+0x330>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ca:	4a31      	ldr	r2, [pc, #196]	; (8001390 <HAL_GPIO_Init+0x330>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012d0:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <HAL_GPIO_Init+0x330>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f4:	4a26      	ldr	r2, [pc, #152]	; (8001390 <HAL_GPIO_Init+0x330>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <HAL_GPIO_Init+0x330>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131e:	4a1c      	ldr	r2, [pc, #112]	; (8001390 <HAL_GPIO_Init+0x330>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <HAL_GPIO_Init+0x330>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001348:	4a11      	ldr	r2, [pc, #68]	; (8001390 <HAL_GPIO_Init+0x330>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	f67f ae90 	bls.w	800107c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800135c:	bf00      	nop
 800135e:	3724      	adds	r7, #36	; 0x24
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40023800 	.word	0x40023800
 800136c:	40013800 	.word	0x40013800
 8001370:	40020000 	.word	0x40020000
 8001374:	40020400 	.word	0x40020400
 8001378:	40020800 	.word	0x40020800
 800137c:	40020c00 	.word	0x40020c00
 8001380:	40021000 	.word	0x40021000
 8001384:	40021400 	.word	0x40021400
 8001388:	40021800 	.word	0x40021800
 800138c:	40021c00 	.word	0x40021c00
 8001390:	40013c00 	.word	0x40013c00

08001394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e11f      	b.n	80015e6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff f972 	bl	80006a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2224      	movs	r2, #36	; 0x24
 80013c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	f022 0201 	bic.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013f8:	f002 f9a8 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 80013fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	4a7b      	ldr	r2, [pc, #492]	; (80015f0 <HAL_I2C_Init+0x25c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d807      	bhi.n	8001418 <HAL_I2C_Init+0x84>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4a7a      	ldr	r2, [pc, #488]	; (80015f4 <HAL_I2C_Init+0x260>)
 800140c:	4293      	cmp	r3, r2
 800140e:	bf94      	ite	ls
 8001410:	2301      	movls	r3, #1
 8001412:	2300      	movhi	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	e006      	b.n	8001426 <HAL_I2C_Init+0x92>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4a77      	ldr	r2, [pc, #476]	; (80015f8 <HAL_I2C_Init+0x264>)
 800141c:	4293      	cmp	r3, r2
 800141e:	bf94      	ite	ls
 8001420:	2301      	movls	r3, #1
 8001422:	2300      	movhi	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e0db      	b.n	80015e6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4a72      	ldr	r2, [pc, #456]	; (80015fc <HAL_I2C_Init+0x268>)
 8001432:	fba2 2303 	umull	r2, r3, r2, r3
 8001436:	0c9b      	lsrs	r3, r3, #18
 8001438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	6852      	ldr	r2, [r2, #4]
 8001444:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	430a      	orrs	r2, r1
 800144c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4863      	ldr	r0, [pc, #396]	; (80015f0 <HAL_I2C_Init+0x25c>)
 8001462:	4283      	cmp	r3, r0
 8001464:	d802      	bhi.n	800146c <HAL_I2C_Init+0xd8>
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	3301      	adds	r3, #1
 800146a:	e009      	b.n	8001480 <HAL_I2C_Init+0xec>
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001472:	fb00 f303 	mul.w	r3, r0, r3
 8001476:	4862      	ldr	r0, [pc, #392]	; (8001600 <HAL_I2C_Init+0x26c>)
 8001478:	fba0 0303 	umull	r0, r3, r0, r3
 800147c:	099b      	lsrs	r3, r3, #6
 800147e:	3301      	adds	r3, #1
 8001480:	430b      	orrs	r3, r1
 8001482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001492:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4955      	ldr	r1, [pc, #340]	; (80015f0 <HAL_I2C_Init+0x25c>)
 800149c:	428b      	cmp	r3, r1
 800149e:	d80d      	bhi.n	80014bc <HAL_I2C_Init+0x128>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1e59      	subs	r1, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	bf38      	it	cc
 80014b8:	2304      	movcc	r3, #4
 80014ba:	e04f      	b.n	800155c <HAL_I2C_Init+0x1c8>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d111      	bne.n	80014e8 <HAL_I2C_Init+0x154>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1e5c      	subs	r4, r3, #1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6859      	ldr	r1, [r3, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	440b      	add	r3, r1
 80014d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	e012      	b.n	800150e <HAL_I2C_Init+0x17a>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1e5c      	subs	r4, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	0099      	lsls	r1, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	fbb4 f3f3 	udiv	r3, r4, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001504:	2b00      	cmp	r3, #0
 8001506:	bf0c      	ite	eq
 8001508:	2301      	moveq	r3, #1
 800150a:	2300      	movne	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_I2C_Init+0x182>
 8001512:	2301      	movs	r3, #1
 8001514:	e022      	b.n	800155c <HAL_I2C_Init+0x1c8>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10e      	bne.n	800153c <HAL_I2C_Init+0x1a8>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1e5c      	subs	r4, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6859      	ldr	r1, [r3, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	440b      	add	r3, r1
 800152c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001530:	3301      	adds	r3, #1
 8001532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153a:	e00f      	b.n	800155c <HAL_I2C_Init+0x1c8>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	1e5c      	subs	r4, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	0099      	lsls	r1, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001552:	3301      	adds	r3, #1
 8001554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800155c:	4313      	orrs	r3, r2
 800155e:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	69d0      	ldr	r0, [r2, #28]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6a12      	ldr	r2, [r2, #32]
 8001576:	4302      	orrs	r2, r0
 8001578:	430a      	orrs	r2, r1
 800157a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800158a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	6908      	ldr	r0, [r1, #16]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	68c9      	ldr	r1, [r1, #12]
 8001596:	4301      	orrs	r1, r0
 8001598:	430b      	orrs	r3, r1
 800159a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	68d2      	ldr	r2, [r2, #12]
 80015a6:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6950      	ldr	r0, [r2, #20]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6992      	ldr	r2, [r2, #24]
 80015b2:	4302      	orrs	r2, r0
 80015b4:	430a      	orrs	r2, r1
 80015b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2220      	movs	r2, #32
 80015d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd90      	pop	{r4, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	000186a0 	.word	0x000186a0
 80015f4:	001e847f 	.word	0x001e847f
 80015f8:	003d08ff 	.word	0x003d08ff
 80015fc:	431bde83 	.word	0x431bde83
 8001600:	10624dd3 	.word	0x10624dd3

08001604 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001624:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800162c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	2b10      	cmp	r3, #16
 8001632:	d003      	beq.n	800163c <HAL_I2C_EV_IRQHandler+0x38>
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b40      	cmp	r3, #64	; 0x40
 8001638:	f040 80ad 	bne.w	8001796 <HAL_I2C_EV_IRQHandler+0x192>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10d      	bne.n	8001672 <HAL_I2C_EV_IRQHandler+0x6e>
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800165c:	d003      	beq.n	8001666 <HAL_I2C_EV_IRQHandler+0x62>
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001664:	d101      	bne.n	800166a <HAL_I2C_EV_IRQHandler+0x66>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <HAL_I2C_EV_IRQHandler+0x68>
 800166a:	2300      	movs	r3, #0
 800166c:	2b01      	cmp	r3, #1
 800166e:	f000 8110 	beq.w	8001892 <HAL_I2C_EV_IRQHandler+0x28e>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00b      	beq.n	8001694 <HAL_I2C_EV_IRQHandler+0x90>
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f001 fc2c 	bl	8002ee4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fd3d 	bl	800210c <I2C_Master_SB>
 8001692:	e07f      	b.n	8001794 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <HAL_I2C_EV_IRQHandler+0xac>
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 fdb3 	bl	8002214 <I2C_Master_ADD10>
 80016ae:	e071      	b.n	8001794 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d008      	beq.n	80016cc <HAL_I2C_EV_IRQHandler+0xc8>
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 fdcf 	bl	8002268 <I2C_Master_ADDR>
 80016ca:	e063      	b.n	8001794 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d032      	beq.n	800173c <HAL_I2C_EV_IRQHandler+0x138>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016e4:	f000 80d7 	beq.w	8001896 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00d      	beq.n	800170e <HAL_I2C_EV_IRQHandler+0x10a>
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_I2C_EV_IRQHandler+0x10a>
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	d103      	bne.n	800170e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f9d2 	bl	8001ab0 <I2C_MasterTransmit_TXE>
 800170c:	e042      	b.n	8001794 <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 80be 	beq.w	8001896 <HAL_I2C_EV_IRQHandler+0x292>
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80b8 	beq.w	8001896 <HAL_I2C_EV_IRQHandler+0x292>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b10      	cmp	r3, #16
 800172a:	d103      	bne.n	8001734 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 fa5b 	bl	8001be8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001732:	e0b0      	b.n	8001896 <HAL_I2C_EV_IRQHandler+0x292>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fabf 	bl	8001cb8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800173a:	e0ac      	b.n	8001896 <HAL_I2C_EV_IRQHandler+0x292>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800174a:	f000 80a4 	beq.w	8001896 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00d      	beq.n	8001774 <HAL_I2C_EV_IRQHandler+0x170>
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175e:	2b00      	cmp	r3, #0
 8001760:	d008      	beq.n	8001774 <HAL_I2C_EV_IRQHandler+0x170>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d103      	bne.n	8001774 <HAL_I2C_EV_IRQHandler+0x170>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 fb32 	bl	8001dd6 <I2C_MasterReceive_RXNE>
 8001772:	e00f      	b.n	8001794 <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 808b 	beq.w	8001896 <HAL_I2C_EV_IRQHandler+0x292>
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8085 	beq.w	8001896 <HAL_I2C_EV_IRQHandler+0x292>
        {
          I2C_MasterReceive_BTF(hi2c);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 fbd3 	bl	8001f38 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001792:	e080      	b.n	8001896 <HAL_I2C_EV_IRQHandler+0x292>
 8001794:	e07f      	b.n	8001896 <HAL_I2C_EV_IRQHandler+0x292>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2b00      	cmp	r3, #0
 800179c:	d004      	beq.n	80017a8 <HAL_I2C_EV_IRQHandler+0x1a4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	61fb      	str	r3, [r7, #28]
 80017a6:	e007      	b.n	80017b8 <HAL_I2C_EV_IRQHandler+0x1b4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d011      	beq.n	80017e6 <HAL_I2C_EV_IRQHandler+0x1e2>
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00c      	beq.n	80017e6 <HAL_I2C_EV_IRQHandler+0x1e2>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_I2C_EV_IRQHandler+0x1d8>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80017dc:	69b9      	ldr	r1, [r7, #24]
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 ff91 	bl	8002706 <I2C_Slave_ADDR>
 80017e4:	e05a      	b.n	800189c <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_I2C_EV_IRQHandler+0x1fe>
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_I2C_EV_IRQHandler+0x1fe>
    {
      I2C_Slave_STOPF(hi2c);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 ffc6 	bl	800278c <I2C_Slave_STOPF>
 8001800:	e04c      	b.n	800189c <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001802:	7bbb      	ldrb	r3, [r7, #14]
 8001804:	2b21      	cmp	r3, #33	; 0x21
 8001806:	d002      	beq.n	800180e <HAL_I2C_EV_IRQHandler+0x20a>
 8001808:	7bbb      	ldrb	r3, [r7, #14]
 800180a:	2b29      	cmp	r3, #41	; 0x29
 800180c:	d120      	bne.n	8001850 <HAL_I2C_EV_IRQHandler+0x24c>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00d      	beq.n	8001834 <HAL_I2C_EV_IRQHandler+0x230>
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181e:	2b00      	cmp	r3, #0
 8001820:	d008      	beq.n	8001834 <HAL_I2C_EV_IRQHandler+0x230>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d103      	bne.n	8001834 <HAL_I2C_EV_IRQHandler+0x230>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 feac 	bl	800258a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001832:	e032      	b.n	800189a <HAL_I2C_EV_IRQHandler+0x296>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	d02d      	beq.n	800189a <HAL_I2C_EV_IRQHandler+0x296>
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001844:	2b00      	cmp	r3, #0
 8001846:	d028      	beq.n	800189a <HAL_I2C_EV_IRQHandler+0x296>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 fedb 	bl	8002604 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800184e:	e024      	b.n	800189a <HAL_I2C_EV_IRQHandler+0x296>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00d      	beq.n	8001876 <HAL_I2C_EV_IRQHandler+0x272>
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <HAL_I2C_EV_IRQHandler+0x272>
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	d103      	bne.n	8001876 <HAL_I2C_EV_IRQHandler+0x272>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fee9 	bl	8002646 <I2C_SlaveReceive_RXNE>
 8001874:	e012      	b.n	800189c <HAL_I2C_EV_IRQHandler+0x298>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00d      	beq.n	800189c <HAL_I2C_EV_IRQHandler+0x298>
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_I2C_EV_IRQHandler+0x298>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 ff19 	bl	80026c2 <I2C_SlaveReceive_BTF>
 8001890:	e004      	b.n	800189c <HAL_I2C_EV_IRQHandler+0x298>
      return;
 8001892:	bf00      	nop
 8001894:	e002      	b.n	800189c <HAL_I2C_EV_IRQHandler+0x298>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001896:	bf00      	nop
 8001898:	e000      	b.n	800189c <HAL_I2C_EV_IRQHandler+0x298>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800189a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b08a      	sub	sp, #40	; 0x28
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018c4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00d      	beq.n	80018ec <HAL_I2C_ER_IRQHandler+0x4a>
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d008      	beq.n	80018ec <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80018ea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00d      	beq.n	8001912 <HAL_I2C_ER_IRQHandler+0x70>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001910:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d03e      	beq.n	800199a <HAL_I2C_ER_IRQHandler+0xf8>
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d039      	beq.n	800199a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8001926:	7efb      	ldrb	r3, [r7, #27]
 8001928:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192e:	b29b      	uxth	r3, r3
 8001930:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001938:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001940:	7ebb      	ldrb	r3, [r7, #26]
 8001942:	2b20      	cmp	r3, #32
 8001944:	d112      	bne.n	800196c <HAL_I2C_ER_IRQHandler+0xca>
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10f      	bne.n	800196c <HAL_I2C_ER_IRQHandler+0xca>
 800194c:	7cfb      	ldrb	r3, [r7, #19]
 800194e:	2b21      	cmp	r3, #33	; 0x21
 8001950:	d008      	beq.n	8001964 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001952:	7cfb      	ldrb	r3, [r7, #19]
 8001954:	2b29      	cmp	r3, #41	; 0x29
 8001956:	d005      	beq.n	8001964 <HAL_I2C_ER_IRQHandler+0xc2>
 8001958:	7cfb      	ldrb	r3, [r7, #19]
 800195a:	2b28      	cmp	r3, #40	; 0x28
 800195c:	d106      	bne.n	800196c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b21      	cmp	r3, #33	; 0x21
 8001962:	d103      	bne.n	800196c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f001 f841 	bl	80029ec <I2C_Slave_AF>
 800196a:	e016      	b.n	800199a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001974:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800197e:	7efb      	ldrb	r3, [r7, #27]
 8001980:	2b10      	cmp	r3, #16
 8001982:	d002      	beq.n	800198a <HAL_I2C_ER_IRQHandler+0xe8>
 8001984:	7efb      	ldrb	r3, [r7, #27]
 8001986:	2b40      	cmp	r3, #64	; 0x40
 8001988:	d107      	bne.n	800199a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001998:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00d      	beq.n	80019c0 <HAL_I2C_ER_IRQHandler+0x11e>
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d008      	beq.n	80019c0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f043 0308 	orr.w	r3, r3, #8
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80019be:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d008      	beq.n	80019d8 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f001 f87a 	bl	8002acc <I2C_ITError>
  }
}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001abe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ac6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d150      	bne.n	8001b78 <I2C_MasterTransmit_TXE+0xc8>
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b21      	cmp	r3, #33	; 0x21
 8001ada:	d14d      	bne.n	8001b78 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d01d      	beq.n	8001b1e <I2C_MasterTransmit_TXE+0x6e>
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b20      	cmp	r3, #32
 8001ae6:	d01a      	beq.n	8001b1e <I2C_MasterTransmit_TXE+0x6e>
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001aee:	d016      	beq.n	8001b1e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	6852      	ldr	r2, [r2, #4]
 8001afa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001afe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2211      	movs	r2, #17
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ff62 	bl	80019e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b1c:	e060      	b.n	8001be0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	6852      	ldr	r2, [r2, #4]
 8001b28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b2c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b3c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2220      	movs	r2, #32
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b40      	cmp	r3, #64	; 0x40
 8001b56:	d107      	bne.n	8001b68 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff7d 	bl	8001a60 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b66:	e03b      	b.n	8001be0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff35 	bl	80019e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b76:	e033      	b.n	8001be0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	2b21      	cmp	r3, #33	; 0x21
 8001b7c:	d005      	beq.n	8001b8a <I2C_MasterTransmit_TXE+0xda>
 8001b7e:	7bbb      	ldrb	r3, [r7, #14]
 8001b80:	2b40      	cmp	r3, #64	; 0x40
 8001b82:	d12d      	bne.n	8001be0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	2b22      	cmp	r3, #34	; 0x22
 8001b88:	d12a      	bne.n	8001be0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d108      	bne.n	8001ba6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	6852      	ldr	r2, [r2, #4]
 8001b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ba2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001ba4:	e01c      	b.n	8001be0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b40      	cmp	r3, #64	; 0x40
 8001bb0:	d103      	bne.n	8001bba <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f880 	bl	8001cb8 <I2C_MemoryTransmit_TXE_BTF>
}
 8001bb8:	e012      	b.n	8001be0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bc2:	7812      	ldrb	r2, [r2, #0]
 8001bc4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001bde:	e7ff      	b.n	8001be0 <I2C_MasterTransmit_TXE+0x130>
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b21      	cmp	r3, #33	; 0x21
 8001c00:	d156      	bne.n	8001cb0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d012      	beq.n	8001c32 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001c30:	e03e      	b.n	8001cb0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d01d      	beq.n	8001c74 <I2C_MasterTransmit_BTF+0x8c>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	d01a      	beq.n	8001c74 <I2C_MasterTransmit_BTF+0x8c>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c44:	d016      	beq.n	8001c74 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	6852      	ldr	r2, [r2, #4]
 8001c50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c54:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2211      	movs	r2, #17
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff feb7 	bl	80019e0 <HAL_I2C_MasterTxCpltCallback>
}
 8001c72:	e01d      	b.n	8001cb0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	6852      	ldr	r2, [r2, #4]
 8001c7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c82:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c92:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fe98 	bl	80019e0 <HAL_I2C_MasterTxCpltCallback>
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d11d      	bne.n	8001d0c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10b      	bne.n	8001cf0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce8:	1c9a      	adds	r2, r3, #2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001cee:	e06e      	b.n	8001dce <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cf8:	b292      	uxth	r2, r2
 8001cfa:	1212      	asrs	r2, r2, #8
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d0a:	e060      	b.n	8001dce <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d10b      	bne.n	8001d2c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d2a:	e050      	b.n	8001dce <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d14c      	bne.n	8001dce <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	2b22      	cmp	r3, #34	; 0x22
 8001d38:	d108      	bne.n	8001d4c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d48:	601a      	str	r2, [r3, #0]
}
 8001d4a:	e040      	b.n	8001dce <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d015      	beq.n	8001d82 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	2b21      	cmp	r3, #33	; 0x21
 8001d5a:	d112      	bne.n	8001d82 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d64:	7812      	ldrb	r2, [r2, #0]
 8001d66:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001d80:	e025      	b.n	8001dce <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d120      	bne.n	8001dce <I2C_MemoryTransmit_TXE_BTF+0x116>
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b21      	cmp	r3, #33	; 0x21
 8001d90:	d11d      	bne.n	8001dce <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	6852      	ldr	r2, [r2, #4]
 8001d9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001da0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6812      	ldr	r2, [r2, #0]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff fe49 	bl	8001a60 <HAL_I2C_MemTxCpltCallback>
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b22      	cmp	r3, #34	; 0x22
 8001de8:	f040 80a2 	bne.w	8001f30 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d921      	bls.n	8001e3e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	6912      	ldr	r2, [r2, #16]
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	f040 8082 	bne.w	8001f30 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	6852      	ldr	r2, [r2, #4]
 8001e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e3a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001e3c:	e078      	b.n	8001f30 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d074      	beq.n	8001f30 <I2C_MasterReceive_RXNE+0x15a>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d002      	beq.n	8001e52 <I2C_MasterReceive_RXNE+0x7c>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d16e      	bne.n	8001f30 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f001 f814 	bl	8002e80 <I2C_WaitOnSTOPRequestThroughIT>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d142      	bne.n	8001ee4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	6852      	ldr	r2, [r2, #4]
 8001e78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e7c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	6912      	ldr	r2, [r2, #16]
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b40      	cmp	r3, #64	; 0x40
 8001eb6:	d10a      	bne.n	8001ece <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff fdd4 	bl	8001a74 <HAL_I2C_MemRxCpltCallback>
}
 8001ecc:	e030      	b.n	8001f30 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2212      	movs	r2, #18
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff fd89 	bl	80019f4 <HAL_I2C_MasterRxCpltCallback>
}
 8001ee2:	e025      	b.n	8001f30 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	6852      	ldr	r2, [r2, #4]
 8001eee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ef2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	6912      	ldr	r2, [r2, #16]
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff fdac 	bl	8001a88 <HAL_I2C_ErrorCallback>
}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d11b      	bne.n	8001f88 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	6852      	ldr	r2, [r2, #4]
 8001f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f5e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	6912      	ldr	r2, [r2, #16]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001f86:	e0bd      	b.n	8002104 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d129      	bne.n	8001fe6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	6852      	ldr	r2, [r2, #4]
 8001f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d00a      	beq.n	8001fbe <I2C_MasterReceive_BTF+0x86>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d007      	beq.n	8001fbe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fbc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	6912      	ldr	r2, [r2, #16]
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001fe4:	e08e      	b.n	8002104 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d176      	bne.n	80020de <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d002      	beq.n	8001ffc <I2C_MasterReceive_BTF+0xc4>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b10      	cmp	r3, #16
 8001ffa:	d108      	bne.n	800200e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e019      	b.n	8002042 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b04      	cmp	r3, #4
 8002012:	d002      	beq.n	800201a <I2C_MasterReceive_BTF+0xe2>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d108      	bne.n	800202c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e00a      	b.n	8002042 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b10      	cmp	r3, #16
 8002030:	d007      	beq.n	8002042 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002040:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	6912      	ldr	r2, [r2, #16]
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	6912      	ldr	r2, [r2, #16]
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002084:	b29b      	uxth	r3, r3
 8002086:	3b01      	subs	r3, #1
 8002088:	b29a      	uxth	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	6852      	ldr	r2, [r2, #4]
 8002098:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800209c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b40      	cmp	r3, #64	; 0x40
 80020b0:	d10a      	bne.n	80020c8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff fcd7 	bl	8001a74 <HAL_I2C_MemRxCpltCallback>
}
 80020c6:	e01d      	b.n	8002104 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2212      	movs	r2, #18
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff fc8c 	bl	80019f4 <HAL_I2C_MasterRxCpltCallback>
}
 80020dc:	e012      	b.n	8002104 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	6912      	ldr	r2, [r2, #16]
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b40      	cmp	r3, #64	; 0x40
 800211e:	d116      	bne.n	800214e <I2C_Master_SB+0x42>
  {
    if (hi2c->EventCount == 0U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002124:	2b00      	cmp	r3, #0
 8002126:	d108      	bne.n	800213a <I2C_Master_SB+0x2e>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002136:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002138:	e066      	b.n	8002208 <I2C_Master_SB+0xfc>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	f042 0201 	orr.w	r2, r2, #1
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	611a      	str	r2, [r3, #16]
}
 800214c:	e05c      	b.n	8002208 <I2C_Master_SB+0xfc>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002156:	d132      	bne.n	80021be <I2C_Master_SB+0xb2>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b21      	cmp	r3, #33	; 0x21
 8002162:	d108      	bne.n	8002176 <I2C_Master_SB+0x6a>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002172:	611a      	str	r2, [r3, #16]
 8002174:	e008      	b.n	8002188 <I2C_Master_SB+0x7c>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f042 0201 	orr.w	r2, r2, #1
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <I2C_Master_SB+0x8e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	2b00      	cmp	r3, #0
 8002198:	d108      	bne.n	80021ac <I2C_Master_SB+0xa0>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d032      	beq.n	8002208 <I2C_Master_SB+0xfc>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d02d      	beq.n	8002208 <I2C_Master_SB+0xfc>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	6852      	ldr	r2, [r2, #4]
 80021b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ba:	605a      	str	r2, [r3, #4]
}
 80021bc:	e024      	b.n	8002208 <I2C_Master_SB+0xfc>
      if (hi2c->EventCount == 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10e      	bne.n	80021e4 <I2C_Master_SB+0xd8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021ce:	b292      	uxth	r2, r2
 80021d0:	11d2      	asrs	r2, r2, #7
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f002 0206 	and.w	r2, r2, #6
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f062 020f 	orn	r2, r2, #15
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	611a      	str	r2, [r3, #16]
}
 80021e2:	e011      	b.n	8002208 <I2C_Master_SB+0xfc>
      else if (hi2c->EventCount == 1U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d10d      	bne.n	8002208 <I2C_Master_SB+0xfc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021f4:	b292      	uxth	r2, r2
 80021f6:	11d2      	asrs	r2, r2, #7
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	f002 0206 	and.w	r2, r2, #6
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	f062 020e 	orn	r2, r2, #14
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	611a      	str	r2, [r3, #16]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222c:	2b00      	cmp	r3, #0
 800222e:	d103      	bne.n	8002238 <I2C_Master_ADD10+0x24>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002234:	2b00      	cmp	r3, #0
 8002236:	d011      	beq.n	800225c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d104      	bne.n	800224c <I2C_Master_ADD10+0x38>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	6852      	ldr	r2, [r2, #4]
 8002256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800225a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002268:	b480      	push	{r7}
 800226a:	b091      	sub	sp, #68	; 0x44
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002276:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b22      	cmp	r3, #34	; 0x22
 8002290:	f040 8169 	bne.w	8002566 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10f      	bne.n	80022bc <I2C_Master_ADDR+0x54>
 800229c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022a0:	2b40      	cmp	r3, #64	; 0x40
 80022a2:	d10b      	bne.n	80022bc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a4:	2300      	movs	r3, #0
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	633b      	str	r3, [r7, #48]	; 0x30
 80022b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ba:	e160      	b.n	800257e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11d      	bne.n	8002300 <I2C_Master_ADDR+0x98>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80022cc:	d118      	bne.n	8002300 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ce:	2300      	movs	r3, #0
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022f2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	651a      	str	r2, [r3, #80]	; 0x50
 80022fe:	e13e      	b.n	800257e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d113      	bne.n	8002332 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e115      	b.n	800255e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	f040 808a 	bne.w	8002452 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002340:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002344:	d137      	bne.n	80023b6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002354:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002364:	d113      	bne.n	800238e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002374:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	e0e7      	b.n	800255e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	623b      	str	r3, [r7, #32]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	623b      	str	r3, [r7, #32]
 80023a2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	e0d3      	b.n	800255e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d02e      	beq.n	800241a <I2C_Master_ADDR+0x1b2>
 80023bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023be:	2b20      	cmp	r3, #32
 80023c0:	d02b      	beq.n	800241a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80023c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c4:	2b12      	cmp	r3, #18
 80023c6:	d102      	bne.n	80023ce <I2C_Master_ADDR+0x166>
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d125      	bne.n	800241a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d00e      	beq.n	80023f2 <I2C_Master_ADDR+0x18a>
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d00b      	beq.n	80023f2 <I2C_Master_ADDR+0x18a>
 80023da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023dc:	2b10      	cmp	r3, #16
 80023de:	d008      	beq.n	80023f2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e007      	b.n	8002402 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002400:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	e0a1      	b.n	800255e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002428:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e085      	b.n	800255e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d14d      	bne.n	80024f8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800245c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245e:	2b04      	cmp	r3, #4
 8002460:	d016      	beq.n	8002490 <I2C_Master_ADDR+0x228>
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	2b02      	cmp	r3, #2
 8002466:	d013      	beq.n	8002490 <I2C_Master_ADDR+0x228>
 8002468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246a:	2b10      	cmp	r3, #16
 800246c:	d010      	beq.n	8002490 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	e007      	b.n	80024a0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800249e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ae:	d117      	bne.n	80024e0 <I2C_Master_ADDR+0x278>
 80024b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024b6:	d00b      	beq.n	80024d0 <I2C_Master_ADDR+0x268>
 80024b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d008      	beq.n	80024d0 <I2C_Master_ADDR+0x268>
 80024be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d005      	beq.n	80024d0 <I2C_Master_ADDR+0x268>
 80024c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d002      	beq.n	80024d0 <I2C_Master_ADDR+0x268>
 80024ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d107      	bne.n	80024e0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	6852      	ldr	r2, [r2, #4]
 80024da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024de:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	e032      	b.n	800255e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002506:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002516:	d117      	bne.n	8002548 <I2C_Master_ADDR+0x2e0>
 8002518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800251e:	d00b      	beq.n	8002538 <I2C_Master_ADDR+0x2d0>
 8002520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002522:	2b01      	cmp	r3, #1
 8002524:	d008      	beq.n	8002538 <I2C_Master_ADDR+0x2d0>
 8002526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002528:	2b08      	cmp	r3, #8
 800252a:	d005      	beq.n	8002538 <I2C_Master_ADDR+0x2d0>
 800252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252e:	2b10      	cmp	r3, #16
 8002530:	d002      	beq.n	8002538 <I2C_Master_ADDR+0x2d0>
 8002532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002534:	2b20      	cmp	r3, #32
 8002536:	d107      	bne.n	8002548 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	6852      	ldr	r2, [r2, #4]
 8002542:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002546:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002564:	e00b      	b.n	800257e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
}
 800257c:	e7ff      	b.n	800257e <I2C_Master_ADDR+0x316>
 800257e:	bf00      	nop
 8002580:	3744      	adds	r7, #68	; 0x44
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002598:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d02b      	beq.n	80025fc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d114      	bne.n	80025fc <I2C_SlaveTransmit_TXE+0x72>
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b29      	cmp	r3, #41	; 0x29
 80025d6:	d111      	bne.n	80025fc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	6852      	ldr	r2, [r2, #4]
 80025e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2221      	movs	r2, #33	; 0x21
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2228      	movs	r2, #40	; 0x28
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fa06 	bl	8001a08 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d011      	beq.n	800263a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002654:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d02c      	beq.n	80026ba <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	6912      	ldr	r2, [r2, #16]
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d114      	bne.n	80026ba <I2C_SlaveReceive_RXNE+0x74>
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	2b2a      	cmp	r3, #42	; 0x2a
 8002694:	d111      	bne.n	80026ba <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	6852      	ldr	r2, [r2, #4]
 80026a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2222      	movs	r2, #34	; 0x22
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2228      	movs	r2, #40	; 0x28
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff f9b1 	bl	8001a1c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d012      	beq.n	80026fa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	6912      	ldr	r2, [r2, #16]
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002720:	2b28      	cmp	r3, #40	; 0x28
 8002722:	d125      	bne.n	8002770 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	6852      	ldr	r2, [r2, #4]
 800272e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002732:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800273e:	2301      	movs	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002748:	2b00      	cmp	r3, #0
 800274a:	d103      	bne.n	8002754 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	81bb      	strh	r3, [r7, #12]
 8002752:	e002      	b.n	800275a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002762:	89ba      	ldrh	r2, [r7, #12]
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	4619      	mov	r1, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff f961 	bl	8001a30 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800276e:	e008      	b.n	8002782 <I2C_Slave_ADDR+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0202 	mvn.w	r2, #2
 8002778:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	6852      	ldr	r2, [r2, #4]
 80027a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027e8:	d172      	bne.n	80028d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	2b22      	cmp	r3, #34	; 0x22
 80027ee:	d002      	beq.n	80027f6 <I2C_Slave_STOPF+0x6a>
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b2a      	cmp	r3, #42	; 0x2a
 80027f4:	d135      	bne.n	8002862 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	b29a      	uxth	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f043 0204 	orr.w	r2, r3, #4
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	6852      	ldr	r2, [r2, #4]
 8002824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002828:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe fc07 	bl	8001042 <HAL_DMA_GetState>
 8002834:	4603      	mov	r3, r0
 8002836:	2b01      	cmp	r3, #1
 8002838:	d049      	beq.n	80028ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	4a69      	ldr	r2, [pc, #420]	; (80029e4 <I2C_Slave_STOPF+0x258>)
 8002840:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fbd9 	bl	8000ffe <HAL_DMA_Abort_IT>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d03d      	beq.n	80028ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800285c:	4610      	mov	r0, r2
 800285e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002860:	e035      	b.n	80028ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	b29a      	uxth	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f043 0204 	orr.w	r2, r3, #4
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	6852      	ldr	r2, [r2, #4]
 8002890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002894:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe fbd1 	bl	8001042 <HAL_DMA_GetState>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d014      	beq.n	80028d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	4a4e      	ldr	r2, [pc, #312]	; (80029e4 <I2C_Slave_STOPF+0x258>)
 80028ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fba3 	bl	8000ffe <HAL_DMA_Abort_IT>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028c8:	4610      	mov	r0, r2
 80028ca:	4798      	blx	r3
 80028cc:	e000      	b.n	80028d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d03e      	beq.n	8002958 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d112      	bne.n	800290e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	6912      	ldr	r2, [r2, #16]
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002918:	2b40      	cmp	r3, #64	; 0x40
 800291a:	d112      	bne.n	8002942 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	6912      	ldr	r2, [r2, #16]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f043 0204 	orr.w	r2, r3, #4
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f8b3 	bl	8002acc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002966:	e039      	b.n	80029dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	2b2a      	cmp	r3, #42	; 0x2a
 800296c:	d109      	bne.n	8002982 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2228      	movs	r2, #40	; 0x28
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff f84d 	bl	8001a1c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b28      	cmp	r3, #40	; 0x28
 800298c:	d111      	bne.n	80029b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <I2C_Slave_STOPF+0x25c>)
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff f84e 	bl	8001a4c <HAL_I2C_ListenCpltCallback>
}
 80029b0:	e014      	b.n	80029dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	2b22      	cmp	r3, #34	; 0x22
 80029b8:	d002      	beq.n	80029c0 <I2C_Slave_STOPF+0x234>
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b22      	cmp	r3, #34	; 0x22
 80029be:	d10d      	bne.n	80029dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff f820 	bl	8001a1c <HAL_I2C_SlaveRxCpltCallback>
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	08002d31 	.word	0x08002d31
 80029e8:	ffff0000 	.word	0xffff0000

080029ec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d002      	beq.n	8002a0e <I2C_Slave_AF+0x22>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d129      	bne.n	8002a62 <I2C_Slave_AF+0x76>
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	2b28      	cmp	r3, #40	; 0x28
 8002a12:	d126      	bne.n	8002a62 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a2c      	ldr	r2, [pc, #176]	; (8002ac8 <I2C_Slave_AF+0xdc>)
 8002a18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	6852      	ldr	r2, [r2, #4]
 8002a24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a28:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a32:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a42:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe fff6 	bl	8001a4c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002a60:	e02e      	b.n	8002ac0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	2b21      	cmp	r3, #33	; 0x21
 8002a66:	d126      	bne.n	8002ab6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <I2C_Slave_AF+0xdc>)
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2221      	movs	r2, #33	; 0x21
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	6852      	ldr	r2, [r2, #4]
 8002a8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a92:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a9c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe ffaa 	bl	8001a08 <HAL_I2C_SlaveTxCpltCallback>
}
 8002ab4:	e004      	b.n	8002ac0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002abe:	615a      	str	r2, [r3, #20]
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	ffff0000 	.word	0xffff0000

08002acc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ada:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002ae4:	7bbb      	ldrb	r3, [r7, #14]
 8002ae6:	2b10      	cmp	r3, #16
 8002ae8:	d002      	beq.n	8002af0 <I2C_ITError+0x24>
 8002aea:	7bbb      	ldrb	r3, [r7, #14]
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d10a      	bne.n	8002b06 <I2C_ITError+0x3a>
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2b22      	cmp	r3, #34	; 0x22
 8002af4:	d107      	bne.n	8002b06 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b04:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b0c:	2b28      	cmp	r3, #40	; 0x28
 8002b0e:	d107      	bne.n	8002b20 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2228      	movs	r2, #40	; 0x28
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b1e:	e015      	b.n	8002b4c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b2e:	d00a      	beq.n	8002b46 <I2C_ITError+0x7a>
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b60      	cmp	r3, #96	; 0x60
 8002b34:	d007      	beq.n	8002b46 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5a:	d162      	bne.n	8002c22 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	6852      	ldr	r2, [r2, #4]
 8002b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b6a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d020      	beq.n	8002bbc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	4a6a      	ldr	r2, [pc, #424]	; (8002d28 <I2C_ITError+0x25c>)
 8002b80:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fa39 	bl	8000ffe <HAL_DMA_Abort_IT>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8089 	beq.w	8002ca6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4798      	blx	r3
 8002bba:	e074      	b.n	8002ca6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc0:	4a59      	ldr	r2, [pc, #356]	; (8002d28 <I2C_ITError+0x25c>)
 8002bc2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe fa18 	bl	8000ffe <HAL_DMA_Abort_IT>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d068      	beq.n	8002ca6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bde:	2b40      	cmp	r3, #64	; 0x40
 8002be0:	d10b      	bne.n	8002bfa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	6912      	ldr	r2, [r2, #16]
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4798      	blx	r3
 8002c20:	e041      	b.n	8002ca6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b60      	cmp	r3, #96	; 0x60
 8002c2c:	d125      	bne.n	8002c7a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d10b      	bne.n	8002c62 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	6912      	ldr	r2, [r2, #16]
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe ff12 	bl	8001a9c <HAL_I2C_AbortCpltCallback>
 8002c78:	e015      	b.n	8002ca6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	d10b      	bne.n	8002ca0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	6912      	ldr	r2, [r2, #16]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7fe fef1 	bl	8001a88 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10e      	bne.n	8002cd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d104      	bne.n	8002cd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	6852      	ldr	r2, [r2, #4]
 8002cde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ce2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d113      	bne.n	8002d20 <I2C_ITError+0x254>
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	2b28      	cmp	r3, #40	; 0x28
 8002cfc:	d110      	bne.n	8002d20 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <I2C_ITError+0x260>)
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe fe96 	bl	8001a4c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	08002d31 	.word	0x08002d31
 8002d2c:	ffff0000 	.word	0xffff0000

08002d30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d4a:	4b4b      	ldr	r3, [pc, #300]	; (8002e78 <I2C_DMAAbort+0x148>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	08db      	lsrs	r3, r3, #3
 8002d50:	4a4a      	ldr	r2, [pc, #296]	; (8002e7c <I2C_DMAAbort+0x14c>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	0a1a      	lsrs	r2, r3, #8
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00da      	lsls	r2, r3, #3
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002d76:	e00a      	b.n	8002d8e <I2C_DMAAbort+0x5e>
    }
    count--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d8c:	d0ea      	beq.n	8002d64 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	2200      	movs	r2, #0
 8002dac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dbc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	2200      	movs	r2, #0
 8002de2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b60      	cmp	r3, #96	; 0x60
 8002dfe:	d10e      	bne.n	8002e1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2200      	movs	r2, #0
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e16:	6978      	ldr	r0, [r7, #20]
 8002e18:	f7fe fe40 	bl	8001a9c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e1c:	e027      	b.n	8002e6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e1e:	7cfb      	ldrb	r3, [r7, #19]
 8002e20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e24:	2b28      	cmp	r3, #40	; 0x28
 8002e26:	d117      	bne.n	8002e58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2228      	movs	r2, #40	; 0x28
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e56:	e007      	b.n	8002e68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002e68:	6978      	ldr	r0, [r7, #20]
 8002e6a:	f7fe fe0d 	bl	8001a88 <HAL_I2C_ErrorCallback>
}
 8002e6e:	bf00      	nop
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000004 	.word	0x20000004
 8002e7c:	14f8b589 	.word	0x14f8b589

08002e80 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e8c:	4b13      	ldr	r3, [pc, #76]	; (8002edc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	08db      	lsrs	r3, r3, #3
 8002e92:	4a13      	ldr	r2, [pc, #76]	; (8002ee0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	0a1a      	lsrs	r2, r3, #8
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d107      	bne.n	8002ebe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f043 0220 	orr.w	r2, r3, #32
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e008      	b.n	8002ed0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ecc:	d0e9      	beq.n	8002ea2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	20000004 	.word	0x20000004
 8002ee0:	14f8b589 	.word	0x14f8b589

08002ee4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ef4:	d103      	bne.n	8002efe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002efc:	e007      	b.n	8002f0e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f06:	d102      	bne.n	8002f0e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e25b      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d075      	beq.n	8003026 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f3a:	4ba3      	ldr	r3, [pc, #652]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d00c      	beq.n	8002f60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f46:	4ba0      	ldr	r3, [pc, #640]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d112      	bne.n	8002f78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f52:	4b9d      	ldr	r3, [pc, #628]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f5e:	d10b      	bne.n	8002f78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	4b99      	ldr	r3, [pc, #612]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d05b      	beq.n	8003024 <HAL_RCC_OscConfig+0x108>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d157      	bne.n	8003024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e236      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f80:	d106      	bne.n	8002f90 <HAL_RCC_OscConfig+0x74>
 8002f82:	4a91      	ldr	r2, [pc, #580]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	4b90      	ldr	r3, [pc, #576]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e01d      	b.n	8002fcc <HAL_RCC_OscConfig+0xb0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x98>
 8002f9a:	4a8b      	ldr	r2, [pc, #556]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	4b8a      	ldr	r3, [pc, #552]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	4a88      	ldr	r2, [pc, #544]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	4b87      	ldr	r3, [pc, #540]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCC_OscConfig+0xb0>
 8002fb4:	4a84      	ldr	r2, [pc, #528]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002fb6:	4b84      	ldr	r3, [pc, #528]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4a81      	ldr	r2, [pc, #516]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002fc2:	4b81      	ldr	r3, [pc, #516]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d013      	beq.n	8002ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fd fef8 	bl	8000dc8 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7fd fef4 	bl	8000dc8 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	; 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e1fb      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b76      	ldr	r3, [pc, #472]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0xc0>
 8002ffa:	e014      	b.n	8003026 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fd fee4 	bl	8000dc8 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003004:	f7fd fee0 	bl	8000dc8 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	; 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e1e7      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003016:	4b6c      	ldr	r3, [pc, #432]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0xe8>
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d063      	beq.n	80030fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003032:	4b65      	ldr	r3, [pc, #404]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00b      	beq.n	8003056 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303e:	4b62      	ldr	r3, [pc, #392]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003046:	2b08      	cmp	r3, #8
 8003048:	d11c      	bne.n	8003084 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304a:	4b5f      	ldr	r3, [pc, #380]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d116      	bne.n	8003084 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003056:	4b5c      	ldr	r3, [pc, #368]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_RCC_OscConfig+0x152>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e1bb      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306e:	4956      	ldr	r1, [pc, #344]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	4b55      	ldr	r3, [pc, #340]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003082:	e03a      	b.n	80030fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800308c:	4b4f      	ldr	r3, [pc, #316]	; (80031cc <HAL_RCC_OscConfig+0x2b0>)
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003092:	f7fd fe99 	bl	8000dc8 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800309a:	f7fd fe95 	bl	8000dc8 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e19c      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ac:	4b46      	ldr	r3, [pc, #280]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b8:	4943      	ldr	r1, [pc, #268]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 80030ba:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]
 80030cc:	e015      	b.n	80030fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ce:	4b3f      	ldr	r3, [pc, #252]	; (80031cc <HAL_RCC_OscConfig+0x2b0>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7fd fe78 	bl	8000dc8 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030dc:	f7fd fe74 	bl	8000dc8 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e17b      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ee:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d030      	beq.n	8003168 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d016      	beq.n	800313c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310e:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <HAL_RCC_OscConfig+0x2b4>)
 8003110:	2201      	movs	r2, #1
 8003112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003114:	f7fd fe58 	bl	8000dc8 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800311c:	f7fd fe54 	bl	8000dc8 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e15b      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x200>
 800313a:	e015      	b.n	8003168 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800313c:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <HAL_RCC_OscConfig+0x2b4>)
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003142:	f7fd fe41 	bl	8000dc8 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800314a:	f7fd fe3d 	bl	8000dc8 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e144      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315c:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 800315e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f0      	bne.n	800314a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80a0 	beq.w	80032b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317a:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10f      	bne.n	80031a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	4a0f      	ldr	r2, [pc, #60]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCC_OscConfig+0x2b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d121      	bne.n	80031f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b2:	4a08      	ldr	r2, [pc, #32]	; (80031d4 <HAL_RCC_OscConfig+0x2b8>)
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <HAL_RCC_OscConfig+0x2b8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031be:	f7fd fe03 	bl	8000dc8 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	e011      	b.n	80031ea <HAL_RCC_OscConfig+0x2ce>
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	42470000 	.word	0x42470000
 80031d0:	42470e80 	.word	0x42470e80
 80031d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d8:	f7fd fdf6 	bl	8000dc8 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e0fd      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ea:	4b81      	ldr	r3, [pc, #516]	; (80033f0 <HAL_RCC_OscConfig+0x4d4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d106      	bne.n	800320c <HAL_RCC_OscConfig+0x2f0>
 80031fe:	4a7d      	ldr	r2, [pc, #500]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 8003200:	4b7c      	ldr	r3, [pc, #496]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6713      	str	r3, [r2, #112]	; 0x70
 800320a:	e01c      	b.n	8003246 <HAL_RCC_OscConfig+0x32a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b05      	cmp	r3, #5
 8003212:	d10c      	bne.n	800322e <HAL_RCC_OscConfig+0x312>
 8003214:	4a77      	ldr	r2, [pc, #476]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 8003216:	4b77      	ldr	r3, [pc, #476]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	f043 0304 	orr.w	r3, r3, #4
 800321e:	6713      	str	r3, [r2, #112]	; 0x70
 8003220:	4a74      	ldr	r2, [pc, #464]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 8003222:	4b74      	ldr	r3, [pc, #464]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6713      	str	r3, [r2, #112]	; 0x70
 800322c:	e00b      	b.n	8003246 <HAL_RCC_OscConfig+0x32a>
 800322e:	4a71      	ldr	r2, [pc, #452]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 8003230:	4b70      	ldr	r3, [pc, #448]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	6713      	str	r3, [r2, #112]	; 0x70
 800323a:	4a6e      	ldr	r2, [pc, #440]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 800323c:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	f023 0304 	bic.w	r3, r3, #4
 8003244:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d015      	beq.n	800327a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fd fdbb 	bl	8000dc8 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003254:	e00a      	b.n	800326c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7fd fdb7 	bl	8000dc8 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f241 3288 	movw	r2, #5000	; 0x1388
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e0bc      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326c:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0ee      	beq.n	8003256 <HAL_RCC_OscConfig+0x33a>
 8003278:	e014      	b.n	80032a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327a:	f7fd fda5 	bl	8000dc8 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003280:	e00a      	b.n	8003298 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003282:	f7fd fda1 	bl	8000dc8 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e0a6      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003298:	4b56      	ldr	r3, [pc, #344]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1ee      	bne.n	8003282 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d105      	bne.n	80032b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032aa:	4a52      	ldr	r2, [pc, #328]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 80032ac:	4b51      	ldr	r3, [pc, #324]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8092 	beq.w	80033e4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032c0:	4b4c      	ldr	r3, [pc, #304]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d05c      	beq.n	8003386 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d141      	bne.n	8003358 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d4:	4b48      	ldr	r3, [pc, #288]	; (80033f8 <HAL_RCC_OscConfig+0x4dc>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032da:	f7fd fd75 	bl	8000dc8 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e2:	f7fd fd71 	bl	8000dc8 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e078      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f4:	4b3f      	ldr	r3, [pc, #252]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f0      	bne.n	80032e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003300:	493c      	ldr	r1, [pc, #240]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	019b      	lsls	r3, r3, #6
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	3b01      	subs	r3, #1
 800331c:	041b      	lsls	r3, r3, #16
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332a:	4b33      	ldr	r3, [pc, #204]	; (80033f8 <HAL_RCC_OscConfig+0x4dc>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7fd fd4a 	bl	8000dc8 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003338:	f7fd fd46 	bl	8000dc8 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e04d      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334a:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x41c>
 8003356:	e045      	b.n	80033e4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <HAL_RCC_OscConfig+0x4dc>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fd fd33 	bl	8000dc8 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003366:	f7fd fd2f 	bl	8000dc8 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e036      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f0      	bne.n	8003366 <HAL_RCC_OscConfig+0x44a>
 8003384:	e02e      	b.n	80033e4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e029      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003392:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <HAL_RCC_OscConfig+0x4d8>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d11c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d115      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033ba:	4013      	ands	r3, r2
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10d      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d106      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40007000 	.word	0x40007000
 80033f4:	40023800 	.word	0x40023800
 80033f8:	42470060 	.word	0x42470060

080033fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0cc      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003410:	4b68      	ldr	r3, [pc, #416]	; (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 020f 	and.w	r2, r3, #15
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d20c      	bcs.n	8003438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b65      	ldr	r3, [pc, #404]	; (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b63      	ldr	r3, [pc, #396]	; (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 020f 	and.w	r2, r3, #15
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0b8      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d020      	beq.n	8003486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003450:	4a59      	ldr	r2, [pc, #356]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	4b59      	ldr	r3, [pc, #356]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800345a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003468:	4a53      	ldr	r2, [pc, #332]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003474:	4950      	ldr	r1, [pc, #320]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4b50      	ldr	r3, [pc, #320]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d044      	beq.n	800351c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d107      	bne.n	80034aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	4b47      	ldr	r3, [pc, #284]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d119      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e07f      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d003      	beq.n	80034ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ba:	4b3f      	ldr	r3, [pc, #252]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e06f      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ca:	4b3b      	ldr	r3, [pc, #236]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e067      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034da:	4937      	ldr	r1, [pc, #220]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 0203 	bic.w	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ec:	f7fd fc6c 	bl	8000dc8 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	e00a      	b.n	800350a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f4:	f7fd fc68 	bl	8000dc8 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e04f      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 020c 	and.w	r2, r3, #12
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	429a      	cmp	r2, r3
 800351a:	d1eb      	bne.n	80034f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800351c:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 020f 	and.w	r2, r3, #15
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d90c      	bls.n	8003544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 020f 	and.w	r2, r3, #15
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e032      	b.n	80035aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003550:	4919      	ldr	r1, [pc, #100]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800356e:	4912      	ldr	r1, [pc, #72]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003582:	f000 f821 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 8003586:	4601      	mov	r1, r0
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <HAL_RCC_ClockConfig+0x1c0>)
 8003594:	5cd3      	ldrb	r3, [r2, r3]
 8003596:	fa21 f303 	lsr.w	r3, r1, r3
 800359a:	4a09      	ldr	r2, [pc, #36]	; (80035c0 <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_ClockConfig+0x1c8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fd fbcc 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40023c00 	.word	0x40023c00
 80035b8:	40023800 	.word	0x40023800
 80035bc:	08008280 	.word	0x08008280
 80035c0:	20000004 	.word	0x20000004
 80035c4:	20000008 	.word	0x20000008

080035c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035cc:	b087      	sub	sp, #28
 80035ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035d0:	2200      	movs	r2, #0
 80035d2:	60fa      	str	r2, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	617a      	str	r2, [r7, #20]
 80035d8:	2200      	movs	r2, #0
 80035da:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80035dc:	2200      	movs	r2, #0
 80035de:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e0:	4a51      	ldr	r2, [pc, #324]	; (8003728 <HAL_RCC_GetSysClockFreq+0x160>)
 80035e2:	6892      	ldr	r2, [r2, #8]
 80035e4:	f002 020c 	and.w	r2, r2, #12
 80035e8:	2a04      	cmp	r2, #4
 80035ea:	d007      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x34>
 80035ec:	2a08      	cmp	r2, #8
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_GetSysClockFreq+0x3a>
 80035f0:	2a00      	cmp	r2, #0
 80035f2:	f040 8090 	bne.w	8003716 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f6:	4b4d      	ldr	r3, [pc, #308]	; (800372c <HAL_RCC_GetSysClockFreq+0x164>)
 80035f8:	613b      	str	r3, [r7, #16]
       break;
 80035fa:	e08f      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035fc:	4b4c      	ldr	r3, [pc, #304]	; (8003730 <HAL_RCC_GetSysClockFreq+0x168>)
 80035fe:	613b      	str	r3, [r7, #16]
      break;
 8003600:	e08c      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003602:	4a49      	ldr	r2, [pc, #292]	; (8003728 <HAL_RCC_GetSysClockFreq+0x160>)
 8003604:	6852      	ldr	r2, [r2, #4]
 8003606:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800360a:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800360c:	4a46      	ldr	r2, [pc, #280]	; (8003728 <HAL_RCC_GetSysClockFreq+0x160>)
 800360e:	6852      	ldr	r2, [r2, #4]
 8003610:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003614:	2a00      	cmp	r2, #0
 8003616:	d023      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003618:	4b43      	ldr	r3, [pc, #268]	; (8003728 <HAL_RCC_GetSysClockFreq+0x160>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	f04f 0400 	mov.w	r4, #0
 8003622:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	ea03 0301 	and.w	r3, r3, r1
 800362e:	ea04 0402 	and.w	r4, r4, r2
 8003632:	4a3f      	ldr	r2, [pc, #252]	; (8003730 <HAL_RCC_GetSysClockFreq+0x168>)
 8003634:	fb02 f104 	mul.w	r1, r2, r4
 8003638:	2200      	movs	r2, #0
 800363a:	fb02 f203 	mul.w	r2, r2, r3
 800363e:	440a      	add	r2, r1
 8003640:	493b      	ldr	r1, [pc, #236]	; (8003730 <HAL_RCC_GetSysClockFreq+0x168>)
 8003642:	fba3 0101 	umull	r0, r1, r3, r1
 8003646:	1853      	adds	r3, r2, r1
 8003648:	4619      	mov	r1, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f04f 0400 	mov.w	r4, #0
 8003650:	461a      	mov	r2, r3
 8003652:	4623      	mov	r3, r4
 8003654:	f7fc fe0c 	bl	8000270 <__aeabi_uldivmod>
 8003658:	4603      	mov	r3, r0
 800365a:	460c      	mov	r4, r1
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e04c      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003660:	4a31      	ldr	r2, [pc, #196]	; (8003728 <HAL_RCC_GetSysClockFreq+0x160>)
 8003662:	6852      	ldr	r2, [r2, #4]
 8003664:	0992      	lsrs	r2, r2, #6
 8003666:	4611      	mov	r1, r2
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8003670:	f04f 0600 	mov.w	r6, #0
 8003674:	ea05 0501 	and.w	r5, r5, r1
 8003678:	ea06 0602 	and.w	r6, r6, r2
 800367c:	4629      	mov	r1, r5
 800367e:	4632      	mov	r2, r6
 8003680:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8003684:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8003688:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800368c:	4651      	mov	r1, sl
 800368e:	465a      	mov	r2, fp
 8003690:	46aa      	mov	sl, r5
 8003692:	46b3      	mov	fp, r6
 8003694:	4655      	mov	r5, sl
 8003696:	465e      	mov	r6, fp
 8003698:	1b4d      	subs	r5, r1, r5
 800369a:	eb62 0606 	sbc.w	r6, r2, r6
 800369e:	4629      	mov	r1, r5
 80036a0:	4632      	mov	r2, r6
 80036a2:	0194      	lsls	r4, r2, #6
 80036a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036a8:	018b      	lsls	r3, r1, #6
 80036aa:	1a5b      	subs	r3, r3, r1
 80036ac:	eb64 0402 	sbc.w	r4, r4, r2
 80036b0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80036b4:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80036b8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80036bc:	4643      	mov	r3, r8
 80036be:	464c      	mov	r4, r9
 80036c0:	4655      	mov	r5, sl
 80036c2:	465e      	mov	r6, fp
 80036c4:	18ed      	adds	r5, r5, r3
 80036c6:	eb46 0604 	adc.w	r6, r6, r4
 80036ca:	462b      	mov	r3, r5
 80036cc:	4634      	mov	r4, r6
 80036ce:	02a2      	lsls	r2, r4, #10
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	029b      	lsls	r3, r3, #10
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	e897 0018 	ldmia.w	r7, {r3, r4}
 80036e2:	4618      	mov	r0, r3
 80036e4:	4621      	mov	r1, r4
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f04f 0400 	mov.w	r4, #0
 80036ec:	461a      	mov	r2, r3
 80036ee:	4623      	mov	r3, r4
 80036f0:	f7fc fdbe 	bl	8000270 <__aeabi_uldivmod>
 80036f4:	4603      	mov	r3, r0
 80036f6:	460c      	mov	r4, r1
 80036f8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036fa:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_GetSysClockFreq+0x160>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	0c1b      	lsrs	r3, r3, #16
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	3301      	adds	r3, #1
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003712:	613b      	str	r3, [r7, #16]
      break;
 8003714:	e002      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_RCC_GetSysClockFreq+0x164>)
 8003718:	613b      	str	r3, [r7, #16]
      break;
 800371a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800371c:	693b      	ldr	r3, [r7, #16]
}
 800371e:	4618      	mov	r0, r3
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003728:	40023800 	.word	0x40023800
 800372c:	00f42400 	.word	0x00f42400
 8003730:	017d7840 	.word	0x017d7840

08003734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <HAL_RCC_GetHCLKFreq+0x14>)
 800373a:	681b      	ldr	r3, [r3, #0]
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000004 	.word	0x20000004

0800374c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003750:	f7ff fff0 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 8003754:	4601      	mov	r1, r0
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	0a9b      	lsrs	r3, r3, #10
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4a03      	ldr	r2, [pc, #12]	; (8003770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003762:	5cd3      	ldrb	r3, [r2, r3]
 8003764:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	08008290 	.word	0x08008290

08003774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003778:	f7ff ffdc 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 800377c:	4601      	mov	r1, r0
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	0b5b      	lsrs	r3, r3, #13
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4a03      	ldr	r2, [pc, #12]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800378a:	5cd3      	ldrb	r3, [r2, r3]
 800378c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800
 8003798:	08008290 	.word	0x08008290

0800379c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e03f      	b.n	800382e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd fa4a 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2224      	movs	r2, #36	; 0x24
 80037cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	68d2      	ldr	r2, [r2, #12]
 80037da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fb93 	bl	8003f0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	6912      	ldr	r2, [r2, #16]
 80037f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	6952      	ldr	r2, [r2, #20]
 8003800:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003804:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	68d2      	ldr	r2, [r2, #12]
 8003810:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003814:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b088      	sub	sp, #32
 800383a:	af02      	add	r7, sp, #8
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	4613      	mov	r3, r2
 8003844:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b20      	cmp	r3, #32
 8003854:	f040 8082 	bne.w	800395c <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_UART_Transmit+0x2e>
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e07a      	b.n	800395e <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_UART_Transmit+0x40>
 8003872:	2302      	movs	r3, #2
 8003874:	e073      	b.n	800395e <HAL_UART_Transmit+0x128>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2221      	movs	r2, #33	; 0x21
 8003888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800388c:	f7fd fa9c 	bl	8000dc8 <HAL_GetTick>
 8003890:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	88fa      	ldrh	r2, [r7, #6]
 8003896:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	88fa      	ldrh	r2, [r7, #6]
 800389c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80038a6:	e041      	b.n	800392c <HAL_UART_Transmit+0xf6>
    {
      huart->TxXferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038be:	d121      	bne.n	8003904 <HAL_UART_Transmit+0xce>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2200      	movs	r2, #0
 80038c8:	2180      	movs	r1, #128	; 0x80
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f9b4 	bl	8003c38 <UART_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e041      	b.n	800395e <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	8812      	ldrh	r2, [r2, #0]
 80038e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ea:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <HAL_UART_Transmit+0xc6>
        {
          pData += 2U;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	3302      	adds	r3, #2
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	e017      	b.n	800392c <HAL_UART_Transmit+0xf6>
        }
        else
        {
          pData += 1U;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	3301      	adds	r3, #1
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	e013      	b.n	800392c <HAL_UART_Transmit+0xf6>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2200      	movs	r2, #0
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f992 	bl	8003c38 <UART_WaitOnFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_UART_Transmit+0xe8>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e01f      	b.n	800395e <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	1c59      	adds	r1, r3, #1
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1b8      	bne.n	80038a8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2200      	movs	r2, #0
 800393e:	2140      	movs	r1, #64	; 0x40
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f979 	bl	8003c38 <UART_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_UART_Transmit+0x11a>
    {
      return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e006      	b.n	800395e <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e000      	b.n	800395e <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 800395c:	2302      	movs	r3, #2
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	4613      	mov	r3, r2
 8003972:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b20      	cmp	r3, #32
 800397e:	d140      	bne.n	8003a02 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_UART_Receive_IT+0x26>
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e039      	b.n	8003a04 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_UART_Receive_IT+0x38>
 800399a:	2302      	movs	r3, #2
 800399c:	e032      	b.n	8003a04 <HAL_UART_Receive_IT+0x9e>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	88fa      	ldrh	r2, [r7, #6]
 80039b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	88fa      	ldrh	r2, [r7, #6]
 80039b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2222      	movs	r2, #34	; 0x22
 80039c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	68d2      	ldr	r2, [r2, #12]
 80039d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039dc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	6952      	ldr	r2, [r2, #20]
 80039e8:	f042 0201 	orr.w	r2, r2, #1
 80039ec:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	68d2      	ldr	r2, [r2, #12]
 80039f8:	f042 0220 	orr.w	r2, r2, #32
 80039fc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	e000      	b.n	8003a04 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003a02:	2302      	movs	r3, #2
  }
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10d      	bne.n	8003a62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_UART_IRQHandler+0x52>
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f9d5 	bl	8003e0a <UART_Receive_IT>
      return;
 8003a60:	e0d1      	b.n	8003c06 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80b0 	beq.w	8003bca <HAL_UART_IRQHandler+0x1ba>
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d105      	bne.n	8003a80 <HAL_UART_IRQHandler+0x70>
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80a5 	beq.w	8003bca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_UART_IRQHandler+0x90>
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a98:	f043 0201 	orr.w	r2, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_UART_IRQHandler+0xb0>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	f043 0202 	orr.w	r2, r3, #2
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_UART_IRQHandler+0xd0>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad8:	f043 0204 	orr.w	r2, r3, #4
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00f      	beq.n	8003b0a <HAL_UART_IRQHandler+0xfa>
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d104      	bne.n	8003afe <HAL_UART_IRQHandler+0xee>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	f043 0208 	orr.w	r2, r3, #8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d078      	beq.n	8003c04 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <HAL_UART_IRQHandler+0x11c>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f96f 	bl	8003e0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d102      	bne.n	8003b54 <HAL_UART_IRQHandler+0x144>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d031      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f8b9 	bl	8003ccc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b40      	cmp	r3, #64	; 0x40
 8003b66:	d123      	bne.n	8003bb0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	6952      	ldr	r2, [r2, #20]
 8003b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b76:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d013      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	4a21      	ldr	r2, [pc, #132]	; (8003c0c <HAL_UART_IRQHandler+0x1fc>)
 8003b86:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fd fa36 	bl	8000ffe <HAL_DMA_Abort_IT>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d016      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba6:	e00e      	b.n	8003bc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f83b 	bl	8003c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bae:	e00a      	b.n	8003bc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f837 	bl	8003c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb6:	e006      	b.n	8003bc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f833 	bl	8003c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003bc4:	e01e      	b.n	8003c04 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc6:	bf00      	nop
    return;
 8003bc8:	e01c      	b.n	8003c04 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_UART_IRQHandler+0x1d6>
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f8a6 	bl	8003d30 <UART_Transmit_IT>
    return;
 8003be4:	e00f      	b.n	8003c06 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_UART_IRQHandler+0x1f6>
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8ed 	bl	8003dda <UART_EndTransmit_IT>
    return;
 8003c00:	bf00      	nop
 8003c02:	e000      	b.n	8003c06 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003c04:	bf00      	nop
  }
}
 8003c06:	3720      	adds	r7, #32
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	08003d09 	.word	0x08003d09

08003c10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c48:	e02c      	b.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d028      	beq.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c58:	f7fd f8b6 	bl	8000dc8 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	1ad2      	subs	r2, r2, r3
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d91d      	bls.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	68d2      	ldr	r2, [r2, #12]
 8003c72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c76:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	6952      	ldr	r2, [r2, #20]
 8003c82:	f022 0201 	bic.w	r2, r2, #1
 8003c86:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e00f      	b.n	8003cc4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	401a      	ands	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d0c3      	beq.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	68d2      	ldr	r2, [r2, #12]
 8003cde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ce2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	6952      	ldr	r2, [r2, #20]
 8003cee:	f022 0201 	bic.w	r2, r2, #1
 8003cf2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7ff ff7e 	bl	8003c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b21      	cmp	r3, #33	; 0x21
 8003d42:	d143      	bne.n	8003dcc <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d119      	bne.n	8003d82 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	8812      	ldrh	r2, [r2, #0]
 8003d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d60:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d105      	bne.n	8003d76 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	1c9a      	adds	r2, r3, #2
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	621a      	str	r2, [r3, #32]
 8003d74:	e00e      	b.n	8003d94 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	621a      	str	r2, [r3, #32]
 8003d80:	e008      	b.n	8003d94 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	1c58      	adds	r0, r3, #1
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	6208      	str	r0, [r1, #32]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	4619      	mov	r1, r3
 8003da2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10f      	bne.n	8003dc8 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	68d2      	ldr	r2, [r2, #12]
 8003db2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	68d2      	ldr	r2, [r2, #12]
 8003dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e000      	b.n	8003dce <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	68d2      	ldr	r2, [r2, #12]
 8003dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff ff08 	bl	8003c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b22      	cmp	r3, #34	; 0x22
 8003e1c:	d171      	bne.n	8003f02 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e26:	d123      	bne.n	8003e70 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10e      	bne.n	8003e54 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	1c9a      	adds	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	629a      	str	r2, [r3, #40]	; 0x28
 8003e52:	e029      	b.n	8003ea8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	629a      	str	r2, [r3, #40]	; 0x28
 8003e6e:	e01b      	b.n	8003ea8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	1c59      	adds	r1, r3, #1
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6291      	str	r1, [r2, #40]	; 0x28
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	6852      	ldr	r2, [r2, #4]
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	e00c      	b.n	8003ea8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	1c59      	adds	r1, r3, #1
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6291      	str	r1, [r2, #40]	; 0x28
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	6852      	ldr	r2, [r2, #4]
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d120      	bne.n	8003efe <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	68d2      	ldr	r2, [r2, #12]
 8003ec6:	f022 0220 	bic.w	r2, r2, #32
 8003eca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	68d2      	ldr	r2, [r2, #12]
 8003ed6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	6952      	ldr	r2, [r2, #20]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7fc fc41 	bl	800077c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e002      	b.n	8003f04 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e000      	b.n	8003f04 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003f02:	2302      	movs	r3, #2
  }
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f10:	b0a3      	sub	sp, #140	; 0x8c
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f18:	6819      	ldr	r1, [r3, #0]
 8003f1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	431a      	orrs	r2, r3
 8003f36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 8003f46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f48:	6819      	ldr	r1, [r3, #0]
 8003f4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8003f54:	f022 020c 	bic.w	r2, r2, #12
 8003f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f62:	6819      	ldr	r1, [r3, #0]
 8003f64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7e:	f040 8171 	bne.w	8004264 <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4ab4      	ldr	r2, [pc, #720]	; (8004258 <UART_SetConfig+0x34c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d005      	beq.n	8003f98 <UART_SetConfig+0x8c>
 8003f8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4ab2      	ldr	r2, [pc, #712]	; (800425c <UART_SetConfig+0x350>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	f040 80b1 	bne.w	80040fa <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f98:	f7ff fbec 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8003f9c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fa2:	681d      	ldr	r5, [r3, #0]
 8003fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fa8:	4619      	mov	r1, r3
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	18db      	adds	r3, r3, r3
 8003fb4:	eb44 0404 	adc.w	r4, r4, r4
 8003fb8:	185b      	adds	r3, r3, r1
 8003fba:	eb44 0402 	adc.w	r4, r4, r2
 8003fbe:	00e0      	lsls	r0, r4, #3
 8003fc0:	6478      	str	r0, [r7, #68]	; 0x44
 8003fc2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003fc4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003fc8:	6478      	str	r0, [r7, #68]	; 0x44
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	643b      	str	r3, [r7, #64]	; 0x40
 8003fce:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003fd2:	eb13 0801 	adds.w	r8, r3, r1
 8003fd6:	eb44 0902 	adc.w	r9, r4, r2
 8003fda:	4640      	mov	r0, r8
 8003fdc:	4649      	mov	r1, r9
 8003fde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f04f 0400 	mov.w	r4, #0
 8003fe6:	18db      	adds	r3, r3, r3
 8003fe8:	eb44 0404 	adc.w	r4, r4, r4
 8003fec:	461a      	mov	r2, r3
 8003fee:	4623      	mov	r3, r4
 8003ff0:	f7fc f93e 	bl	8000270 <__aeabi_uldivmod>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4b99      	ldr	r3, [pc, #612]	; (8004260 <UART_SetConfig+0x354>)
 8003ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	011e      	lsls	r6, r3, #4
 8004004:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004008:	4619      	mov	r1, r3
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	460b      	mov	r3, r1
 8004010:	4614      	mov	r4, r2
 8004012:	18db      	adds	r3, r3, r3
 8004014:	eb44 0404 	adc.w	r4, r4, r4
 8004018:	185b      	adds	r3, r3, r1
 800401a:	eb44 0402 	adc.w	r4, r4, r2
 800401e:	00e0      	lsls	r0, r4, #3
 8004020:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004022:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004024:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004028:	63f8      	str	r0, [r7, #60]	; 0x3c
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	63bb      	str	r3, [r7, #56]	; 0x38
 800402e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8004032:	eb13 0801 	adds.w	r8, r3, r1
 8004036:	eb44 0902 	adc.w	r9, r4, r2
 800403a:	4640      	mov	r0, r8
 800403c:	4649      	mov	r1, r9
 800403e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f04f 0400 	mov.w	r4, #0
 8004046:	18db      	adds	r3, r3, r3
 8004048:	eb44 0404 	adc.w	r4, r4, r4
 800404c:	461a      	mov	r2, r3
 800404e:	4623      	mov	r3, r4
 8004050:	f7fc f90e 	bl	8000270 <__aeabi_uldivmod>
 8004054:	4603      	mov	r3, r0
 8004056:	460c      	mov	r4, r1
 8004058:	461a      	mov	r2, r3
 800405a:	4b81      	ldr	r3, [pc, #516]	; (8004260 <UART_SetConfig+0x354>)
 800405c:	fba3 1302 	umull	r1, r3, r3, r2
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	2164      	movs	r1, #100	; 0x64
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	3332      	adds	r3, #50	; 0x32
 800406e:	4a7c      	ldr	r2, [pc, #496]	; (8004260 <UART_SetConfig+0x354>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800407c:	441e      	add	r6, r3
 800407e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004082:	4619      	mov	r1, r3
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	460b      	mov	r3, r1
 800408a:	4614      	mov	r4, r2
 800408c:	18db      	adds	r3, r3, r3
 800408e:	eb44 0404 	adc.w	r4, r4, r4
 8004092:	185b      	adds	r3, r3, r1
 8004094:	eb44 0402 	adc.w	r4, r4, r2
 8004098:	00e0      	lsls	r0, r4, #3
 800409a:	6378      	str	r0, [r7, #52]	; 0x34
 800409c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800409e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80040a2:	6378      	str	r0, [r7, #52]	; 0x34
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	633b      	str	r3, [r7, #48]	; 0x30
 80040a8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80040ac:	eb13 0801 	adds.w	r8, r3, r1
 80040b0:	eb44 0902 	adc.w	r9, r4, r2
 80040b4:	4640      	mov	r0, r8
 80040b6:	4649      	mov	r1, r9
 80040b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f04f 0400 	mov.w	r4, #0
 80040c0:	18db      	adds	r3, r3, r3
 80040c2:	eb44 0404 	adc.w	r4, r4, r4
 80040c6:	461a      	mov	r2, r3
 80040c8:	4623      	mov	r3, r4
 80040ca:	f7fc f8d1 	bl	8000270 <__aeabi_uldivmod>
 80040ce:	4603      	mov	r3, r0
 80040d0:	460c      	mov	r4, r1
 80040d2:	461a      	mov	r2, r3
 80040d4:	4b62      	ldr	r3, [pc, #392]	; (8004260 <UART_SetConfig+0x354>)
 80040d6:	fba3 1302 	umull	r1, r3, r3, r2
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	2164      	movs	r1, #100	; 0x64
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	3332      	adds	r3, #50	; 0x32
 80040e8:	4a5d      	ldr	r2, [pc, #372]	; (8004260 <UART_SetConfig+0x354>)
 80040ea:	fba2 2303 	umull	r2, r3, r2, r3
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4433      	add	r3, r6
 80040f6:	60ab      	str	r3, [r5, #8]
 80040f8:	e240      	b.n	800457c <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040fa:	f7ff fb27 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 80040fe:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004102:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	673a      	str	r2, [r7, #112]	; 0x70
 8004108:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800410c:	4619      	mov	r1, r3
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	460b      	mov	r3, r1
 8004114:	4614      	mov	r4, r2
 8004116:	18db      	adds	r3, r3, r3
 8004118:	eb44 0404 	adc.w	r4, r4, r4
 800411c:	185b      	adds	r3, r3, r1
 800411e:	eb44 0402 	adc.w	r4, r4, r2
 8004122:	00e0      	lsls	r0, r4, #3
 8004124:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004128:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800412c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
 8004132:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004136:	185d      	adds	r5, r3, r1
 8004138:	eb44 0602 	adc.w	r6, r4, r2
 800413c:	4628      	mov	r0, r5
 800413e:	4631      	mov	r1, r6
 8004140:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f04f 0400 	mov.w	r4, #0
 8004148:	18db      	adds	r3, r3, r3
 800414a:	eb44 0404 	adc.w	r4, r4, r4
 800414e:	461a      	mov	r2, r3
 8004150:	4623      	mov	r3, r4
 8004152:	f7fc f88d 	bl	8000270 <__aeabi_uldivmod>
 8004156:	4603      	mov	r3, r0
 8004158:	460c      	mov	r4, r1
 800415a:	461a      	mov	r2, r3
 800415c:	4b40      	ldr	r3, [pc, #256]	; (8004260 <UART_SetConfig+0x354>)
 800415e:	fba3 2302 	umull	r2, r3, r3, r2
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	011e      	lsls	r6, r3, #4
 8004166:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800416a:	4619      	mov	r1, r3
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	460b      	mov	r3, r1
 8004172:	4614      	mov	r4, r2
 8004174:	18db      	adds	r3, r3, r3
 8004176:	eb44 0404 	adc.w	r4, r4, r4
 800417a:	185b      	adds	r3, r3, r1
 800417c:	eb44 0402 	adc.w	r4, r4, r2
 8004180:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8004184:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8004188:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 800418c:	4653      	mov	r3, sl
 800418e:	465c      	mov	r4, fp
 8004190:	eb13 0a01 	adds.w	sl, r3, r1
 8004194:	eb44 0b02 	adc.w	fp, r4, r2
 8004198:	4650      	mov	r0, sl
 800419a:	4659      	mov	r1, fp
 800419c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f04f 0400 	mov.w	r4, #0
 80041a4:	18db      	adds	r3, r3, r3
 80041a6:	eb44 0404 	adc.w	r4, r4, r4
 80041aa:	461a      	mov	r2, r3
 80041ac:	4623      	mov	r3, r4
 80041ae:	f7fc f85f 	bl	8000270 <__aeabi_uldivmod>
 80041b2:	4603      	mov	r3, r0
 80041b4:	460c      	mov	r4, r1
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b29      	ldr	r3, [pc, #164]	; (8004260 <UART_SetConfig+0x354>)
 80041ba:	fba3 1302 	umull	r1, r3, r3, r2
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2164      	movs	r1, #100	; 0x64
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	3332      	adds	r3, #50	; 0x32
 80041cc:	4a24      	ldr	r2, [pc, #144]	; (8004260 <UART_SetConfig+0x354>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041da:	441e      	add	r6, r3
 80041dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041e0:	4619      	mov	r1, r3
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4614      	mov	r4, r2
 80041ea:	18db      	adds	r3, r3, r3
 80041ec:	eb44 0404 	adc.w	r4, r4, r4
 80041f0:	185b      	adds	r3, r3, r1
 80041f2:	eb44 0402 	adc.w	r4, r4, r2
 80041f6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80041fa:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80041fe:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8004202:	4643      	mov	r3, r8
 8004204:	464c      	mov	r4, r9
 8004206:	eb13 0801 	adds.w	r8, r3, r1
 800420a:	eb44 0902 	adc.w	r9, r4, r2
 800420e:	4640      	mov	r0, r8
 8004210:	4649      	mov	r1, r9
 8004212:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f04f 0400 	mov.w	r4, #0
 800421a:	18db      	adds	r3, r3, r3
 800421c:	eb44 0404 	adc.w	r4, r4, r4
 8004220:	461a      	mov	r2, r3
 8004222:	4623      	mov	r3, r4
 8004224:	f7fc f824 	bl	8000270 <__aeabi_uldivmod>
 8004228:	4603      	mov	r3, r0
 800422a:	460c      	mov	r4, r1
 800422c:	461a      	mov	r2, r3
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <UART_SetConfig+0x354>)
 8004230:	fba3 1302 	umull	r1, r3, r3, r2
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	2164      	movs	r1, #100	; 0x64
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	3332      	adds	r3, #50	; 0x32
 8004242:	4a07      	ldr	r2, [pc, #28]	; (8004260 <UART_SetConfig+0x354>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	4433      	add	r3, r6
 8004250:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004252:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004254:	e192      	b.n	800457c <UART_SetConfig+0x670>
 8004256:	bf00      	nop
 8004258:	40011000 	.word	0x40011000
 800425c:	40011400 	.word	0x40011400
 8004260:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004264:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4bc1      	ldr	r3, [pc, #772]	; (8004570 <UART_SetConfig+0x664>)
 800426a:	429a      	cmp	r2, r3
 800426c:	d005      	beq.n	800427a <UART_SetConfig+0x36e>
 800426e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4bc0      	ldr	r3, [pc, #768]	; (8004574 <UART_SetConfig+0x668>)
 8004274:	429a      	cmp	r2, r3
 8004276:	f040 80bf 	bne.w	80043f8 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 800427a:	f7ff fa7b 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 800427e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004282:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004284:	681e      	ldr	r6, [r3, #0]
 8004286:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800428a:	4619      	mov	r1, r3
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	460b      	mov	r3, r1
 8004292:	4614      	mov	r4, r2
 8004294:	18db      	adds	r3, r3, r3
 8004296:	eb44 0404 	adc.w	r4, r4, r4
 800429a:	185b      	adds	r3, r3, r1
 800429c:	eb44 0402 	adc.w	r4, r4, r2
 80042a0:	00e0      	lsls	r0, r4, #3
 80042a2:	6278      	str	r0, [r7, #36]	; 0x24
 80042a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042a6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80042aa:	6278      	str	r0, [r7, #36]	; 0x24
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	623b      	str	r3, [r7, #32]
 80042b0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80042b4:	eb13 0801 	adds.w	r8, r3, r1
 80042b8:	eb44 0902 	adc.w	r9, r4, r2
 80042bc:	4640      	mov	r0, r8
 80042be:	4649      	mov	r1, r9
 80042c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f04f 0400 	mov.w	r4, #0
 80042c8:	00a2      	lsls	r2, r4, #2
 80042ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80042cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042ce:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80042d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80042d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042dc:	f7fb ffc8 	bl	8000270 <__aeabi_uldivmod>
 80042e0:	4603      	mov	r3, r0
 80042e2:	460c      	mov	r4, r1
 80042e4:	461a      	mov	r2, r3
 80042e6:	4ba4      	ldr	r3, [pc, #656]	; (8004578 <UART_SetConfig+0x66c>)
 80042e8:	fba3 2302 	umull	r2, r3, r3, r2
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	011d      	lsls	r5, r3, #4
 80042f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042f4:	4619      	mov	r1, r3
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4614      	mov	r4, r2
 80042fe:	18db      	adds	r3, r3, r3
 8004300:	eb44 0404 	adc.w	r4, r4, r4
 8004304:	185b      	adds	r3, r3, r1
 8004306:	eb44 0402 	adc.w	r4, r4, r2
 800430a:	00e0      	lsls	r0, r4, #3
 800430c:	61f8      	str	r0, [r7, #28]
 800430e:	69f8      	ldr	r0, [r7, #28]
 8004310:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004314:	61f8      	str	r0, [r7, #28]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800431e:	eb13 0801 	adds.w	r8, r3, r1
 8004322:	eb44 0902 	adc.w	r9, r4, r2
 8004326:	4640      	mov	r0, r8
 8004328:	4649      	mov	r1, r9
 800432a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f04f 0400 	mov.w	r4, #0
 8004332:	00a2      	lsls	r2, r4, #2
 8004334:	657a      	str	r2, [r7, #84]	; 0x54
 8004336:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004338:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800433c:	657a      	str	r2, [r7, #84]	; 0x54
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	653b      	str	r3, [r7, #80]	; 0x50
 8004342:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004346:	f7fb ff93 	bl	8000270 <__aeabi_uldivmod>
 800434a:	4603      	mov	r3, r0
 800434c:	460c      	mov	r4, r1
 800434e:	461a      	mov	r2, r3
 8004350:	4b89      	ldr	r3, [pc, #548]	; (8004578 <UART_SetConfig+0x66c>)
 8004352:	fba3 1302 	umull	r1, r3, r3, r2
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	2164      	movs	r1, #100	; 0x64
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	3332      	adds	r3, #50	; 0x32
 8004364:	4a84      	ldr	r2, [pc, #528]	; (8004578 <UART_SetConfig+0x66c>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004370:	441d      	add	r5, r3
 8004372:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004376:	4619      	mov	r1, r3
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	460b      	mov	r3, r1
 800437e:	4614      	mov	r4, r2
 8004380:	18db      	adds	r3, r3, r3
 8004382:	eb44 0404 	adc.w	r4, r4, r4
 8004386:	185b      	adds	r3, r3, r1
 8004388:	eb44 0402 	adc.w	r4, r4, r2
 800438c:	00e0      	lsls	r0, r4, #3
 800438e:	6178      	str	r0, [r7, #20]
 8004390:	6978      	ldr	r0, [r7, #20]
 8004392:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004396:	6178      	str	r0, [r7, #20]
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80043a0:	eb13 0801 	adds.w	r8, r3, r1
 80043a4:	eb44 0902 	adc.w	r9, r4, r2
 80043a8:	4640      	mov	r0, r8
 80043aa:	4649      	mov	r1, r9
 80043ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f04f 0400 	mov.w	r4, #0
 80043b4:	00a2      	lsls	r2, r4, #2
 80043b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80043b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043ba:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80043be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043c8:	f7fb ff52 	bl	8000270 <__aeabi_uldivmod>
 80043cc:	4603      	mov	r3, r0
 80043ce:	460c      	mov	r4, r1
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b69      	ldr	r3, [pc, #420]	; (8004578 <UART_SetConfig+0x66c>)
 80043d4:	fba3 1302 	umull	r1, r3, r3, r2
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	2164      	movs	r1, #100	; 0x64
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	3332      	adds	r3, #50	; 0x32
 80043e6:	4a64      	ldr	r2, [pc, #400]	; (8004578 <UART_SetConfig+0x66c>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	442b      	add	r3, r5
 80043f4:	60b3      	str	r3, [r6, #8]
 80043f6:	e0c1      	b.n	800457c <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043f8:	f7ff f9a8 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 80043fc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004400:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	65bb      	str	r3, [r7, #88]	; 0x58
 8004406:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800440a:	4619      	mov	r1, r3
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	460b      	mov	r3, r1
 8004412:	4614      	mov	r4, r2
 8004414:	18db      	adds	r3, r3, r3
 8004416:	eb44 0404 	adc.w	r4, r4, r4
 800441a:	185b      	adds	r3, r3, r1
 800441c:	eb44 0402 	adc.w	r4, r4, r2
 8004420:	00e6      	lsls	r6, r4, #3
 8004422:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8004426:	00dd      	lsls	r5, r3, #3
 8004428:	462b      	mov	r3, r5
 800442a:	4634      	mov	r4, r6
 800442c:	185d      	adds	r5, r3, r1
 800442e:	eb44 0602 	adc.w	r6, r4, r2
 8004432:	4628      	mov	r0, r5
 8004434:	4631      	mov	r1, r6
 8004436:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f04f 0400 	mov.w	r4, #0
 800443e:	00a5      	lsls	r5, r4, #2
 8004440:	677d      	str	r5, [r7, #116]	; 0x74
 8004442:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8004444:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8004448:	677d      	str	r5, [r7, #116]	; 0x74
 800444a:	009c      	lsls	r4, r3, #2
 800444c:	673c      	str	r4, [r7, #112]	; 0x70
 800444e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004452:	f7fb ff0d 	bl	8000270 <__aeabi_uldivmod>
 8004456:	4603      	mov	r3, r0
 8004458:	460c      	mov	r4, r1
 800445a:	461a      	mov	r2, r3
 800445c:	4b46      	ldr	r3, [pc, #280]	; (8004578 <UART_SetConfig+0x66c>)
 800445e:	fba3 1302 	umull	r1, r3, r3, r2
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	011d      	lsls	r5, r3, #4
 8004466:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800446a:	4619      	mov	r1, r3
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	460b      	mov	r3, r1
 8004472:	4614      	mov	r4, r2
 8004474:	18db      	adds	r3, r3, r3
 8004476:	eb44 0404 	adc.w	r4, r4, r4
 800447a:	185b      	adds	r3, r3, r1
 800447c:	eb44 0402 	adc.w	r4, r4, r2
 8004480:	00e0      	lsls	r0, r4, #3
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	00d8      	lsls	r0, r3, #3
 800448e:	60b8      	str	r0, [r7, #8]
 8004490:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004494:	eb13 0801 	adds.w	r8, r3, r1
 8004498:	eb44 0902 	adc.w	r9, r4, r2
 800449c:	4640      	mov	r0, r8
 800449e:	4649      	mov	r1, r9
 80044a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f04f 0400 	mov.w	r4, #0
 80044a8:	00a6      	lsls	r6, r4, #2
 80044aa:	66fe      	str	r6, [r7, #108]	; 0x6c
 80044ac:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 80044ae:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80044b2:	66fe      	str	r6, [r7, #108]	; 0x6c
 80044b4:	009c      	lsls	r4, r3, #2
 80044b6:	66bc      	str	r4, [r7, #104]	; 0x68
 80044b8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80044bc:	f7fb fed8 	bl	8000270 <__aeabi_uldivmod>
 80044c0:	4603      	mov	r3, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b2c      	ldr	r3, [pc, #176]	; (8004578 <UART_SetConfig+0x66c>)
 80044c8:	fba3 1302 	umull	r1, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	2164      	movs	r1, #100	; 0x64
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	3332      	adds	r3, #50	; 0x32
 80044da:	4a27      	ldr	r2, [pc, #156]	; (8004578 <UART_SetConfig+0x66c>)
 80044dc:	fba2 1303 	umull	r1, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e6:	441d      	add	r5, r3
 80044e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044ec:	4619      	mov	r1, r3
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4614      	mov	r4, r2
 80044f6:	18db      	adds	r3, r3, r3
 80044f8:	eb44 0404 	adc.w	r4, r4, r4
 80044fc:	185b      	adds	r3, r3, r1
 80044fe:	eb44 0402 	adc.w	r4, r4, r2
 8004502:	00e0      	lsls	r0, r4, #3
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	00d8      	lsls	r0, r3, #3
 8004510:	6038      	str	r0, [r7, #0]
 8004512:	e897 0018 	ldmia.w	r7, {r3, r4}
 8004516:	eb13 0801 	adds.w	r8, r3, r1
 800451a:	eb44 0902 	adc.w	r9, r4, r2
 800451e:	4640      	mov	r0, r8
 8004520:	4649      	mov	r1, r9
 8004522:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f04f 0400 	mov.w	r4, #0
 800452a:	00a6      	lsls	r6, r4, #2
 800452c:	667e      	str	r6, [r7, #100]	; 0x64
 800452e:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8004530:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8004534:	667e      	str	r6, [r7, #100]	; 0x64
 8004536:	009c      	lsls	r4, r3, #2
 8004538:	663c      	str	r4, [r7, #96]	; 0x60
 800453a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800453e:	f7fb fe97 	bl	8000270 <__aeabi_uldivmod>
 8004542:	4603      	mov	r3, r0
 8004544:	460c      	mov	r4, r1
 8004546:	461a      	mov	r2, r3
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <UART_SetConfig+0x66c>)
 800454a:	fba3 1302 	umull	r1, r3, r3, r2
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	2164      	movs	r1, #100	; 0x64
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	3332      	adds	r3, #50	; 0x32
 800455c:	4a06      	ldr	r2, [pc, #24]	; (8004578 <UART_SetConfig+0x66c>)
 800455e:	fba2 1303 	umull	r1, r3, r2, r3
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	442b      	add	r3, r5
 800456a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800456c:	6093      	str	r3, [r2, #8]
}
 800456e:	e005      	b.n	800457c <UART_SetConfig+0x670>
 8004570:	40011000 	.word	0x40011000
 8004574:	40011400 	.word	0x40011400
 8004578:	51eb851f 	.word	0x51eb851f
 800457c:	bf00      	nop
 800457e:	378c      	adds	r7, #140	; 0x8c
 8004580:	46bd      	mov	sp, r7
 8004582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004586:	bf00      	nop

08004588 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800459e:	f3ef 8305 	mrs	r3, IPSR
 80045a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80045a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10f      	bne.n	80045ca <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045aa:	f3ef 8310 	mrs	r3, PRIMASK
 80045ae:	607b      	str	r3, [r7, #4]
  return(result);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d105      	bne.n	80045c2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045b6:	f3ef 8311 	mrs	r3, BASEPRI
 80045ba:	603b      	str	r3, [r7, #0]
  return(result);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <osKernelInitialize+0x3a>
 80045c2:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <osKernelInitialize+0x64>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d103      	bne.n	80045d2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80045ca:	f06f 0305 	mvn.w	r3, #5
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e00c      	b.n	80045ec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045d2:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <osKernelInitialize+0x64>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <osKernelInitialize+0x64>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e002      	b.n	80045ec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80045e6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045ec:	68fb      	ldr	r3, [r7, #12]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000198 	.word	0x20000198

08004600 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004606:	f3ef 8305 	mrs	r3, IPSR
 800460a:	60bb      	str	r3, [r7, #8]
  return(result);
 800460c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10f      	bne.n	8004632 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004612:	f3ef 8310 	mrs	r3, PRIMASK
 8004616:	607b      	str	r3, [r7, #4]
  return(result);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d105      	bne.n	800462a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800461e:	f3ef 8311 	mrs	r3, BASEPRI
 8004622:	603b      	str	r3, [r7, #0]
  return(result);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <osKernelStart+0x3a>
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <osKernelStart+0x68>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d103      	bne.n	800463a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004632:	f06f 0305 	mvn.w	r3, #5
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	e010      	b.n	800465c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800463a:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <osKernelStart+0x68>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d109      	bne.n	8004656 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004642:	f7ff ffa1 	bl	8004588 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004646:	4b08      	ldr	r3, [pc, #32]	; (8004668 <osKernelStart+0x68>)
 8004648:	2202      	movs	r2, #2
 800464a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800464c:	f001 fdb0 	bl	80061b0 <vTaskStartScheduler>
      stat = osOK;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e002      	b.n	800465c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004656:	f04f 33ff 	mov.w	r3, #4294967295
 800465a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800465c:	68fb      	ldr	r3, [r7, #12]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000198 	.word	0x20000198

0800466c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b090      	sub	sp, #64	; 0x40
 8004670:	af04      	add	r7, sp, #16
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004678:	2300      	movs	r3, #0
 800467a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800467c:	f3ef 8305 	mrs	r3, IPSR
 8004680:	61fb      	str	r3, [r7, #28]
  return(result);
 8004682:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 808f 	bne.w	80047a8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468a:	f3ef 8310 	mrs	r3, PRIMASK
 800468e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d105      	bne.n	80046a2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004696:	f3ef 8311 	mrs	r3, BASEPRI
 800469a:	617b      	str	r3, [r7, #20]
  return(result);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <osThreadNew+0x3e>
 80046a2:	4b44      	ldr	r3, [pc, #272]	; (80047b4 <osThreadNew+0x148>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d07e      	beq.n	80047a8 <osThreadNew+0x13c>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d07b      	beq.n	80047a8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80046b4:	2318      	movs	r3, #24
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80046bc:	f04f 33ff 	mov.w	r3, #4294967295
 80046c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d045      	beq.n	8004754 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <osThreadNew+0x6a>
        name = attr->name;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <osThreadNew+0x90>
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	2b38      	cmp	r3, #56	; 0x38
 80046ee:	d805      	bhi.n	80046fc <osThreadNew+0x90>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <osThreadNew+0x94>
        return (NULL);
 80046fc:	2300      	movs	r3, #0
 80046fe:	e054      	b.n	80047aa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	089b      	lsrs	r3, r3, #2
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00e      	beq.n	8004736 <osThreadNew+0xca>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b5b      	cmp	r3, #91	; 0x5b
 800471e:	d90a      	bls.n	8004736 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004724:	2b00      	cmp	r3, #0
 8004726:	d006      	beq.n	8004736 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <osThreadNew+0xca>
        mem = 1;
 8004730:	2301      	movs	r3, #1
 8004732:	623b      	str	r3, [r7, #32]
 8004734:	e010      	b.n	8004758 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10c      	bne.n	8004758 <osThreadNew+0xec>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d108      	bne.n	8004758 <osThreadNew+0xec>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <osThreadNew+0xec>
          mem = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	e001      	b.n	8004758 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d110      	bne.n	8004780 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004766:	9202      	str	r2, [sp, #8]
 8004768:	9301      	str	r3, [sp, #4]
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f001 fb49 	bl	8005e0c <xTaskCreateStatic>
 800477a:	4603      	mov	r3, r0
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	e013      	b.n	80047a8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d110      	bne.n	80047a8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	b29a      	uxth	r2, r3
 800478a:	f107 0310 	add.w	r3, r7, #16
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f001 fb91 	bl	8005ec0 <xTaskCreate>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d001      	beq.n	80047a8 <osThreadNew+0x13c>
          hTask = NULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047a8:	693b      	ldr	r3, [r7, #16]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3730      	adds	r7, #48	; 0x30
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000198 	.word	0x20000198

080047b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047c0:	f3ef 8305 	mrs	r3, IPSR
 80047c4:	613b      	str	r3, [r7, #16]
  return(result);
 80047c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10f      	bne.n	80047ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047cc:	f3ef 8310 	mrs	r3, PRIMASK
 80047d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047d8:	f3ef 8311 	mrs	r3, BASEPRI
 80047dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <osDelay+0x3c>
 80047e4:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <osDelay+0x58>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d103      	bne.n	80047f4 <osDelay+0x3c>
    stat = osErrorISR;
 80047ec:	f06f 0305 	mvn.w	r3, #5
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	e007      	b.n	8004804 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <osDelay+0x4c>
      vTaskDelay(ticks);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 fca2 	bl	8006148 <vTaskDelay>
    }
  }

  return (stat);
 8004804:	697b      	ldr	r3, [r7, #20]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000198 	.word	0x20000198

08004814 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b08a      	sub	sp, #40	; 0x28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004820:	f3ef 8305 	mrs	r3, IPSR
 8004824:	613b      	str	r3, [r7, #16]
  return(result);
 8004826:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004828:	2b00      	cmp	r3, #0
 800482a:	f040 8085 	bne.w	8004938 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800482e:	f3ef 8310 	mrs	r3, PRIMASK
 8004832:	60fb      	str	r3, [r7, #12]
  return(result);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d105      	bne.n	8004846 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800483a:	f3ef 8311 	mrs	r3, BASEPRI
 800483e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <osMutexNew+0x3a>
 8004846:	4b3f      	ldr	r3, [pc, #252]	; (8004944 <osMutexNew+0x130>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d074      	beq.n	8004938 <osMutexNew+0x124>
    if (attr != NULL) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <osMutexNew+0x48>
      type = attr->attr_bits;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	623b      	str	r3, [r7, #32]
 800485a:	e001      	b.n	8004860 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <osMutexNew+0x5c>
      rmtx = 1U;
 800486a:	2301      	movs	r3, #1
 800486c:	61fb      	str	r3, [r7, #28]
 800486e:	e001      	b.n	8004874 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d15c      	bne.n	8004938 <osMutexNew+0x124>
      mem = -1;
 800487e:	f04f 33ff 	mov.w	r3, #4294967295
 8004882:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d015      	beq.n	80048b6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d006      	beq.n	80048a0 <osMutexNew+0x8c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2b4f      	cmp	r3, #79	; 0x4f
 8004898:	d902      	bls.n	80048a0 <osMutexNew+0x8c>
          mem = 1;
 800489a:	2301      	movs	r3, #1
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	e00c      	b.n	80048ba <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d108      	bne.n	80048ba <osMutexNew+0xa6>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d104      	bne.n	80048ba <osMutexNew+0xa6>
            mem = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	e001      	b.n	80048ba <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d112      	bne.n	80048e6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d007      	beq.n	80048d6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	4619      	mov	r1, r3
 80048cc:	2004      	movs	r0, #4
 80048ce:	f000 feac 	bl	800562a <xQueueCreateMutexStatic>
 80048d2:	6278      	str	r0, [r7, #36]	; 0x24
 80048d4:	e016      	b.n	8004904 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	4619      	mov	r1, r3
 80048dc:	2001      	movs	r0, #1
 80048de:	f000 fea4 	bl	800562a <xQueueCreateMutexStatic>
 80048e2:	6278      	str	r0, [r7, #36]	; 0x24
 80048e4:	e00e      	b.n	8004904 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10b      	bne.n	8004904 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d004      	beq.n	80048fc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80048f2:	2004      	movs	r0, #4
 80048f4:	f000 fe81 	bl	80055fa <xQueueCreateMutex>
 80048f8:	6278      	str	r0, [r7, #36]	; 0x24
 80048fa:	e003      	b.n	8004904 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80048fc:	2001      	movs	r0, #1
 80048fe:	f000 fe7c 	bl	80055fa <xQueueCreateMutex>
 8004902:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00c      	beq.n	8004924 <osMutexNew+0x110>
        if (attr != NULL) {
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <osMutexNew+0x104>
          name = attr->name;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e001      	b.n	800491c <osMutexNew+0x108>
        } else {
          name = NULL;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800491c:	6979      	ldr	r1, [r7, #20]
 800491e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004920:	f001 fa18 	bl	8005d54 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	2b00      	cmp	r3, #0
 8004928:	d006      	beq.n	8004938 <osMutexNew+0x124>
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800493a:	4618      	mov	r0, r3
 800493c:	3728      	adds	r7, #40	; 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000198 	.word	0x20000198

08004948 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4a07      	ldr	r2, [pc, #28]	; (8004974 <vApplicationGetIdleTaskMemory+0x2c>)
 8004958:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4a06      	ldr	r2, [pc, #24]	; (8004978 <vApplicationGetIdleTaskMemory+0x30>)
 800495e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2280      	movs	r2, #128	; 0x80
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	2000019c 	.word	0x2000019c
 8004978:	200001f8 	.word	0x200001f8

0800497c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a07      	ldr	r2, [pc, #28]	; (80049a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800498c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4a06      	ldr	r2, [pc, #24]	; (80049ac <vApplicationGetTimerTaskMemory+0x30>)
 8004992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800499a:	601a      	str	r2, [r3, #0]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	200003f8 	.word	0x200003f8
 80049ac:	20000454 	.word	0x20000454

080049b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f103 0208 	add.w	r2, r3, #8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f04f 32ff 	mov.w	r2, #4294967295
 80049c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f103 0208 	add.w	r2, r3, #8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f103 0208 	add.w	r2, r3, #8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	601a      	str	r2, [r3, #0]
}
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a52:	b480      	push	{r7}
 8004a54:	b085      	sub	sp, #20
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d103      	bne.n	8004a72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	e00c      	b.n	8004a8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3308      	adds	r3, #8
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e002      	b.n	8004a80 <vListInsert+0x2e>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d9f6      	bls.n	8004a7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6892      	ldr	r2, [r2, #8]
 8004ada:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6852      	ldr	r2, [r2, #4]
 8004ae4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d103      	bne.n	8004af8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	1e5a      	subs	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3b04      	subs	r3, #4
 8004b28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3b04      	subs	r3, #4
 8004b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f023 0201 	bic.w	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3b04      	subs	r3, #4
 8004b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b48:	4a0c      	ldr	r2, [pc, #48]	; (8004b7c <pxPortInitialiseStack+0x64>)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3b14      	subs	r3, #20
 8004b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3b04      	subs	r3, #4
 8004b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f06f 0202 	mvn.w	r2, #2
 8004b66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3b20      	subs	r3, #32
 8004b6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	08004b81 	.word	0x08004b81

08004b80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b8a:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <prvTaskExitError+0x50>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d009      	beq.n	8004ba8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	e7fe      	b.n	8004ba6 <prvTaskExitError+0x26>
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bba:	bf00      	nop
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0fc      	beq.n	8004bbc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bc2:	bf00      	nop
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20000010 	.word	0x20000010
	...

08004be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <pxCurrentTCBConst2>)
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	6808      	ldr	r0, [r1, #0]
 8004be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bea:	f380 8809 	msr	PSP, r0
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f380 8811 	msr	BASEPRI, r0
 8004bfa:	4770      	bx	lr
 8004bfc:	f3af 8000 	nop.w

08004c00 <pxCurrentTCBConst2>:
 8004c00:	20004474 	.word	0x20004474
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop

08004c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c08:	4808      	ldr	r0, [pc, #32]	; (8004c2c <prvPortStartFirstTask+0x24>)
 8004c0a:	6800      	ldr	r0, [r0, #0]
 8004c0c:	6800      	ldr	r0, [r0, #0]
 8004c0e:	f380 8808 	msr	MSP, r0
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8814 	msr	CONTROL, r0
 8004c1a:	b662      	cpsie	i
 8004c1c:	b661      	cpsie	f
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	df00      	svc	0
 8004c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c2a:	bf00      	nop
 8004c2c:	e000ed08 	.word	0xe000ed08

08004c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c36:	4b44      	ldr	r3, [pc, #272]	; (8004d48 <xPortStartScheduler+0x118>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a44      	ldr	r2, [pc, #272]	; (8004d4c <xPortStartScheduler+0x11c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d109      	bne.n	8004c54 <xPortStartScheduler+0x24>
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	e7fe      	b.n	8004c52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c54:	4b3c      	ldr	r3, [pc, #240]	; (8004d48 <xPortStartScheduler+0x118>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a3d      	ldr	r2, [pc, #244]	; (8004d50 <xPortStartScheduler+0x120>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d109      	bne.n	8004c72 <xPortStartScheduler+0x42>
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e7fe      	b.n	8004c70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c72:	4b38      	ldr	r3, [pc, #224]	; (8004d54 <xPortStartScheduler+0x124>)
 8004c74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	22ff      	movs	r2, #255	; 0xff
 8004c82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	4b30      	ldr	r3, [pc, #192]	; (8004d58 <xPortStartScheduler+0x128>)
 8004c98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c9a:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <xPortStartScheduler+0x12c>)
 8004c9c:	2207      	movs	r2, #7
 8004c9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ca0:	e009      	b.n	8004cb6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004ca2:	4b2e      	ldr	r3, [pc, #184]	; (8004d5c <xPortStartScheduler+0x12c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	4a2c      	ldr	r2, [pc, #176]	; (8004d5c <xPortStartScheduler+0x12c>)
 8004caa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbe:	2b80      	cmp	r3, #128	; 0x80
 8004cc0:	d0ef      	beq.n	8004ca2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cc2:	4b26      	ldr	r3, [pc, #152]	; (8004d5c <xPortStartScheduler+0x12c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f1c3 0307 	rsb	r3, r3, #7
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d009      	beq.n	8004ce2 <xPortStartScheduler+0xb2>
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	60bb      	str	r3, [r7, #8]
 8004ce0:	e7fe      	b.n	8004ce0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ce2:	4b1e      	ldr	r3, [pc, #120]	; (8004d5c <xPortStartScheduler+0x12c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	4a1c      	ldr	r2, [pc, #112]	; (8004d5c <xPortStartScheduler+0x12c>)
 8004cea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cec:	4b1b      	ldr	r3, [pc, #108]	; (8004d5c <xPortStartScheduler+0x12c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cf4:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <xPortStartScheduler+0x12c>)
 8004cf6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d00:	4a17      	ldr	r2, [pc, #92]	; (8004d60 <xPortStartScheduler+0x130>)
 8004d02:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <xPortStartScheduler+0x130>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d0c:	4a14      	ldr	r2, [pc, #80]	; (8004d60 <xPortStartScheduler+0x130>)
 8004d0e:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <xPortStartScheduler+0x130>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d18:	f000 f8d6 	bl	8004ec8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d1c:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <xPortStartScheduler+0x134>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d22:	f000 f8f5 	bl	8004f10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d26:	4a10      	ldr	r2, [pc, #64]	; (8004d68 <xPortStartScheduler+0x138>)
 8004d28:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <xPortStartScheduler+0x138>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d32:	f7ff ff69 	bl	8004c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d36:	f001 fc11 	bl	800655c <vTaskSwitchContext>
	prvTaskExitError();
 8004d3a:	f7ff ff21 	bl	8004b80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	e000ed00 	.word	0xe000ed00
 8004d4c:	410fc271 	.word	0x410fc271
 8004d50:	410fc270 	.word	0x410fc270
 8004d54:	e000e400 	.word	0xe000e400
 8004d58:	20000854 	.word	0x20000854
 8004d5c:	20000858 	.word	0x20000858
 8004d60:	e000ed20 	.word	0xe000ed20
 8004d64:	20000010 	.word	0x20000010
 8004d68:	e000ef34 	.word	0xe000ef34

08004d6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d84:	4b0e      	ldr	r3, [pc, #56]	; (8004dc0 <vPortEnterCritical+0x54>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	4a0d      	ldr	r2, [pc, #52]	; (8004dc0 <vPortEnterCritical+0x54>)
 8004d8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <vPortEnterCritical+0x54>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d10e      	bne.n	8004db4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <vPortEnterCritical+0x58>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d009      	beq.n	8004db4 <vPortEnterCritical+0x48>
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	603b      	str	r3, [r7, #0]
 8004db2:	e7fe      	b.n	8004db2 <vPortEnterCritical+0x46>
	}
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	20000010 	.word	0x20000010
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dce:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <vPortExitCritical+0x4c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <vPortExitCritical+0x22>
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	607b      	str	r3, [r7, #4]
 8004de8:	e7fe      	b.n	8004de8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004dea:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <vPortExitCritical+0x4c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	4a08      	ldr	r2, [pc, #32]	; (8004e14 <vPortExitCritical+0x4c>)
 8004df2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004df4:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <vPortExitCritical+0x4c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d104      	bne.n	8004e06 <vPortExitCritical+0x3e>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000010 	.word	0x20000010
	...

08004e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e20:	f3ef 8009 	mrs	r0, PSP
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <pxCurrentTCBConst>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	f01e 0f10 	tst.w	lr, #16
 8004e30:	bf08      	it	eq
 8004e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3a:	6010      	str	r0, [r2, #0]
 8004e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e44:	f380 8811 	msr	BASEPRI, r0
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f001 fb84 	bl	800655c <vTaskSwitchContext>
 8004e54:	f04f 0000 	mov.w	r0, #0
 8004e58:	f380 8811 	msr	BASEPRI, r0
 8004e5c:	bc09      	pop	{r0, r3}
 8004e5e:	6819      	ldr	r1, [r3, #0]
 8004e60:	6808      	ldr	r0, [r1, #0]
 8004e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e66:	f01e 0f10 	tst.w	lr, #16
 8004e6a:	bf08      	it	eq
 8004e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e70:	f380 8809 	msr	PSP, r0
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	f3af 8000 	nop.w

08004e80 <pxCurrentTCBConst>:
 8004e80:	20004474 	.word	0x20004474
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop

08004e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ea0:	f001 faa4 	bl	80063ec <xTaskIncrementTick>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004eaa:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <xPortSysTickHandler+0x3c>)
 8004eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <vPortSetupTimerInterrupt+0x34>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ed2:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <vPortSetupTimerInterrupt+0x38>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ed8:	4a0a      	ldr	r2, [pc, #40]	; (8004f04 <vPortSetupTimerInterrupt+0x3c>)
 8004eda:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <vPortSetupTimerInterrupt+0x40>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	490b      	ldr	r1, [pc, #44]	; (8004f0c <vPortSetupTimerInterrupt+0x44>)
 8004ee0:	fba1 1303 	umull	r1, r3, r1, r3
 8004ee4:	099b      	lsrs	r3, r3, #6
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004eea:	4b04      	ldr	r3, [pc, #16]	; (8004efc <vPortSetupTimerInterrupt+0x34>)
 8004eec:	2207      	movs	r2, #7
 8004eee:	601a      	str	r2, [r3, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	e000e010 	.word	0xe000e010
 8004f00:	e000e018 	.word	0xe000e018
 8004f04:	e000e014 	.word	0xe000e014
 8004f08:	20000004 	.word	0x20000004
 8004f0c:	10624dd3 	.word	0x10624dd3

08004f10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f20 <vPortEnableVFP+0x10>
 8004f14:	6801      	ldr	r1, [r0, #0]
 8004f16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f1a:	6001      	str	r1, [r0, #0]
 8004f1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f1e:	bf00      	nop
 8004f20:	e000ed88 	.word	0xe000ed88

08004f24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f2a:	f3ef 8305 	mrs	r3, IPSR
 8004f2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b0f      	cmp	r3, #15
 8004f34:	d913      	bls.n	8004f5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f36:	4a16      	ldr	r2, [pc, #88]	; (8004f90 <vPortValidateInterruptPriority+0x6c>)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f40:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <vPortValidateInterruptPriority+0x70>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	7afa      	ldrb	r2, [r7, #11]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d209      	bcs.n	8004f5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	607b      	str	r3, [r7, #4]
 8004f5c:	e7fe      	b.n	8004f5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f5e:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <vPortValidateInterruptPriority+0x74>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <vPortValidateInterruptPriority+0x78>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d909      	bls.n	8004f82 <vPortValidateInterruptPriority+0x5e>
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	e7fe      	b.n	8004f80 <vPortValidateInterruptPriority+0x5c>
	}
 8004f82:	bf00      	nop
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	e000e3f0 	.word	0xe000e3f0
 8004f94:	20000854 	.word	0x20000854
 8004f98:	e000ed0c 	.word	0xe000ed0c
 8004f9c:	20000858 	.word	0x20000858

08004fa0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08a      	sub	sp, #40	; 0x28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fac:	f001 f964 	bl	8006278 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fb0:	4b57      	ldr	r3, [pc, #348]	; (8005110 <pvPortMalloc+0x170>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fb8:	f000 f90c 	bl	80051d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fbc:	4b55      	ldr	r3, [pc, #340]	; (8005114 <pvPortMalloc+0x174>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f040 808c 	bne.w	80050e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01c      	beq.n	800500a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d013      	beq.n	800500a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f023 0307 	bic.w	r3, r3, #7
 8004fe8:	3308      	adds	r3, #8
 8004fea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <pvPortMalloc+0x6a>
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	e7fe      	b.n	8005008 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d068      	beq.n	80050e2 <pvPortMalloc+0x142>
 8005010:	4b41      	ldr	r3, [pc, #260]	; (8005118 <pvPortMalloc+0x178>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	429a      	cmp	r2, r3
 8005018:	d863      	bhi.n	80050e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800501a:	4b40      	ldr	r3, [pc, #256]	; (800511c <pvPortMalloc+0x17c>)
 800501c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800501e:	4b3f      	ldr	r3, [pc, #252]	; (800511c <pvPortMalloc+0x17c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005024:	e004      	b.n	8005030 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	429a      	cmp	r2, r3
 8005038:	d203      	bcs.n	8005042 <pvPortMalloc+0xa2>
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f1      	bne.n	8005026 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005042:	4b33      	ldr	r3, [pc, #204]	; (8005110 <pvPortMalloc+0x170>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005048:	429a      	cmp	r2, r3
 800504a:	d04a      	beq.n	80050e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2208      	movs	r2, #8
 8005052:	4413      	add	r3, r2
 8005054:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	1ad2      	subs	r2, r2, r3
 8005066:	2308      	movs	r3, #8
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	429a      	cmp	r2, r3
 800506c:	d91e      	bls.n	80050ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800506e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4413      	add	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	2b00      	cmp	r3, #0
 800507e:	d009      	beq.n	8005094 <pvPortMalloc+0xf4>
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	e7fe      	b.n	8005092 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	1ad2      	subs	r2, r2, r3
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050a6:	69b8      	ldr	r0, [r7, #24]
 80050a8:	f000 f8f6 	bl	8005298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050ac:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <pvPortMalloc+0x178>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	4a18      	ldr	r2, [pc, #96]	; (8005118 <pvPortMalloc+0x178>)
 80050b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050ba:	4b17      	ldr	r3, [pc, #92]	; (8005118 <pvPortMalloc+0x178>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4b18      	ldr	r3, [pc, #96]	; (8005120 <pvPortMalloc+0x180>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d203      	bcs.n	80050ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050c6:	4b14      	ldr	r3, [pc, #80]	; (8005118 <pvPortMalloc+0x178>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a15      	ldr	r2, [pc, #84]	; (8005120 <pvPortMalloc+0x180>)
 80050cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	4b10      	ldr	r3, [pc, #64]	; (8005114 <pvPortMalloc+0x174>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050e2:	f001 f8d7 	bl	8006294 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d009      	beq.n	8005104 <pvPortMalloc+0x164>
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	e7fe      	b.n	8005102 <pvPortMalloc+0x162>
	return pvReturn;
 8005104:	69fb      	ldr	r3, [r7, #28]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3728      	adds	r7, #40	; 0x28
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20004464 	.word	0x20004464
 8005114:	20004470 	.word	0x20004470
 8005118:	20004468 	.word	0x20004468
 800511c:	2000445c 	.word	0x2000445c
 8005120:	2000446c 	.word	0x2000446c

08005124 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d046      	beq.n	80051c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005136:	2308      	movs	r3, #8
 8005138:	425b      	negs	r3, r3
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4413      	add	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	4b20      	ldr	r3, [pc, #128]	; (80051cc <vPortFree+0xa8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4013      	ands	r3, r2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <vPortFree+0x42>
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	e7fe      	b.n	8005164 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <vPortFree+0x5e>
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	e7fe      	b.n	8005180 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	4b11      	ldr	r3, [pc, #68]	; (80051cc <vPortFree+0xa8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4013      	ands	r3, r2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d019      	beq.n	80051c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d115      	bne.n	80051c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <vPortFree+0xa8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	43db      	mvns	r3, r3
 80051a2:	401a      	ands	r2, r3
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051a8:	f001 f866 	bl	8006278 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <vPortFree+0xac>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4413      	add	r3, r2
 80051b6:	4a06      	ldr	r2, [pc, #24]	; (80051d0 <vPortFree+0xac>)
 80051b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051ba:	6938      	ldr	r0, [r7, #16]
 80051bc:	f000 f86c 	bl	8005298 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80051c0:	f001 f868 	bl	8006294 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051c4:	bf00      	nop
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20004470 	.word	0x20004470
 80051d0:	20004468 	.word	0x20004468

080051d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80051de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051e0:	4b27      	ldr	r3, [pc, #156]	; (8005280 <prvHeapInit+0xac>)
 80051e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00c      	beq.n	8005208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3307      	adds	r3, #7
 80051f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0307 	bic.w	r3, r3, #7
 80051fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <prvHeapInit+0xac>)
 8005204:	4413      	add	r3, r2
 8005206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800520c:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <prvHeapInit+0xb0>)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005212:	4b1c      	ldr	r3, [pc, #112]	; (8005284 <prvHeapInit+0xb0>)
 8005214:	2200      	movs	r2, #0
 8005216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4413      	add	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005220:	2208      	movs	r2, #8
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0307 	bic.w	r3, r3, #7
 800522e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4a15      	ldr	r2, [pc, #84]	; (8005288 <prvHeapInit+0xb4>)
 8005234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005236:	4b14      	ldr	r3, [pc, #80]	; (8005288 <prvHeapInit+0xb4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2200      	movs	r2, #0
 800523c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <prvHeapInit+0xb4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <prvHeapInit+0xb4>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	4a0a      	ldr	r2, [pc, #40]	; (800528c <prvHeapInit+0xb8>)
 8005262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4a09      	ldr	r2, [pc, #36]	; (8005290 <prvHeapInit+0xbc>)
 800526a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <prvHeapInit+0xc0>)
 800526e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	2000085c 	.word	0x2000085c
 8005284:	2000445c 	.word	0x2000445c
 8005288:	20004464 	.word	0x20004464
 800528c:	2000446c 	.word	0x2000446c
 8005290:	20004468 	.word	0x20004468
 8005294:	20004470 	.word	0x20004470

08005298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052a0:	4b28      	ldr	r3, [pc, #160]	; (8005344 <prvInsertBlockIntoFreeList+0xac>)
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e002      	b.n	80052ac <prvInsertBlockIntoFreeList+0x14>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d3f7      	bcc.n	80052a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	441a      	add	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d108      	bne.n	80052da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	441a      	add	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	441a      	add	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d118      	bne.n	8005320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4b15      	ldr	r3, [pc, #84]	; (8005348 <prvInsertBlockIntoFreeList+0xb0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d00d      	beq.n	8005316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	441a      	add	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	e008      	b.n	8005328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <prvInsertBlockIntoFreeList+0xb0>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	e003      	b.n	8005328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	d002      	beq.n	8005336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005336:	bf00      	nop
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	2000445c 	.word	0x2000445c
 8005348:	20004464 	.word	0x20004464

0800534c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d109      	bne.n	8005374 <xQueueGenericReset+0x28>
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	60bb      	str	r3, [r7, #8]
 8005372:	e7fe      	b.n	8005372 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005374:	f7ff fcfa 	bl	8004d6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005380:	68f9      	ldr	r1, [r7, #12]
 8005382:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005384:	fb01 f303 	mul.w	r3, r1, r3
 8005388:	441a      	add	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a4:	3b01      	subs	r3, #1
 80053a6:	68f9      	ldr	r1, [r7, #12]
 80053a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	441a      	add	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	22ff      	movs	r2, #255	; 0xff
 80053b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	22ff      	movs	r2, #255	; 0xff
 80053c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d114      	bne.n	80053f4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d01a      	beq.n	8005408 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3310      	adds	r3, #16
 80053d6:	4618      	mov	r0, r3
 80053d8:	f001 f96a 	bl	80066b0 <xTaskRemoveFromEventList>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d012      	beq.n	8005408 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053e2:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <xQueueGenericReset+0xcc>)
 80053e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	e009      	b.n	8005408 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3310      	adds	r3, #16
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff fad9 	bl	80049b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3324      	adds	r3, #36	; 0x24
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff fad4 	bl	80049b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005408:	f7ff fcde 	bl	8004dc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800540c:	2301      	movs	r3, #1
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	e000ed04 	.word	0xe000ed04

0800541c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08e      	sub	sp, #56	; 0x38
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d109      	bne.n	8005444 <xQueueGenericCreateStatic+0x28>
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28
 8005442:	e7fe      	b.n	8005442 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <xQueueGenericCreateStatic+0x42>
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	627b      	str	r3, [r7, #36]	; 0x24
 800545c:	e7fe      	b.n	800545c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <xQueueGenericCreateStatic+0x4e>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <xQueueGenericCreateStatic+0x52>
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <xQueueGenericCreateStatic+0x54>
 800546e:	2300      	movs	r3, #0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <xQueueGenericCreateStatic+0x6c>
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	623b      	str	r3, [r7, #32]
 8005486:	e7fe      	b.n	8005486 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d102      	bne.n	8005494 <xQueueGenericCreateStatic+0x78>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <xQueueGenericCreateStatic+0x7c>
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <xQueueGenericCreateStatic+0x7e>
 8005498:	2300      	movs	r3, #0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <xQueueGenericCreateStatic+0x96>
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	61fb      	str	r3, [r7, #28]
 80054b0:	e7fe      	b.n	80054b0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054b2:	2350      	movs	r3, #80	; 0x50
 80054b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b50      	cmp	r3, #80	; 0x50
 80054ba:	d009      	beq.n	80054d0 <xQueueGenericCreateStatic+0xb4>
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	e7fe      	b.n	80054ce <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80054d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054e4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	4613      	mov	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 f844 	bl	8005580 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3730      	adds	r7, #48	; 0x30
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005502:	b580      	push	{r7, lr}
 8005504:	b08a      	sub	sp, #40	; 0x28
 8005506:	af02      	add	r7, sp, #8
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	4613      	mov	r3, r2
 800550e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d109      	bne.n	800552a <xQueueGenericCreate+0x28>
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	e7fe      	b.n	8005528 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d102      	bne.n	8005536 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005530:	2300      	movs	r3, #0
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	e004      	b.n	8005540 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	fb02 f303 	mul.w	r3, r2, r3
 800553e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	3350      	adds	r3, #80	; 0x50
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff fd2b 	bl	8004fa0 <pvPortMalloc>
 800554a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d011      	beq.n	8005576 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	3350      	adds	r3, #80	; 0x50
 800555a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005564:	79fa      	ldrb	r2, [r7, #7]
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	4613      	mov	r3, r2
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	68b9      	ldr	r1, [r7, #8]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f805 	bl	8005580 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005576:	69bb      	ldr	r3, [r7, #24]
	}
 8005578:	4618      	mov	r0, r3
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d103      	bne.n	800559c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e002      	b.n	80055a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055ae:	2101      	movs	r1, #1
 80055b0:	69b8      	ldr	r0, [r7, #24]
 80055b2:	f7ff fecb 	bl	800534c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	78fa      	ldrb	r2, [r7, #3]
 80055ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00e      	beq.n	80055f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80055e6:	2300      	movs	r3, #0
 80055e8:	2200      	movs	r2, #0
 80055ea:	2100      	movs	r1, #0
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f837 	bl	8005660 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80055f2:	bf00      	nop
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b086      	sub	sp, #24
 80055fe:	af00      	add	r7, sp, #0
 8005600:	4603      	mov	r3, r0
 8005602:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005604:	2301      	movs	r3, #1
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	461a      	mov	r2, r3
 8005610:	6939      	ldr	r1, [r7, #16]
 8005612:	6978      	ldr	r0, [r7, #20]
 8005614:	f7ff ff75 	bl	8005502 <xQueueGenericCreate>
 8005618:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7ff ffd3 	bl	80055c6 <prvInitialiseMutex>

		return xNewQueue;
 8005620:	68fb      	ldr	r3, [r7, #12]
	}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800562a:	b580      	push	{r7, lr}
 800562c:	b088      	sub	sp, #32
 800562e:	af02      	add	r7, sp, #8
 8005630:	4603      	mov	r3, r0
 8005632:	6039      	str	r1, [r7, #0]
 8005634:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005636:	2301      	movs	r3, #1
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	2300      	movs	r3, #0
 800563c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2200      	movs	r2, #0
 8005646:	6939      	ldr	r1, [r7, #16]
 8005648:	6978      	ldr	r0, [r7, #20]
 800564a:	f7ff fee7 	bl	800541c <xQueueGenericCreateStatic>
 800564e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f7ff ffb8 	bl	80055c6 <prvInitialiseMutex>

		return xNewQueue;
 8005656:	68fb      	ldr	r3, [r7, #12]
	}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08e      	sub	sp, #56	; 0x38
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800566e:	2300      	movs	r3, #0
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	2b00      	cmp	r3, #0
 800567a:	d109      	bne.n	8005690 <xQueueGenericSend+0x30>
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
 800568e:	e7fe      	b.n	800568e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d103      	bne.n	800569e <xQueueGenericSend+0x3e>
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <xQueueGenericSend+0x42>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <xQueueGenericSend+0x44>
 80056a2:	2300      	movs	r3, #0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d109      	bne.n	80056bc <xQueueGenericSend+0x5c>
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ba:	e7fe      	b.n	80056ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d103      	bne.n	80056ca <xQueueGenericSend+0x6a>
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <xQueueGenericSend+0x6e>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <xQueueGenericSend+0x70>
 80056ce:	2300      	movs	r3, #0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <xQueueGenericSend+0x88>
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	623b      	str	r3, [r7, #32]
 80056e6:	e7fe      	b.n	80056e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056e8:	f001 f998 	bl	8006a1c <xTaskGetSchedulerState>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d102      	bne.n	80056f8 <xQueueGenericSend+0x98>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <xQueueGenericSend+0x9c>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <xQueueGenericSend+0x9e>
 80056fc:	2300      	movs	r3, #0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <xQueueGenericSend+0xb6>
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	e7fe      	b.n	8005714 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005716:	f7ff fb29 	bl	8004d6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005722:	429a      	cmp	r2, r3
 8005724:	d302      	bcc.n	800572c <xQueueGenericSend+0xcc>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d129      	bne.n	8005780 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005732:	f000 f9ff 	bl	8005b34 <prvCopyDataToQueue>
 8005736:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	d010      	beq.n	8005762 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	3324      	adds	r3, #36	; 0x24
 8005744:	4618      	mov	r0, r3
 8005746:	f000 ffb3 	bl	80066b0 <xTaskRemoveFromEventList>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d013      	beq.n	8005778 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005750:	4b3f      	ldr	r3, [pc, #252]	; (8005850 <xQueueGenericSend+0x1f0>)
 8005752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	e00a      	b.n	8005778 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005768:	4b39      	ldr	r3, [pc, #228]	; (8005850 <xQueueGenericSend+0x1f0>)
 800576a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005778:	f7ff fb26 	bl	8004dc8 <vPortExitCritical>
				return pdPASS;
 800577c:	2301      	movs	r3, #1
 800577e:	e063      	b.n	8005848 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d103      	bne.n	800578e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005786:	f7ff fb1f 	bl	8004dc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800578a:	2300      	movs	r3, #0
 800578c:	e05c      	b.n	8005848 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800578e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005790:	2b00      	cmp	r3, #0
 8005792:	d106      	bne.n	80057a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005794:	f107 0314 	add.w	r3, r7, #20
 8005798:	4618      	mov	r0, r3
 800579a:	f000 ffeb 	bl	8006774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800579e:	2301      	movs	r3, #1
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057a2:	f7ff fb11 	bl	8004dc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057a6:	f000 fd67 	bl	8006278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057aa:	f7ff fadf 	bl	8004d6c <vPortEnterCritical>
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057b4:	b25b      	sxtb	r3, r3
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ba:	d103      	bne.n	80057c4 <xQueueGenericSend+0x164>
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ca:	b25b      	sxtb	r3, r3
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d0:	d103      	bne.n	80057da <xQueueGenericSend+0x17a>
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057da:	f7ff faf5 	bl	8004dc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057de:	1d3a      	adds	r2, r7, #4
 80057e0:	f107 0314 	add.w	r3, r7, #20
 80057e4:	4611      	mov	r1, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 ffda 	bl	80067a0 <xTaskCheckForTimeOut>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d124      	bne.n	800583c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057f4:	f000 fa96 	bl	8005d24 <prvIsQueueFull>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d018      	beq.n	8005830 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	3310      	adds	r3, #16
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	4611      	mov	r1, r2
 8005806:	4618      	mov	r0, r3
 8005808:	f000 ff04 	bl	8006614 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800580c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800580e:	f000 fa21 	bl	8005c54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005812:	f000 fd3f 	bl	8006294 <xTaskResumeAll>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	f47f af7c 	bne.w	8005716 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800581e:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <xQueueGenericSend+0x1f0>)
 8005820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	e772      	b.n	8005716 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005832:	f000 fa0f 	bl	8005c54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005836:	f000 fd2d 	bl	8006294 <xTaskResumeAll>
 800583a:	e76c      	b.n	8005716 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800583c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800583e:	f000 fa09 	bl	8005c54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005842:	f000 fd27 	bl	8006294 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005846:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005848:	4618      	mov	r0, r3
 800584a:	3738      	adds	r7, #56	; 0x38
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	e000ed04 	.word	0xe000ed04

08005854 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08e      	sub	sp, #56	; 0x38
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <xQueueGenericSendFromISR+0x2c>
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
 800587e:	e7fe      	b.n	800587e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <xQueueGenericSendFromISR+0x3a>
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <xQueueGenericSendFromISR+0x3e>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <xQueueGenericSendFromISR+0x40>
 8005892:	2300      	movs	r3, #0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d109      	bne.n	80058ac <xQueueGenericSendFromISR+0x58>
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	623b      	str	r3, [r7, #32]
 80058aa:	e7fe      	b.n	80058aa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d103      	bne.n	80058ba <xQueueGenericSendFromISR+0x66>
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <xQueueGenericSendFromISR+0x6a>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <xQueueGenericSendFromISR+0x6c>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d109      	bne.n	80058d8 <xQueueGenericSendFromISR+0x84>
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	61fb      	str	r3, [r7, #28]
 80058d6:	e7fe      	b.n	80058d6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058d8:	f7ff fb24 	bl	8004f24 <vPortValidateInterruptPriority>
	__asm volatile
 80058dc:	f3ef 8211 	mrs	r2, BASEPRI
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	61ba      	str	r2, [r7, #24]
 80058f2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80058f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005900:	429a      	cmp	r2, r3
 8005902:	d302      	bcc.n	800590a <xQueueGenericSendFromISR+0xb6>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d12c      	bne.n	8005964 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800591a:	f000 f90b 	bl	8005b34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800591e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005926:	d112      	bne.n	800594e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	d016      	beq.n	800595e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	3324      	adds	r3, #36	; 0x24
 8005934:	4618      	mov	r0, r3
 8005936:	f000 febb 	bl	80066b0 <xTaskRemoveFromEventList>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00e      	beq.n	800595e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	e007      	b.n	800595e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800594e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005952:	3301      	adds	r3, #1
 8005954:	b2db      	uxtb	r3, r3
 8005956:	b25a      	sxtb	r2, r3
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800595e:	2301      	movs	r3, #1
 8005960:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005962:	e001      	b.n	8005968 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005964:	2300      	movs	r3, #0
 8005966:	637b      	str	r3, [r7, #52]	; 0x34
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005974:	4618      	mov	r0, r3
 8005976:	3738      	adds	r7, #56	; 0x38
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08c      	sub	sp, #48	; 0x30
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005988:	2300      	movs	r3, #0
 800598a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <xQueueReceive+0x2e>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	623b      	str	r3, [r7, #32]
 80059a8:	e7fe      	b.n	80059a8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d103      	bne.n	80059b8 <xQueueReceive+0x3c>
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <xQueueReceive+0x40>
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <xQueueReceive+0x42>
 80059bc:	2300      	movs	r3, #0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d109      	bne.n	80059d6 <xQueueReceive+0x5a>
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	61fb      	str	r3, [r7, #28]
 80059d4:	e7fe      	b.n	80059d4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059d6:	f001 f821 	bl	8006a1c <xTaskGetSchedulerState>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d102      	bne.n	80059e6 <xQueueReceive+0x6a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <xQueueReceive+0x6e>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <xQueueReceive+0x70>
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d109      	bne.n	8005a04 <xQueueReceive+0x88>
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	e7fe      	b.n	8005a02 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a04:	f7ff f9b2 	bl	8004d6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01f      	beq.n	8005a54 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a18:	f000 f8f6 	bl	8005c08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	1e5a      	subs	r2, r3, #1
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00f      	beq.n	8005a4c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	3310      	adds	r3, #16
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fe3d 	bl	80066b0 <xTaskRemoveFromEventList>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a3c:	4b3c      	ldr	r3, [pc, #240]	; (8005b30 <xQueueReceive+0x1b4>)
 8005a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a4c:	f7ff f9bc 	bl	8004dc8 <vPortExitCritical>
				return pdPASS;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e069      	b.n	8005b28 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d103      	bne.n	8005a62 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a5a:	f7ff f9b5 	bl	8004dc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e062      	b.n	8005b28 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d106      	bne.n	8005a76 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a68:	f107 0310 	add.w	r3, r7, #16
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fe81 	bl	8006774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a72:	2301      	movs	r3, #1
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a76:	f7ff f9a7 	bl	8004dc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a7a:	f000 fbfd 	bl	8006278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a7e:	f7ff f975 	bl	8004d6c <vPortEnterCritical>
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a88:	b25b      	sxtb	r3, r3
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d103      	bne.n	8005a98 <xQueueReceive+0x11c>
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a9e:	b25b      	sxtb	r3, r3
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d103      	bne.n	8005aae <xQueueReceive+0x132>
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aae:	f7ff f98b 	bl	8004dc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ab2:	1d3a      	adds	r2, r7, #4
 8005ab4:	f107 0310 	add.w	r3, r7, #16
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fe70 	bl	80067a0 <xTaskCheckForTimeOut>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d123      	bne.n	8005b0e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ac8:	f000 f916 	bl	8005cf8 <prvIsQueueEmpty>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d017      	beq.n	8005b02 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	3324      	adds	r3, #36	; 0x24
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 fd9a 	bl	8006614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae2:	f000 f8b7 	bl	8005c54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ae6:	f000 fbd5 	bl	8006294 <xTaskResumeAll>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d189      	bne.n	8005a04 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005af0:	4b0f      	ldr	r3, [pc, #60]	; (8005b30 <xQueueReceive+0x1b4>)
 8005af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	e780      	b.n	8005a04 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b04:	f000 f8a6 	bl	8005c54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b08:	f000 fbc4 	bl	8006294 <xTaskResumeAll>
 8005b0c:	e77a      	b.n	8005a04 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b10:	f000 f8a0 	bl	8005c54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b14:	f000 fbbe 	bl	8006294 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b1a:	f000 f8ed 	bl	8005cf8 <prvIsQueueEmpty>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f43f af6f 	beq.w	8005a04 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3730      	adds	r7, #48	; 0x30
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	e000ed04 	.word	0xe000ed04

08005b34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b40:	2300      	movs	r3, #0
 8005b42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10d      	bne.n	8005b6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d14d      	bne.n	8005bf6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 ff7a 	bl	8006a58 <xTaskPriorityDisinherit>
 8005b64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	609a      	str	r2, [r3, #8]
 8005b6c:	e043      	b.n	8005bf6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d119      	bne.n	8005ba8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6858      	ldr	r0, [r3, #4]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	f001 fbc4 	bl	800730c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	441a      	add	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d32b      	bcc.n	8005bf6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	e026      	b.n	8005bf6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	68d8      	ldr	r0, [r3, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	f001 fbaa 	bl	800730c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	425b      	negs	r3, r3
 8005bc2:	441a      	add	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d207      	bcs.n	8005be4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	425b      	negs	r3, r3
 8005bde:	441a      	add	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d105      	bne.n	8005bf6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005bfe:	697b      	ldr	r3, [r7, #20]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d018      	beq.n	8005c4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	441a      	add	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d303      	bcc.n	8005c3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68d9      	ldr	r1, [r3, #12]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	461a      	mov	r2, r3
 8005c46:	6838      	ldr	r0, [r7, #0]
 8005c48:	f001 fb60 	bl	800730c <memcpy>
	}
}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c5c:	f7ff f886 	bl	8004d6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c68:	e011      	b.n	8005c8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d012      	beq.n	8005c98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	3324      	adds	r3, #36	; 0x24
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fd1a 	bl	80066b0 <xTaskRemoveFromEventList>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c82:	f000 fded 	bl	8006860 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	dce9      	bgt.n	8005c6a <prvUnlockQueue+0x16>
 8005c96:	e000      	b.n	8005c9a <prvUnlockQueue+0x46>
					break;
 8005c98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	22ff      	movs	r2, #255	; 0xff
 8005c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ca2:	f7ff f891 	bl	8004dc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ca6:	f7ff f861 	bl	8004d6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cb2:	e011      	b.n	8005cd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d012      	beq.n	8005ce2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3310      	adds	r3, #16
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 fcf5 	bl	80066b0 <xTaskRemoveFromEventList>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ccc:	f000 fdc8 	bl	8006860 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cd0:	7bbb      	ldrb	r3, [r7, #14]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	dce9      	bgt.n	8005cb4 <prvUnlockQueue+0x60>
 8005ce0:	e000      	b.n	8005ce4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ce2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	22ff      	movs	r2, #255	; 0xff
 8005ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005cec:	f7ff f86c 	bl	8004dc8 <vPortExitCritical>
}
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d00:	f7ff f834 	bl	8004d6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	e001      	b.n	8005d16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d16:	f7ff f857 	bl	8004dc8 <vPortExitCritical>

	return xReturn;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d2c:	f7ff f81e 	bl	8004d6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d102      	bne.n	8005d42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e001      	b.n	8005d46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d46:	f7ff f83f 	bl	8004dc8 <vPortExitCritical>

	return xReturn;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	e014      	b.n	8005d8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d64:	4a0e      	ldr	r2, [pc, #56]	; (8005da0 <vQueueAddToRegistry+0x4c>)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10b      	bne.n	8005d88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d70:	490b      	ldr	r1, [pc, #44]	; (8005da0 <vQueueAddToRegistry+0x4c>)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d7a:	4a09      	ldr	r2, [pc, #36]	; (8005da0 <vQueueAddToRegistry+0x4c>)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	4413      	add	r3, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d86:	e005      	b.n	8005d94 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b07      	cmp	r3, #7
 8005d92:	d9e7      	bls.n	8005d64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d94:	bf00      	nop
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	20004b6c 	.word	0x20004b6c

08005da4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005db4:	f7fe ffda 	bl	8004d6c <vPortEnterCritical>
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dbe:	b25b      	sxtb	r3, r3
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d103      	bne.n	8005dce <vQueueWaitForMessageRestricted+0x2a>
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dd4:	b25b      	sxtb	r3, r3
 8005dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dda:	d103      	bne.n	8005de4 <vQueueWaitForMessageRestricted+0x40>
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005de4:	f7fe fff0 	bl	8004dc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d106      	bne.n	8005dfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	3324      	adds	r3, #36	; 0x24
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fc2f 	bl	800665c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005dfe:	6978      	ldr	r0, [r7, #20]
 8005e00:	f7ff ff28 	bl	8005c54 <prvUnlockQueue>
	}
 8005e04:	bf00      	nop
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08e      	sub	sp, #56	; 0x38
 8005e10:	af04      	add	r7, sp, #16
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d109      	bne.n	8005e34 <xTaskCreateStatic+0x28>
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	623b      	str	r3, [r7, #32]
 8005e32:	e7fe      	b.n	8005e32 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d109      	bne.n	8005e4e <xTaskCreateStatic+0x42>
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	61fb      	str	r3, [r7, #28]
 8005e4c:	e7fe      	b.n	8005e4c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e4e:	235c      	movs	r3, #92	; 0x5c
 8005e50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	2b5c      	cmp	r3, #92	; 0x5c
 8005e56:	d009      	beq.n	8005e6c <xTaskCreateStatic+0x60>
 8005e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	e7fe      	b.n	8005e6a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01e      	beq.n	8005eb2 <xTaskCreateStatic+0xa6>
 8005e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d01b      	beq.n	8005eb2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	9303      	str	r3, [sp, #12]
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	9302      	str	r3, [sp, #8]
 8005e94:	f107 0314 	add.w	r3, r7, #20
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f850 	bl	8005f4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005eac:	f000 f8dc 	bl	8006068 <prvAddNewTaskToReadyList>
 8005eb0:	e001      	b.n	8005eb6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005eb6:	697b      	ldr	r3, [r7, #20]
	}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3728      	adds	r7, #40	; 0x28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08c      	sub	sp, #48	; 0x30
 8005ec4:	af04      	add	r7, sp, #16
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff f863 	bl	8004fa0 <pvPortMalloc>
 8005eda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00e      	beq.n	8005f00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ee2:	205c      	movs	r0, #92	; 0x5c
 8005ee4:	f7ff f85c 	bl	8004fa0 <pvPortMalloc>
 8005ee8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8005ef6:	e005      	b.n	8005f04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ef8:	6978      	ldr	r0, [r7, #20]
 8005efa:	f7ff f913 	bl	8005124 <vPortFree>
 8005efe:	e001      	b.n	8005f04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f00:	2300      	movs	r3, #0
 8005f02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d017      	beq.n	8005f3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f12:	88fa      	ldrh	r2, [r7, #6]
 8005f14:	2300      	movs	r3, #0
 8005f16:	9303      	str	r3, [sp, #12]
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	9302      	str	r3, [sp, #8]
 8005f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68b9      	ldr	r1, [r7, #8]
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 f80e 	bl	8005f4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f2e:	69f8      	ldr	r0, [r7, #28]
 8005f30:	f000 f89a 	bl	8006068 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f34:	2301      	movs	r3, #1
 8005f36:	61bb      	str	r3, [r7, #24]
 8005f38:	e002      	b.n	8005f40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f40:	69bb      	ldr	r3, [r7, #24]
	}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3720      	adds	r7, #32
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b088      	sub	sp, #32
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
 8005f56:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	461a      	mov	r2, r3
 8005f62:	21a5      	movs	r1, #165	; 0xa5
 8005f64:	f001 f9dd 	bl	8007322 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f72:	3b01      	subs	r3, #1
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	f023 0307 	bic.w	r3, r3, #7
 8005f80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d009      	beq.n	8005fa0 <prvInitialiseNewTask+0x56>
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	e7fe      	b.n	8005f9e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d01f      	beq.n	8005fe6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61fb      	str	r3, [r7, #28]
 8005faa:	e012      	b.n	8005fd2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	7819      	ldrb	r1, [r3, #0]
 8005fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	3334      	adds	r3, #52	; 0x34
 8005fbc:	460a      	mov	r2, r1
 8005fbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d006      	beq.n	8005fda <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	61fb      	str	r3, [r7, #28]
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	2b0f      	cmp	r3, #15
 8005fd6:	d9e9      	bls.n	8005fac <prvInitialiseNewTask+0x62>
 8005fd8:	e000      	b.n	8005fdc <prvInitialiseNewTask+0x92>
			{
				break;
 8005fda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fe4:	e003      	b.n	8005fee <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	2b37      	cmp	r3, #55	; 0x37
 8005ff2:	d901      	bls.n	8005ff8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ff4:	2337      	movs	r3, #55	; 0x37
 8005ff6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ffc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006002:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	2200      	movs	r2, #0
 8006008:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	3304      	adds	r3, #4
 800600e:	4618      	mov	r0, r3
 8006010:	f7fe fcee 	bl	80049f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	3318      	adds	r3, #24
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe fce9 	bl	80049f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006022:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800602e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006032:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	2200      	movs	r2, #0
 8006038:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	68f9      	ldr	r1, [r7, #12]
 8006046:	69b8      	ldr	r0, [r7, #24]
 8006048:	f7fe fd66 	bl	8004b18 <pxPortInitialiseStack>
 800604c:	4602      	mov	r2, r0
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800605e:	bf00      	nop
 8006060:	3720      	adds	r7, #32
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006070:	f7fe fe7c 	bl	8004d6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006074:	4b2d      	ldr	r3, [pc, #180]	; (800612c <prvAddNewTaskToReadyList+0xc4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	4a2c      	ldr	r2, [pc, #176]	; (800612c <prvAddNewTaskToReadyList+0xc4>)
 800607c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800607e:	4b2c      	ldr	r3, [pc, #176]	; (8006130 <prvAddNewTaskToReadyList+0xc8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006086:	4a2a      	ldr	r2, [pc, #168]	; (8006130 <prvAddNewTaskToReadyList+0xc8>)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800608c:	4b27      	ldr	r3, [pc, #156]	; (800612c <prvAddNewTaskToReadyList+0xc4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d110      	bne.n	80060b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006094:	f000 fc08 	bl	80068a8 <prvInitialiseTaskLists>
 8006098:	e00d      	b.n	80060b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800609a:	4b26      	ldr	r3, [pc, #152]	; (8006134 <prvAddNewTaskToReadyList+0xcc>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d109      	bne.n	80060b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060a2:	4b23      	ldr	r3, [pc, #140]	; (8006130 <prvAddNewTaskToReadyList+0xc8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d802      	bhi.n	80060b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060b0:	4a1f      	ldr	r2, [pc, #124]	; (8006130 <prvAddNewTaskToReadyList+0xc8>)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060b6:	4b20      	ldr	r3, [pc, #128]	; (8006138 <prvAddNewTaskToReadyList+0xd0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3301      	adds	r3, #1
 80060bc:	4a1e      	ldr	r2, [pc, #120]	; (8006138 <prvAddNewTaskToReadyList+0xd0>)
 80060be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060c0:	4b1d      	ldr	r3, [pc, #116]	; (8006138 <prvAddNewTaskToReadyList+0xd0>)
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060cc:	4b1b      	ldr	r3, [pc, #108]	; (800613c <prvAddNewTaskToReadyList+0xd4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d903      	bls.n	80060dc <prvAddNewTaskToReadyList+0x74>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	4a18      	ldr	r2, [pc, #96]	; (800613c <prvAddNewTaskToReadyList+0xd4>)
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4a15      	ldr	r2, [pc, #84]	; (8006140 <prvAddNewTaskToReadyList+0xd8>)
 80060ea:	441a      	add	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4619      	mov	r1, r3
 80060f2:	4610      	mov	r0, r2
 80060f4:	f7fe fc89 	bl	8004a0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060f8:	f7fe fe66 	bl	8004dc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060fc:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <prvAddNewTaskToReadyList+0xcc>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00e      	beq.n	8006122 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006104:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <prvAddNewTaskToReadyList+0xc8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610e:	429a      	cmp	r2, r3
 8006110:	d207      	bcs.n	8006122 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006112:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <prvAddNewTaskToReadyList+0xdc>)
 8006114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006122:	bf00      	nop
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20004948 	.word	0x20004948
 8006130:	20004474 	.word	0x20004474
 8006134:	20004954 	.word	0x20004954
 8006138:	20004964 	.word	0x20004964
 800613c:	20004950 	.word	0x20004950
 8006140:	20004478 	.word	0x20004478
 8006144:	e000ed04 	.word	0xe000ed04

08006148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d016      	beq.n	8006188 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800615a:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <vTaskDelay+0x60>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d009      	beq.n	8006176 <vTaskDelay+0x2e>
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	60bb      	str	r3, [r7, #8]
 8006174:	e7fe      	b.n	8006174 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006176:	f000 f87f 	bl	8006278 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800617a:	2100      	movs	r1, #0
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fcd7 	bl	8006b30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006182:	f000 f887 	bl	8006294 <xTaskResumeAll>
 8006186:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d107      	bne.n	800619e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800618e:	4b07      	ldr	r3, [pc, #28]	; (80061ac <vTaskDelay+0x64>)
 8006190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800619e:	bf00      	nop
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20004970 	.word	0x20004970
 80061ac:	e000ed04 	.word	0xe000ed04

080061b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08a      	sub	sp, #40	; 0x28
 80061b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061be:	463a      	mov	r2, r7
 80061c0:	1d39      	adds	r1, r7, #4
 80061c2:	f107 0308 	add.w	r3, r7, #8
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe fbbe 	bl	8004948 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	9202      	str	r2, [sp, #8]
 80061d4:	9301      	str	r3, [sp, #4]
 80061d6:	2300      	movs	r3, #0
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	2300      	movs	r3, #0
 80061dc:	460a      	mov	r2, r1
 80061de:	4920      	ldr	r1, [pc, #128]	; (8006260 <vTaskStartScheduler+0xb0>)
 80061e0:	4820      	ldr	r0, [pc, #128]	; (8006264 <vTaskStartScheduler+0xb4>)
 80061e2:	f7ff fe13 	bl	8005e0c <xTaskCreateStatic>
 80061e6:	4602      	mov	r2, r0
 80061e8:	4b1f      	ldr	r3, [pc, #124]	; (8006268 <vTaskStartScheduler+0xb8>)
 80061ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061ec:	4b1e      	ldr	r3, [pc, #120]	; (8006268 <vTaskStartScheduler+0xb8>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061f4:	2301      	movs	r3, #1
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	e001      	b.n	80061fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d102      	bne.n	800620a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006204:	f000 fce8 	bl	8006bd8 <xTimerCreateTimerTask>
 8006208:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d115      	bne.n	800623c <vTaskStartScheduler+0x8c>
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <vTaskStartScheduler+0xbc>)
 8006224:	f04f 32ff 	mov.w	r2, #4294967295
 8006228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800622a:	4b11      	ldr	r3, [pc, #68]	; (8006270 <vTaskStartScheduler+0xc0>)
 800622c:	2201      	movs	r2, #1
 800622e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006230:	4b10      	ldr	r3, [pc, #64]	; (8006274 <vTaskStartScheduler+0xc4>)
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006236:	f7fe fcfb 	bl	8004c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800623a:	e00d      	b.n	8006258 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006242:	d109      	bne.n	8006258 <vTaskStartScheduler+0xa8>
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	e7fe      	b.n	8006256 <vTaskStartScheduler+0xa6>
}
 8006258:	bf00      	nop
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	0800820c 	.word	0x0800820c
 8006264:	08006879 	.word	0x08006879
 8006268:	2000496c 	.word	0x2000496c
 800626c:	20004968 	.word	0x20004968
 8006270:	20004954 	.word	0x20004954
 8006274:	2000494c 	.word	0x2000494c

08006278 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800627c:	4b04      	ldr	r3, [pc, #16]	; (8006290 <vTaskSuspendAll+0x18>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3301      	adds	r3, #1
 8006282:	4a03      	ldr	r2, [pc, #12]	; (8006290 <vTaskSuspendAll+0x18>)
 8006284:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006286:	bf00      	nop
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	20004970 	.word	0x20004970

08006294 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800629e:	2300      	movs	r3, #0
 80062a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062a2:	4b41      	ldr	r3, [pc, #260]	; (80063a8 <xTaskResumeAll+0x114>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <xTaskResumeAll+0x2a>
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	e7fe      	b.n	80062bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062be:	f7fe fd55 	bl	8004d6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062c2:	4b39      	ldr	r3, [pc, #228]	; (80063a8 <xTaskResumeAll+0x114>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	4a37      	ldr	r2, [pc, #220]	; (80063a8 <xTaskResumeAll+0x114>)
 80062ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062cc:	4b36      	ldr	r3, [pc, #216]	; (80063a8 <xTaskResumeAll+0x114>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d162      	bne.n	800639a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062d4:	4b35      	ldr	r3, [pc, #212]	; (80063ac <xTaskResumeAll+0x118>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d05e      	beq.n	800639a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062dc:	e02f      	b.n	800633e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062de:	4b34      	ldr	r3, [pc, #208]	; (80063b0 <xTaskResumeAll+0x11c>)
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3318      	adds	r3, #24
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe fbea 	bl	8004ac4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fe fbe5 	bl	8004ac4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fe:	4b2d      	ldr	r3, [pc, #180]	; (80063b4 <xTaskResumeAll+0x120>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d903      	bls.n	800630e <xTaskResumeAll+0x7a>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	4a2a      	ldr	r2, [pc, #168]	; (80063b4 <xTaskResumeAll+0x120>)
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006312:	4613      	mov	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4a27      	ldr	r2, [pc, #156]	; (80063b8 <xTaskResumeAll+0x124>)
 800631c:	441a      	add	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3304      	adds	r3, #4
 8006322:	4619      	mov	r1, r3
 8006324:	4610      	mov	r0, r2
 8006326:	f7fe fb70 	bl	8004a0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632e:	4b23      	ldr	r3, [pc, #140]	; (80063bc <xTaskResumeAll+0x128>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	429a      	cmp	r2, r3
 8006336:	d302      	bcc.n	800633e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006338:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <xTaskResumeAll+0x12c>)
 800633a:	2201      	movs	r2, #1
 800633c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800633e:	4b1c      	ldr	r3, [pc, #112]	; (80063b0 <xTaskResumeAll+0x11c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1cb      	bne.n	80062de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800634c:	f000 fb46 	bl	80069dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006350:	4b1c      	ldr	r3, [pc, #112]	; (80063c4 <xTaskResumeAll+0x130>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d010      	beq.n	800637e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800635c:	f000 f846 	bl	80063ec <xTaskIncrementTick>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006366:	4b16      	ldr	r3, [pc, #88]	; (80063c0 <xTaskResumeAll+0x12c>)
 8006368:	2201      	movs	r2, #1
 800636a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3b01      	subs	r3, #1
 8006370:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1f1      	bne.n	800635c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006378:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <xTaskResumeAll+0x130>)
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800637e:	4b10      	ldr	r3, [pc, #64]	; (80063c0 <xTaskResumeAll+0x12c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d009      	beq.n	800639a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006386:	2301      	movs	r3, #1
 8006388:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800638a:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <xTaskResumeAll+0x134>)
 800638c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800639a:	f7fe fd15 	bl	8004dc8 <vPortExitCritical>

	return xAlreadyYielded;
 800639e:	68bb      	ldr	r3, [r7, #8]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20004970 	.word	0x20004970
 80063ac:	20004948 	.word	0x20004948
 80063b0:	20004908 	.word	0x20004908
 80063b4:	20004950 	.word	0x20004950
 80063b8:	20004478 	.word	0x20004478
 80063bc:	20004474 	.word	0x20004474
 80063c0:	2000495c 	.word	0x2000495c
 80063c4:	20004958 	.word	0x20004958
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80063d2:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <xTaskGetTickCount+0x1c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063d8:	687b      	ldr	r3, [r7, #4]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	2000494c 	.word	0x2000494c

080063ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063f2:	2300      	movs	r3, #0
 80063f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063f6:	4b4e      	ldr	r3, [pc, #312]	; (8006530 <xTaskIncrementTick+0x144>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f040 8088 	bne.w	8006510 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006400:	4b4c      	ldr	r3, [pc, #304]	; (8006534 <xTaskIncrementTick+0x148>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006408:	4a4a      	ldr	r2, [pc, #296]	; (8006534 <xTaskIncrementTick+0x148>)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d11f      	bne.n	8006454 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006414:	4b48      	ldr	r3, [pc, #288]	; (8006538 <xTaskIncrementTick+0x14c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d009      	beq.n	8006432 <xTaskIncrementTick+0x46>
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	e7fe      	b.n	8006430 <xTaskIncrementTick+0x44>
 8006432:	4b41      	ldr	r3, [pc, #260]	; (8006538 <xTaskIncrementTick+0x14c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	4b40      	ldr	r3, [pc, #256]	; (800653c <xTaskIncrementTick+0x150>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a3e      	ldr	r2, [pc, #248]	; (8006538 <xTaskIncrementTick+0x14c>)
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	4a3e      	ldr	r2, [pc, #248]	; (800653c <xTaskIncrementTick+0x150>)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	4b3e      	ldr	r3, [pc, #248]	; (8006540 <xTaskIncrementTick+0x154>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3301      	adds	r3, #1
 800644c:	4a3c      	ldr	r2, [pc, #240]	; (8006540 <xTaskIncrementTick+0x154>)
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	f000 fac4 	bl	80069dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006454:	4b3b      	ldr	r3, [pc, #236]	; (8006544 <xTaskIncrementTick+0x158>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	429a      	cmp	r2, r3
 800645c:	d349      	bcc.n	80064f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800645e:	4b36      	ldr	r3, [pc, #216]	; (8006538 <xTaskIncrementTick+0x14c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d104      	bne.n	8006472 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006468:	4b36      	ldr	r3, [pc, #216]	; (8006544 <xTaskIncrementTick+0x158>)
 800646a:	f04f 32ff 	mov.w	r2, #4294967295
 800646e:	601a      	str	r2, [r3, #0]
					break;
 8006470:	e03f      	b.n	80064f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006472:	4b31      	ldr	r3, [pc, #196]	; (8006538 <xTaskIncrementTick+0x14c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	429a      	cmp	r2, r3
 8006488:	d203      	bcs.n	8006492 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800648a:	4a2e      	ldr	r2, [pc, #184]	; (8006544 <xTaskIncrementTick+0x158>)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006490:	e02f      	b.n	80064f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	3304      	adds	r3, #4
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe fb14 	bl	8004ac4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d004      	beq.n	80064ae <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	3318      	adds	r3, #24
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fe fb0b 	bl	8004ac4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b2:	4b25      	ldr	r3, [pc, #148]	; (8006548 <xTaskIncrementTick+0x15c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d903      	bls.n	80064c2 <xTaskIncrementTick+0xd6>
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064be:	4a22      	ldr	r2, [pc, #136]	; (8006548 <xTaskIncrementTick+0x15c>)
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4a1f      	ldr	r2, [pc, #124]	; (800654c <xTaskIncrementTick+0x160>)
 80064d0:	441a      	add	r2, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4619      	mov	r1, r3
 80064d8:	4610      	mov	r0, r2
 80064da:	f7fe fa96 	bl	8004a0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e2:	4b1b      	ldr	r3, [pc, #108]	; (8006550 <xTaskIncrementTick+0x164>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d3b8      	bcc.n	800645e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80064ec:	2301      	movs	r3, #1
 80064ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064f0:	e7b5      	b.n	800645e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064f2:	4b17      	ldr	r3, [pc, #92]	; (8006550 <xTaskIncrementTick+0x164>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f8:	4914      	ldr	r1, [pc, #80]	; (800654c <xTaskIncrementTick+0x160>)
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d907      	bls.n	800651a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800650a:	2301      	movs	r3, #1
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	e004      	b.n	800651a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006510:	4b10      	ldr	r3, [pc, #64]	; (8006554 <xTaskIncrementTick+0x168>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3301      	adds	r3, #1
 8006516:	4a0f      	ldr	r2, [pc, #60]	; (8006554 <xTaskIncrementTick+0x168>)
 8006518:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800651a:	4b0f      	ldr	r3, [pc, #60]	; (8006558 <xTaskIncrementTick+0x16c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006522:	2301      	movs	r3, #1
 8006524:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006526:	697b      	ldr	r3, [r7, #20]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20004970 	.word	0x20004970
 8006534:	2000494c 	.word	0x2000494c
 8006538:	20004900 	.word	0x20004900
 800653c:	20004904 	.word	0x20004904
 8006540:	20004960 	.word	0x20004960
 8006544:	20004968 	.word	0x20004968
 8006548:	20004950 	.word	0x20004950
 800654c:	20004478 	.word	0x20004478
 8006550:	20004474 	.word	0x20004474
 8006554:	20004958 	.word	0x20004958
 8006558:	2000495c 	.word	0x2000495c

0800655c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006562:	4b27      	ldr	r3, [pc, #156]	; (8006600 <vTaskSwitchContext+0xa4>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800656a:	4b26      	ldr	r3, [pc, #152]	; (8006604 <vTaskSwitchContext+0xa8>)
 800656c:	2201      	movs	r2, #1
 800656e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006570:	e040      	b.n	80065f4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006572:	4b24      	ldr	r3, [pc, #144]	; (8006604 <vTaskSwitchContext+0xa8>)
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006578:	4b23      	ldr	r3, [pc, #140]	; (8006608 <vTaskSwitchContext+0xac>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	e00f      	b.n	80065a0 <vTaskSwitchContext+0x44>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d109      	bne.n	800659a <vTaskSwitchContext+0x3e>
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	607b      	str	r3, [r7, #4]
 8006598:	e7fe      	b.n	8006598 <vTaskSwitchContext+0x3c>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3b01      	subs	r3, #1
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	491a      	ldr	r1, [pc, #104]	; (800660c <vTaskSwitchContext+0xb0>)
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4613      	mov	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0e5      	beq.n	8006580 <vTaskSwitchContext+0x24>
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4a13      	ldr	r2, [pc, #76]	; (800660c <vTaskSwitchContext+0xb0>)
 80065c0:	4413      	add	r3, r2
 80065c2:	60bb      	str	r3, [r7, #8]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	605a      	str	r2, [r3, #4]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	3308      	adds	r3, #8
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d104      	bne.n	80065e4 <vTaskSwitchContext+0x88>
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	605a      	str	r2, [r3, #4]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	4a09      	ldr	r2, [pc, #36]	; (8006610 <vTaskSwitchContext+0xb4>)
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	4a06      	ldr	r2, [pc, #24]	; (8006608 <vTaskSwitchContext+0xac>)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6013      	str	r3, [r2, #0]
}
 80065f4:	bf00      	nop
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	20004970 	.word	0x20004970
 8006604:	2000495c 	.word	0x2000495c
 8006608:	20004950 	.word	0x20004950
 800660c:	20004478 	.word	0x20004478
 8006610:	20004474 	.word	0x20004474

08006614 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d109      	bne.n	8006638 <vTaskPlaceOnEventList+0x24>
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	e7fe      	b.n	8006636 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006638:	4b07      	ldr	r3, [pc, #28]	; (8006658 <vTaskPlaceOnEventList+0x44>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3318      	adds	r3, #24
 800663e:	4619      	mov	r1, r3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7fe fa06 	bl	8004a52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006646:	2101      	movs	r1, #1
 8006648:	6838      	ldr	r0, [r7, #0]
 800664a:	f000 fa71 	bl	8006b30 <prvAddCurrentTaskToDelayedList>
}
 800664e:	bf00      	nop
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20004474 	.word	0x20004474

0800665c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d109      	bne.n	8006682 <vTaskPlaceOnEventListRestricted+0x26>
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	e7fe      	b.n	8006680 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006682:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <vTaskPlaceOnEventListRestricted+0x50>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3318      	adds	r3, #24
 8006688:	4619      	mov	r1, r3
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7fe f9bd 	bl	8004a0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006696:	f04f 33ff 	mov.w	r3, #4294967295
 800669a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	68b8      	ldr	r0, [r7, #8]
 80066a0:	f000 fa46 	bl	8006b30 <prvAddCurrentTaskToDelayedList>
	}
 80066a4:	bf00      	nop
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20004474 	.word	0x20004474

080066b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <xTaskRemoveFromEventList+0x2a>
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	e7fe      	b.n	80066d8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	3318      	adds	r3, #24
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe f9f0 	bl	8004ac4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066e4:	4b1d      	ldr	r3, [pc, #116]	; (800675c <xTaskRemoveFromEventList+0xac>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d11d      	bne.n	8006728 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fe f9e7 	bl	8004ac4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fa:	4b19      	ldr	r3, [pc, #100]	; (8006760 <xTaskRemoveFromEventList+0xb0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d903      	bls.n	800670a <xTaskRemoveFromEventList+0x5a>
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	4a16      	ldr	r2, [pc, #88]	; (8006760 <xTaskRemoveFromEventList+0xb0>)
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4a13      	ldr	r2, [pc, #76]	; (8006764 <xTaskRemoveFromEventList+0xb4>)
 8006718:	441a      	add	r2, r3
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	3304      	adds	r3, #4
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f7fe f972 	bl	8004a0a <vListInsertEnd>
 8006726:	e005      	b.n	8006734 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	3318      	adds	r3, #24
 800672c:	4619      	mov	r1, r3
 800672e:	480e      	ldr	r0, [pc, #56]	; (8006768 <xTaskRemoveFromEventList+0xb8>)
 8006730:	f7fe f96b 	bl	8004a0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006738:	4b0c      	ldr	r3, [pc, #48]	; (800676c <xTaskRemoveFromEventList+0xbc>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673e:	429a      	cmp	r2, r3
 8006740:	d905      	bls.n	800674e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006742:	2301      	movs	r3, #1
 8006744:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006746:	4b0a      	ldr	r3, [pc, #40]	; (8006770 <xTaskRemoveFromEventList+0xc0>)
 8006748:	2201      	movs	r2, #1
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	e001      	b.n	8006752 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800674e:	2300      	movs	r3, #0
 8006750:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006752:	697b      	ldr	r3, [r7, #20]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	20004970 	.word	0x20004970
 8006760:	20004950 	.word	0x20004950
 8006764:	20004478 	.word	0x20004478
 8006768:	20004908 	.word	0x20004908
 800676c:	20004474 	.word	0x20004474
 8006770:	2000495c 	.word	0x2000495c

08006774 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <vTaskInternalSetTimeOutState+0x24>)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006784:	4b05      	ldr	r3, [pc, #20]	; (800679c <vTaskInternalSetTimeOutState+0x28>)
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	605a      	str	r2, [r3, #4]
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	20004960 	.word	0x20004960
 800679c:	2000494c 	.word	0x2000494c

080067a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d109      	bne.n	80067c4 <xTaskCheckForTimeOut+0x24>
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	613b      	str	r3, [r7, #16]
 80067c2:	e7fe      	b.n	80067c2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d109      	bne.n	80067de <xTaskCheckForTimeOut+0x3e>
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	e7fe      	b.n	80067dc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80067de:	f7fe fac5 	bl	8004d6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067e2:	4b1d      	ldr	r3, [pc, #116]	; (8006858 <xTaskCheckForTimeOut+0xb8>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fa:	d102      	bne.n	8006802 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067fc:	2300      	movs	r3, #0
 80067fe:	61fb      	str	r3, [r7, #28]
 8006800:	e023      	b.n	800684a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	4b15      	ldr	r3, [pc, #84]	; (800685c <xTaskCheckForTimeOut+0xbc>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d007      	beq.n	800681e <xTaskCheckForTimeOut+0x7e>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	429a      	cmp	r2, r3
 8006816:	d802      	bhi.n	800681e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006818:	2301      	movs	r3, #1
 800681a:	61fb      	str	r3, [r7, #28]
 800681c:	e015      	b.n	800684a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	429a      	cmp	r2, r3
 8006826:	d90b      	bls.n	8006840 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	1ad2      	subs	r2, r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff ff9d 	bl	8006774 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800683a:	2300      	movs	r3, #0
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	e004      	b.n	800684a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006846:	2301      	movs	r3, #1
 8006848:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800684a:	f7fe fabd 	bl	8004dc8 <vPortExitCritical>

	return xReturn;
 800684e:	69fb      	ldr	r3, [r7, #28]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	2000494c 	.word	0x2000494c
 800685c:	20004960 	.word	0x20004960

08006860 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006864:	4b03      	ldr	r3, [pc, #12]	; (8006874 <vTaskMissedYield+0x14>)
 8006866:	2201      	movs	r2, #1
 8006868:	601a      	str	r2, [r3, #0]
}
 800686a:	bf00      	nop
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	2000495c 	.word	0x2000495c

08006878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006880:	f000 f852 	bl	8006928 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006884:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <prvIdleTask+0x28>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d9f9      	bls.n	8006880 <prvIdleTask+0x8>
			{
				taskYIELD();
 800688c:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <prvIdleTask+0x2c>)
 800688e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800689c:	e7f0      	b.n	8006880 <prvIdleTask+0x8>
 800689e:	bf00      	nop
 80068a0:	20004478 	.word	0x20004478
 80068a4:	e000ed04 	.word	0xe000ed04

080068a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068ae:	2300      	movs	r3, #0
 80068b0:	607b      	str	r3, [r7, #4]
 80068b2:	e00c      	b.n	80068ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	4613      	mov	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4a12      	ldr	r2, [pc, #72]	; (8006908 <prvInitialiseTaskLists+0x60>)
 80068c0:	4413      	add	r3, r2
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe f874 	bl	80049b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3301      	adds	r3, #1
 80068cc:	607b      	str	r3, [r7, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b37      	cmp	r3, #55	; 0x37
 80068d2:	d9ef      	bls.n	80068b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068d4:	480d      	ldr	r0, [pc, #52]	; (800690c <prvInitialiseTaskLists+0x64>)
 80068d6:	f7fe f86b 	bl	80049b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068da:	480d      	ldr	r0, [pc, #52]	; (8006910 <prvInitialiseTaskLists+0x68>)
 80068dc:	f7fe f868 	bl	80049b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068e0:	480c      	ldr	r0, [pc, #48]	; (8006914 <prvInitialiseTaskLists+0x6c>)
 80068e2:	f7fe f865 	bl	80049b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068e6:	480c      	ldr	r0, [pc, #48]	; (8006918 <prvInitialiseTaskLists+0x70>)
 80068e8:	f7fe f862 	bl	80049b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068ec:	480b      	ldr	r0, [pc, #44]	; (800691c <prvInitialiseTaskLists+0x74>)
 80068ee:	f7fe f85f 	bl	80049b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068f2:	4b0b      	ldr	r3, [pc, #44]	; (8006920 <prvInitialiseTaskLists+0x78>)
 80068f4:	4a05      	ldr	r2, [pc, #20]	; (800690c <prvInitialiseTaskLists+0x64>)
 80068f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068f8:	4b0a      	ldr	r3, [pc, #40]	; (8006924 <prvInitialiseTaskLists+0x7c>)
 80068fa:	4a05      	ldr	r2, [pc, #20]	; (8006910 <prvInitialiseTaskLists+0x68>)
 80068fc:	601a      	str	r2, [r3, #0]
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	20004478 	.word	0x20004478
 800690c:	200048d8 	.word	0x200048d8
 8006910:	200048ec 	.word	0x200048ec
 8006914:	20004908 	.word	0x20004908
 8006918:	2000491c 	.word	0x2000491c
 800691c:	20004934 	.word	0x20004934
 8006920:	20004900 	.word	0x20004900
 8006924:	20004904 	.word	0x20004904

08006928 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800692e:	e019      	b.n	8006964 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006930:	f7fe fa1c 	bl	8004d6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <prvCheckTasksWaitingTermination+0x4c>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3304      	adds	r3, #4
 8006940:	4618      	mov	r0, r3
 8006942:	f7fe f8bf 	bl	8004ac4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006946:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <prvCheckTasksWaitingTermination+0x50>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3b01      	subs	r3, #1
 800694c:	4a0a      	ldr	r2, [pc, #40]	; (8006978 <prvCheckTasksWaitingTermination+0x50>)
 800694e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <prvCheckTasksWaitingTermination+0x54>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3b01      	subs	r3, #1
 8006956:	4a09      	ldr	r2, [pc, #36]	; (800697c <prvCheckTasksWaitingTermination+0x54>)
 8006958:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800695a:	f7fe fa35 	bl	8004dc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f80e 	bl	8006980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006964:	4b05      	ldr	r3, [pc, #20]	; (800697c <prvCheckTasksWaitingTermination+0x54>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e1      	bne.n	8006930 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	2000491c 	.word	0x2000491c
 8006978:	20004948 	.word	0x20004948
 800697c:	20004930 	.word	0x20004930

08006980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800698e:	2b00      	cmp	r3, #0
 8006990:	d108      	bne.n	80069a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	4618      	mov	r0, r3
 8006998:	f7fe fbc4 	bl	8005124 <vPortFree>
				vPortFree( pxTCB );
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7fe fbc1 	bl	8005124 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069a2:	e017      	b.n	80069d4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d103      	bne.n	80069b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fe fbb8 	bl	8005124 <vPortFree>
	}
 80069b4:	e00e      	b.n	80069d4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d009      	beq.n	80069d4 <prvDeleteTCB+0x54>
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	e7fe      	b.n	80069d2 <prvDeleteTCB+0x52>
	}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069e2:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <prvResetNextTaskUnblockTime+0x38>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069ec:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <prvResetNextTaskUnblockTime+0x3c>)
 80069ee:	f04f 32ff 	mov.w	r2, #4294967295
 80069f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069f4:	e008      	b.n	8006a08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f6:	4b07      	ldr	r3, [pc, #28]	; (8006a14 <prvResetNextTaskUnblockTime+0x38>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	4a04      	ldr	r2, [pc, #16]	; (8006a18 <prvResetNextTaskUnblockTime+0x3c>)
 8006a06:	6013      	str	r3, [r2, #0]
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	20004900 	.word	0x20004900
 8006a18:	20004968 	.word	0x20004968

08006a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a22:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <xTaskGetSchedulerState+0x34>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	607b      	str	r3, [r7, #4]
 8006a2e:	e008      	b.n	8006a42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a30:	4b08      	ldr	r3, [pc, #32]	; (8006a54 <xTaskGetSchedulerState+0x38>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a38:	2302      	movs	r3, #2
 8006a3a:	607b      	str	r3, [r7, #4]
 8006a3c:	e001      	b.n	8006a42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a42:	687b      	ldr	r3, [r7, #4]
	}
 8006a44:	4618      	mov	r0, r3
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	20004954 	.word	0x20004954
 8006a54:	20004970 	.word	0x20004970

08006a58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d054      	beq.n	8006b18 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a6e:	4b2d      	ldr	r3, [pc, #180]	; (8006b24 <xTaskPriorityDisinherit+0xcc>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d009      	beq.n	8006a8c <xTaskPriorityDisinherit+0x34>
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	60fb      	str	r3, [r7, #12]
 8006a8a:	e7fe      	b.n	8006a8a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d109      	bne.n	8006aa8 <xTaskPriorityDisinherit+0x50>
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	60bb      	str	r3, [r7, #8]
 8006aa6:	e7fe      	b.n	8006aa6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aac:	1e5a      	subs	r2, r3, #1
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d02c      	beq.n	8006b18 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d128      	bne.n	8006b18 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fd fffa 	bl	8004ac4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006adc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae8:	4b0f      	ldr	r3, [pc, #60]	; (8006b28 <xTaskPriorityDisinherit+0xd0>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d903      	bls.n	8006af8 <xTaskPriorityDisinherit+0xa0>
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	4a0c      	ldr	r2, [pc, #48]	; (8006b28 <xTaskPriorityDisinherit+0xd0>)
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4a09      	ldr	r2, [pc, #36]	; (8006b2c <xTaskPriorityDisinherit+0xd4>)
 8006b06:	441a      	add	r2, r3
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	f7fd ff7b 	bl	8004a0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b14:	2301      	movs	r3, #1
 8006b16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b18:	697b      	ldr	r3, [r7, #20]
	}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20004474 	.word	0x20004474
 8006b28:	20004950 	.word	0x20004950
 8006b2c:	20004478 	.word	0x20004478

08006b30 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b3a:	4b21      	ldr	r3, [pc, #132]	; (8006bc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b40:	4b20      	ldr	r3, [pc, #128]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fd ffbc 	bl	8004ac4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b52:	d10a      	bne.n	8006b6a <prvAddCurrentTaskToDelayedList+0x3a>
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d007      	beq.n	8006b6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b5a:	4b1a      	ldr	r3, [pc, #104]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	4619      	mov	r1, r3
 8006b62:	4819      	ldr	r0, [pc, #100]	; (8006bc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b64:	f7fd ff51 	bl	8004a0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b68:	e026      	b.n	8006bb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4413      	add	r3, r2
 8006b70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b72:	4b14      	ldr	r3, [pc, #80]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d209      	bcs.n	8006b96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b82:	4b12      	ldr	r3, [pc, #72]	; (8006bcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4610      	mov	r0, r2
 8006b90:	f7fd ff5f 	bl	8004a52 <vListInsert>
}
 8006b94:	e010      	b.n	8006bb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b96:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	f7fd ff55 	bl	8004a52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ba8:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d202      	bcs.n	8006bb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006bb2:	4a08      	ldr	r2, [pc, #32]	; (8006bd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	6013      	str	r3, [r2, #0]
}
 8006bb8:	bf00      	nop
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	2000494c 	.word	0x2000494c
 8006bc4:	20004474 	.word	0x20004474
 8006bc8:	20004934 	.word	0x20004934
 8006bcc:	20004904 	.word	0x20004904
 8006bd0:	20004900 	.word	0x20004900
 8006bd4:	20004968 	.word	0x20004968

08006bd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08a      	sub	sp, #40	; 0x28
 8006bdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006be2:	f000 faff 	bl	80071e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006be6:	4b1c      	ldr	r3, [pc, #112]	; (8006c58 <xTimerCreateTimerTask+0x80>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d021      	beq.n	8006c32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006bf6:	1d3a      	adds	r2, r7, #4
 8006bf8:	f107 0108 	add.w	r1, r7, #8
 8006bfc:	f107 030c 	add.w	r3, r7, #12
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fd febb 	bl	800497c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	9202      	str	r2, [sp, #8]
 8006c0e:	9301      	str	r3, [sp, #4]
 8006c10:	2302      	movs	r3, #2
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	2300      	movs	r3, #0
 8006c16:	460a      	mov	r2, r1
 8006c18:	4910      	ldr	r1, [pc, #64]	; (8006c5c <xTimerCreateTimerTask+0x84>)
 8006c1a:	4811      	ldr	r0, [pc, #68]	; (8006c60 <xTimerCreateTimerTask+0x88>)
 8006c1c:	f7ff f8f6 	bl	8005e0c <xTaskCreateStatic>
 8006c20:	4602      	mov	r2, r0
 8006c22:	4b10      	ldr	r3, [pc, #64]	; (8006c64 <xTimerCreateTimerTask+0x8c>)
 8006c24:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c26:	4b0f      	ldr	r3, [pc, #60]	; (8006c64 <xTimerCreateTimerTask+0x8c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d109      	bne.n	8006c4c <xTimerCreateTimerTask+0x74>
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	e7fe      	b.n	8006c4a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006c4c:	697b      	ldr	r3, [r7, #20]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	200049a4 	.word	0x200049a4
 8006c5c:	08008214 	.word	0x08008214
 8006c60:	08006d99 	.word	0x08006d99
 8006c64:	200049a8 	.word	0x200049a8

08006c68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08a      	sub	sp, #40	; 0x28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d109      	bne.n	8006c94 <xTimerGenericCommand+0x2c>
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	623b      	str	r3, [r7, #32]
 8006c92:	e7fe      	b.n	8006c92 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c94:	4b19      	ldr	r3, [pc, #100]	; (8006cfc <xTimerGenericCommand+0x94>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d02a      	beq.n	8006cf2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b05      	cmp	r3, #5
 8006cac:	dc18      	bgt.n	8006ce0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006cae:	f7ff feb5 	bl	8006a1c <xTaskGetSchedulerState>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d109      	bne.n	8006ccc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006cb8:	4b10      	ldr	r3, [pc, #64]	; (8006cfc <xTimerGenericCommand+0x94>)
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	f107 0110 	add.w	r1, r7, #16
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc4:	f7fe fccc 	bl	8005660 <xQueueGenericSend>
 8006cc8:	6278      	str	r0, [r7, #36]	; 0x24
 8006cca:	e012      	b.n	8006cf2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006ccc:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <xTimerGenericCommand+0x94>)
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	f107 0110 	add.w	r1, r7, #16
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f7fe fcc2 	bl	8005660 <xQueueGenericSend>
 8006cdc:	6278      	str	r0, [r7, #36]	; 0x24
 8006cde:	e008      	b.n	8006cf2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ce0:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <xTimerGenericCommand+0x94>)
 8006ce2:	6818      	ldr	r0, [r3, #0]
 8006ce4:	f107 0110 	add.w	r1, r7, #16
 8006ce8:	2300      	movs	r3, #0
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	f7fe fdb2 	bl	8005854 <xQueueGenericSendFromISR>
 8006cf0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3728      	adds	r7, #40	; 0x28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	200049a4 	.word	0x200049a4

08006d00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af02      	add	r7, sp, #8
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d0a:	4b22      	ldr	r3, [pc, #136]	; (8006d94 <prvProcessExpiredTimer+0x94>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fd fed3 	bl	8004ac4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d021      	beq.n	8006d70 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	699a      	ldr	r2, [r3, #24]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	18d1      	adds	r1, r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	6978      	ldr	r0, [r7, #20]
 8006d3a:	f000 f8d1 	bl	8006ee0 <prvInsertTimerInActiveList>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01e      	beq.n	8006d82 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d44:	2300      	movs	r3, #0
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	6978      	ldr	r0, [r7, #20]
 8006d50:	f7ff ff8a 	bl	8006c68 <xTimerGenericCommand>
 8006d54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d112      	bne.n	8006d82 <prvProcessExpiredTimer+0x82>
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	e7fe      	b.n	8006d6e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	6978      	ldr	r0, [r7, #20]
 8006d88:	4798      	blx	r3
}
 8006d8a:	bf00      	nop
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	2000499c 	.word	0x2000499c

08006d98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006da0:	f107 0308 	add.w	r3, r7, #8
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 f857 	bl	8006e58 <prvGetNextExpireTime>
 8006daa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4619      	mov	r1, r3
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 f803 	bl	8006dbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006db6:	f000 f8d5 	bl	8006f64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006dba:	e7f1      	b.n	8006da0 <prvTimerTask+0x8>

08006dbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006dc6:	f7ff fa57 	bl	8006278 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dca:	f107 0308 	add.w	r3, r7, #8
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 f866 	bl	8006ea0 <prvSampleTimeNow>
 8006dd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d130      	bne.n	8006e3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <prvProcessTimerOrBlockTask+0x3c>
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d806      	bhi.n	8006df8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006dea:	f7ff fa53 	bl	8006294 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006dee:	68f9      	ldr	r1, [r7, #12]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff ff85 	bl	8006d00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006df6:	e024      	b.n	8006e42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d008      	beq.n	8006e10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006dfe:	4b13      	ldr	r3, [pc, #76]	; (8006e4c <prvProcessTimerOrBlockTask+0x90>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <prvProcessTimerOrBlockTask+0x50>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e000      	b.n	8006e0e <prvProcessTimerOrBlockTask+0x52>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e10:	4b0f      	ldr	r3, [pc, #60]	; (8006e50 <prvProcessTimerOrBlockTask+0x94>)
 8006e12:	6818      	ldr	r0, [r3, #0]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	f7fe ffc1 	bl	8005da4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e22:	f7ff fa37 	bl	8006294 <xTaskResumeAll>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e2c:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <prvProcessTimerOrBlockTask+0x98>)
 8006e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	f3bf 8f6f 	isb	sy
}
 8006e3c:	e001      	b.n	8006e42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e3e:	f7ff fa29 	bl	8006294 <xTaskResumeAll>
}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	200049a0 	.word	0x200049a0
 8006e50:	200049a4 	.word	0x200049a4
 8006e54:	e000ed04 	.word	0xe000ed04

08006e58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e60:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <prvGetNextExpireTime+0x44>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <prvGetNextExpireTime+0x16>
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	e000      	b.n	8006e70 <prvGetNextExpireTime+0x18>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d105      	bne.n	8006e88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e7c:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <prvGetNextExpireTime+0x44>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	60fb      	str	r3, [r7, #12]
 8006e86:	e001      	b.n	8006e8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	2000499c 	.word	0x2000499c

08006ea0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ea8:	f7ff fa90 	bl	80063cc <xTaskGetTickCount>
 8006eac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006eae:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <prvSampleTimeNow+0x3c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d205      	bcs.n	8006ec4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006eb8:	f000 f930 	bl	800711c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	e002      	b.n	8006eca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006eca:	4a04      	ldr	r2, [pc, #16]	; (8006edc <prvSampleTimeNow+0x3c>)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	200049ac 	.word	0x200049ac

08006ee0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d812      	bhi.n	8006f2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	1ad2      	subs	r2, r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d302      	bcc.n	8006f1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f14:	2301      	movs	r3, #1
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	e01b      	b.n	8006f52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f1a:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <prvInsertTimerInActiveList+0x7c>)
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3304      	adds	r3, #4
 8006f22:	4619      	mov	r1, r3
 8006f24:	4610      	mov	r0, r2
 8006f26:	f7fd fd94 	bl	8004a52 <vListInsert>
 8006f2a:	e012      	b.n	8006f52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d206      	bcs.n	8006f42 <prvInsertTimerInActiveList+0x62>
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d302      	bcc.n	8006f42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	e007      	b.n	8006f52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f42:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <prvInsertTimerInActiveList+0x80>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	f7fd fd80 	bl	8004a52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f52:	697b      	ldr	r3, [r7, #20]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	200049a0 	.word	0x200049a0
 8006f60:	2000499c 	.word	0x2000499c

08006f64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08e      	sub	sp, #56	; 0x38
 8006f68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f6a:	e0c6      	b.n	80070fa <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	da17      	bge.n	8006fa2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f72:	1d3b      	adds	r3, r7, #4
 8006f74:	3304      	adds	r3, #4
 8006f76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d109      	bne.n	8006f92 <prvProcessReceivedCommands+0x2e>
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	61fb      	str	r3, [r7, #28]
 8006f90:	e7fe      	b.n	8006f90 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f98:	6850      	ldr	r0, [r2, #4]
 8006f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f9c:	6892      	ldr	r2, [r2, #8]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f2c0 80a8 	blt.w	80070fa <prvProcessReceivedCommands+0x196>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d004      	beq.n	8006fc0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	3304      	adds	r3, #4
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fd fd82 	bl	8004ac4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff ff6c 	bl	8006ea0 <prvSampleTimeNow>
 8006fc8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b09      	cmp	r3, #9
 8006fce:	f200 8093 	bhi.w	80070f8 <prvProcessReceivedCommands+0x194>
 8006fd2:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <prvProcessReceivedCommands+0x74>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08007001 	.word	0x08007001
 8006fdc:	08007001 	.word	0x08007001
 8006fe0:	08007001 	.word	0x08007001
 8006fe4:	08007073 	.word	0x08007073
 8006fe8:	08007087 	.word	0x08007087
 8006fec:	080070cf 	.word	0x080070cf
 8006ff0:	08007001 	.word	0x08007001
 8006ff4:	08007001 	.word	0x08007001
 8006ff8:	08007073 	.word	0x08007073
 8006ffc:	08007087 	.word	0x08007087
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007006:	f043 0301 	orr.w	r3, r3, #1
 800700a:	b2da      	uxtb	r2, r3
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	18d1      	adds	r1, r2, r3
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007020:	f7ff ff5e 	bl	8006ee0 <prvInsertTimerInActiveList>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d067      	beq.n	80070fa <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007030:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d05c      	beq.n	80070fa <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	441a      	add	r2, r3
 8007048:	2300      	movs	r3, #0
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	2300      	movs	r3, #0
 800704e:	2100      	movs	r1, #0
 8007050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007052:	f7ff fe09 	bl	8006c68 <xTimerGenericCommand>
 8007056:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d14d      	bne.n	80070fa <prvProcessReceivedCommands+0x196>
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	61bb      	str	r3, [r7, #24]
 8007070:	e7fe      	b.n	8007070 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007078:	f023 0301 	bic.w	r3, r3, #1
 800707c:	b2da      	uxtb	r2, r3
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007080:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007084:	e039      	b.n	80070fa <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800708c:	f043 0301 	orr.w	r3, r3, #1
 8007090:	b2da      	uxtb	r2, r3
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <prvProcessReceivedCommands+0x156>
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	e7fe      	b.n	80070b8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	699a      	ldr	r2, [r3, #24]
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	18d1      	adds	r1, r2, r3
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070c8:	f7ff ff0a 	bl	8006ee0 <prvInsertTimerInActiveList>
					break;
 80070cc:	e015      	b.n	80070fa <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d103      	bne.n	80070e4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80070dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070de:	f7fe f821 	bl	8005124 <vPortFree>
 80070e2:	e00a      	b.n	80070fa <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ea:	f023 0301 	bic.w	r3, r3, #1
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80070f6:	e000      	b.n	80070fa <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
 80070f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070fa:	4b07      	ldr	r3, [pc, #28]	; (8007118 <prvProcessReceivedCommands+0x1b4>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	1d39      	adds	r1, r7, #4
 8007100:	2200      	movs	r2, #0
 8007102:	4618      	mov	r0, r3
 8007104:	f7fe fc3a 	bl	800597c <xQueueReceive>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	f47f af2e 	bne.w	8006f6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007110:	bf00      	nop
 8007112:	3730      	adds	r7, #48	; 0x30
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	200049a4 	.word	0x200049a4

0800711c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007122:	e047      	b.n	80071b4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007124:	4b2d      	ldr	r3, [pc, #180]	; (80071dc <prvSwitchTimerLists+0xc0>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800712e:	4b2b      	ldr	r3, [pc, #172]	; (80071dc <prvSwitchTimerLists+0xc0>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	3304      	adds	r3, #4
 800713c:	4618      	mov	r0, r3
 800713e:	f7fd fcc1 	bl	8004ac4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	6938      	ldr	r0, [r7, #16]
 8007148:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d02d      	beq.n	80071b4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	699a      	ldr	r2, [r3, #24]
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	4413      	add	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	429a      	cmp	r2, r3
 8007168:	d90e      	bls.n	8007188 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007176:	4b19      	ldr	r3, [pc, #100]	; (80071dc <prvSwitchTimerLists+0xc0>)
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	3304      	adds	r3, #4
 800717e:	4619      	mov	r1, r3
 8007180:	4610      	mov	r0, r2
 8007182:	f7fd fc66 	bl	8004a52 <vListInsert>
 8007186:	e015      	b.n	80071b4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007188:	2300      	movs	r3, #0
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	2300      	movs	r3, #0
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	2100      	movs	r1, #0
 8007192:	6938      	ldr	r0, [r7, #16]
 8007194:	f7ff fd68 	bl	8006c68 <xTimerGenericCommand>
 8007198:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d109      	bne.n	80071b4 <prvSwitchTimerLists+0x98>
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	e7fe      	b.n	80071b2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071b4:	4b09      	ldr	r3, [pc, #36]	; (80071dc <prvSwitchTimerLists+0xc0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1b2      	bne.n	8007124 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071be:	4b07      	ldr	r3, [pc, #28]	; (80071dc <prvSwitchTimerLists+0xc0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80071c4:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <prvSwitchTimerLists+0xc4>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a04      	ldr	r2, [pc, #16]	; (80071dc <prvSwitchTimerLists+0xc0>)
 80071ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80071cc:	4a04      	ldr	r2, [pc, #16]	; (80071e0 <prvSwitchTimerLists+0xc4>)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6013      	str	r3, [r2, #0]
}
 80071d2:	bf00      	nop
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	2000499c 	.word	0x2000499c
 80071e0:	200049a0 	.word	0x200049a0

080071e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80071ea:	f7fd fdbf 	bl	8004d6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80071ee:	4b15      	ldr	r3, [pc, #84]	; (8007244 <prvCheckForValidListAndQueue+0x60>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d120      	bne.n	8007238 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80071f6:	4814      	ldr	r0, [pc, #80]	; (8007248 <prvCheckForValidListAndQueue+0x64>)
 80071f8:	f7fd fbda 	bl	80049b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80071fc:	4813      	ldr	r0, [pc, #76]	; (800724c <prvCheckForValidListAndQueue+0x68>)
 80071fe:	f7fd fbd7 	bl	80049b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007202:	4b13      	ldr	r3, [pc, #76]	; (8007250 <prvCheckForValidListAndQueue+0x6c>)
 8007204:	4a10      	ldr	r2, [pc, #64]	; (8007248 <prvCheckForValidListAndQueue+0x64>)
 8007206:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007208:	4b12      	ldr	r3, [pc, #72]	; (8007254 <prvCheckForValidListAndQueue+0x70>)
 800720a:	4a10      	ldr	r2, [pc, #64]	; (800724c <prvCheckForValidListAndQueue+0x68>)
 800720c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800720e:	2300      	movs	r3, #0
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	4b11      	ldr	r3, [pc, #68]	; (8007258 <prvCheckForValidListAndQueue+0x74>)
 8007214:	4a11      	ldr	r2, [pc, #68]	; (800725c <prvCheckForValidListAndQueue+0x78>)
 8007216:	2110      	movs	r1, #16
 8007218:	200a      	movs	r0, #10
 800721a:	f7fe f8ff 	bl	800541c <xQueueGenericCreateStatic>
 800721e:	4602      	mov	r2, r0
 8007220:	4b08      	ldr	r3, [pc, #32]	; (8007244 <prvCheckForValidListAndQueue+0x60>)
 8007222:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007224:	4b07      	ldr	r3, [pc, #28]	; (8007244 <prvCheckForValidListAndQueue+0x60>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d005      	beq.n	8007238 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800722c:	4b05      	ldr	r3, [pc, #20]	; (8007244 <prvCheckForValidListAndQueue+0x60>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	490b      	ldr	r1, [pc, #44]	; (8007260 <prvCheckForValidListAndQueue+0x7c>)
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe fd8e 	bl	8005d54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007238:	f7fd fdc6 	bl	8004dc8 <vPortExitCritical>
}
 800723c:	bf00      	nop
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	200049a4 	.word	0x200049a4
 8007248:	20004974 	.word	0x20004974
 800724c:	20004988 	.word	0x20004988
 8007250:	2000499c 	.word	0x2000499c
 8007254:	200049a0 	.word	0x200049a0
 8007258:	20004a50 	.word	0x20004a50
 800725c:	200049b0 	.word	0x200049b0
 8007260:	0800821c 	.word	0x0800821c

08007264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800729c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007268:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800726a:	e003      	b.n	8007274 <LoopCopyDataInit>

0800726c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800726c:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800726e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007270:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007272:	3104      	adds	r1, #4

08007274 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007274:	480b      	ldr	r0, [pc, #44]	; (80072a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007276:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007278:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800727a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800727c:	d3f6      	bcc.n	800726c <CopyDataInit>
  ldr  r2, =_sbss
 800727e:	4a0b      	ldr	r2, [pc, #44]	; (80072ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007280:	e002      	b.n	8007288 <LoopFillZerobss>

08007282 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007282:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007284:	f842 3b04 	str.w	r3, [r2], #4

08007288 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007288:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800728a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800728c:	d3f9      	bcc.n	8007282 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800728e:	f7f9 fca5 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007292:	f000 f817 	bl	80072c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007296:	f7f9 faf3 	bl	8000880 <main>
  bx  lr    
 800729a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800729c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80072a0:	08008340 	.word	0x08008340
  ldr  r0, =_sdata
 80072a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80072a8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80072ac:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80072b0:	20004bb0 	.word	0x20004bb0

080072b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80072b4:	e7fe      	b.n	80072b4 <ADC_IRQHandler>
	...

080072b8 <__errno>:
 80072b8:	4b01      	ldr	r3, [pc, #4]	; (80072c0 <__errno+0x8>)
 80072ba:	6818      	ldr	r0, [r3, #0]
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	20000014 	.word	0x20000014

080072c4 <__libc_init_array>:
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	4e0d      	ldr	r6, [pc, #52]	; (80072fc <__libc_init_array+0x38>)
 80072c8:	4c0d      	ldr	r4, [pc, #52]	; (8007300 <__libc_init_array+0x3c>)
 80072ca:	1ba4      	subs	r4, r4, r6
 80072cc:	10a4      	asrs	r4, r4, #2
 80072ce:	2500      	movs	r5, #0
 80072d0:	42a5      	cmp	r5, r4
 80072d2:	d109      	bne.n	80072e8 <__libc_init_array+0x24>
 80072d4:	4e0b      	ldr	r6, [pc, #44]	; (8007304 <__libc_init_array+0x40>)
 80072d6:	4c0c      	ldr	r4, [pc, #48]	; (8007308 <__libc_init_array+0x44>)
 80072d8:	f000 ff24 	bl	8008124 <_init>
 80072dc:	1ba4      	subs	r4, r4, r6
 80072de:	10a4      	asrs	r4, r4, #2
 80072e0:	2500      	movs	r5, #0
 80072e2:	42a5      	cmp	r5, r4
 80072e4:	d105      	bne.n	80072f2 <__libc_init_array+0x2e>
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072ec:	4798      	blx	r3
 80072ee:	3501      	adds	r5, #1
 80072f0:	e7ee      	b.n	80072d0 <__libc_init_array+0xc>
 80072f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072f6:	4798      	blx	r3
 80072f8:	3501      	adds	r5, #1
 80072fa:	e7f2      	b.n	80072e2 <__libc_init_array+0x1e>
 80072fc:	08008338 	.word	0x08008338
 8007300:	08008338 	.word	0x08008338
 8007304:	08008338 	.word	0x08008338
 8007308:	0800833c 	.word	0x0800833c

0800730c <memcpy>:
 800730c:	b510      	push	{r4, lr}
 800730e:	1e43      	subs	r3, r0, #1
 8007310:	440a      	add	r2, r1
 8007312:	4291      	cmp	r1, r2
 8007314:	d100      	bne.n	8007318 <memcpy+0xc>
 8007316:	bd10      	pop	{r4, pc}
 8007318:	f811 4b01 	ldrb.w	r4, [r1], #1
 800731c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007320:	e7f7      	b.n	8007312 <memcpy+0x6>

08007322 <memset>:
 8007322:	4402      	add	r2, r0
 8007324:	4603      	mov	r3, r0
 8007326:	4293      	cmp	r3, r2
 8007328:	d100      	bne.n	800732c <memset+0xa>
 800732a:	4770      	bx	lr
 800732c:	f803 1b01 	strb.w	r1, [r3], #1
 8007330:	e7f9      	b.n	8007326 <memset+0x4>
	...

08007334 <iprintf>:
 8007334:	b40f      	push	{r0, r1, r2, r3}
 8007336:	4b0a      	ldr	r3, [pc, #40]	; (8007360 <iprintf+0x2c>)
 8007338:	b513      	push	{r0, r1, r4, lr}
 800733a:	681c      	ldr	r4, [r3, #0]
 800733c:	b124      	cbz	r4, 8007348 <iprintf+0x14>
 800733e:	69a3      	ldr	r3, [r4, #24]
 8007340:	b913      	cbnz	r3, 8007348 <iprintf+0x14>
 8007342:	4620      	mov	r0, r4
 8007344:	f000 f84e 	bl	80073e4 <__sinit>
 8007348:	ab05      	add	r3, sp, #20
 800734a:	9a04      	ldr	r2, [sp, #16]
 800734c:	68a1      	ldr	r1, [r4, #8]
 800734e:	9301      	str	r3, [sp, #4]
 8007350:	4620      	mov	r0, r4
 8007352:	f000 f959 	bl	8007608 <_vfiprintf_r>
 8007356:	b002      	add	sp, #8
 8007358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800735c:	b004      	add	sp, #16
 800735e:	4770      	bx	lr
 8007360:	20000014 	.word	0x20000014

08007364 <_cleanup_r>:
 8007364:	4901      	ldr	r1, [pc, #4]	; (800736c <_cleanup_r+0x8>)
 8007366:	f000 b8a9 	b.w	80074bc <_fwalk_reent>
 800736a:	bf00      	nop
 800736c:	08007edd 	.word	0x08007edd

08007370 <std.isra.0>:
 8007370:	2300      	movs	r3, #0
 8007372:	b510      	push	{r4, lr}
 8007374:	4604      	mov	r4, r0
 8007376:	6003      	str	r3, [r0, #0]
 8007378:	6043      	str	r3, [r0, #4]
 800737a:	6083      	str	r3, [r0, #8]
 800737c:	8181      	strh	r1, [r0, #12]
 800737e:	6643      	str	r3, [r0, #100]	; 0x64
 8007380:	81c2      	strh	r2, [r0, #14]
 8007382:	6103      	str	r3, [r0, #16]
 8007384:	6143      	str	r3, [r0, #20]
 8007386:	6183      	str	r3, [r0, #24]
 8007388:	4619      	mov	r1, r3
 800738a:	2208      	movs	r2, #8
 800738c:	305c      	adds	r0, #92	; 0x5c
 800738e:	f7ff ffc8 	bl	8007322 <memset>
 8007392:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <std.isra.0+0x38>)
 8007394:	6263      	str	r3, [r4, #36]	; 0x24
 8007396:	4b05      	ldr	r3, [pc, #20]	; (80073ac <std.isra.0+0x3c>)
 8007398:	62a3      	str	r3, [r4, #40]	; 0x28
 800739a:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <std.isra.0+0x40>)
 800739c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800739e:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <std.isra.0+0x44>)
 80073a0:	6224      	str	r4, [r4, #32]
 80073a2:	6323      	str	r3, [r4, #48]	; 0x30
 80073a4:	bd10      	pop	{r4, pc}
 80073a6:	bf00      	nop
 80073a8:	08007b81 	.word	0x08007b81
 80073ac:	08007ba3 	.word	0x08007ba3
 80073b0:	08007bdb 	.word	0x08007bdb
 80073b4:	08007bff 	.word	0x08007bff

080073b8 <__sfmoreglue>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	1e4a      	subs	r2, r1, #1
 80073bc:	2568      	movs	r5, #104	; 0x68
 80073be:	4355      	muls	r5, r2
 80073c0:	460e      	mov	r6, r1
 80073c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073c6:	f000 f897 	bl	80074f8 <_malloc_r>
 80073ca:	4604      	mov	r4, r0
 80073cc:	b140      	cbz	r0, 80073e0 <__sfmoreglue+0x28>
 80073ce:	2100      	movs	r1, #0
 80073d0:	e880 0042 	stmia.w	r0, {r1, r6}
 80073d4:	300c      	adds	r0, #12
 80073d6:	60a0      	str	r0, [r4, #8]
 80073d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073dc:	f7ff ffa1 	bl	8007322 <memset>
 80073e0:	4620      	mov	r0, r4
 80073e2:	bd70      	pop	{r4, r5, r6, pc}

080073e4 <__sinit>:
 80073e4:	6983      	ldr	r3, [r0, #24]
 80073e6:	b510      	push	{r4, lr}
 80073e8:	4604      	mov	r4, r0
 80073ea:	bb33      	cbnz	r3, 800743a <__sinit+0x56>
 80073ec:	6483      	str	r3, [r0, #72]	; 0x48
 80073ee:	64c3      	str	r3, [r0, #76]	; 0x4c
 80073f0:	6503      	str	r3, [r0, #80]	; 0x50
 80073f2:	4b12      	ldr	r3, [pc, #72]	; (800743c <__sinit+0x58>)
 80073f4:	4a12      	ldr	r2, [pc, #72]	; (8007440 <__sinit+0x5c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6282      	str	r2, [r0, #40]	; 0x28
 80073fa:	4298      	cmp	r0, r3
 80073fc:	bf04      	itt	eq
 80073fe:	2301      	moveq	r3, #1
 8007400:	6183      	streq	r3, [r0, #24]
 8007402:	f000 f81f 	bl	8007444 <__sfp>
 8007406:	6060      	str	r0, [r4, #4]
 8007408:	4620      	mov	r0, r4
 800740a:	f000 f81b 	bl	8007444 <__sfp>
 800740e:	60a0      	str	r0, [r4, #8]
 8007410:	4620      	mov	r0, r4
 8007412:	f000 f817 	bl	8007444 <__sfp>
 8007416:	2200      	movs	r2, #0
 8007418:	60e0      	str	r0, [r4, #12]
 800741a:	2104      	movs	r1, #4
 800741c:	6860      	ldr	r0, [r4, #4]
 800741e:	f7ff ffa7 	bl	8007370 <std.isra.0>
 8007422:	2201      	movs	r2, #1
 8007424:	2109      	movs	r1, #9
 8007426:	68a0      	ldr	r0, [r4, #8]
 8007428:	f7ff ffa2 	bl	8007370 <std.isra.0>
 800742c:	2202      	movs	r2, #2
 800742e:	2112      	movs	r1, #18
 8007430:	68e0      	ldr	r0, [r4, #12]
 8007432:	f7ff ff9d 	bl	8007370 <std.isra.0>
 8007436:	2301      	movs	r3, #1
 8007438:	61a3      	str	r3, [r4, #24]
 800743a:	bd10      	pop	{r4, pc}
 800743c:	08008298 	.word	0x08008298
 8007440:	08007365 	.word	0x08007365

08007444 <__sfp>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	4b1c      	ldr	r3, [pc, #112]	; (80074b8 <__sfp+0x74>)
 8007448:	681e      	ldr	r6, [r3, #0]
 800744a:	69b3      	ldr	r3, [r6, #24]
 800744c:	4607      	mov	r7, r0
 800744e:	b913      	cbnz	r3, 8007456 <__sfp+0x12>
 8007450:	4630      	mov	r0, r6
 8007452:	f7ff ffc7 	bl	80073e4 <__sinit>
 8007456:	3648      	adds	r6, #72	; 0x48
 8007458:	68b4      	ldr	r4, [r6, #8]
 800745a:	6873      	ldr	r3, [r6, #4]
 800745c:	3b01      	subs	r3, #1
 800745e:	d503      	bpl.n	8007468 <__sfp+0x24>
 8007460:	6833      	ldr	r3, [r6, #0]
 8007462:	b133      	cbz	r3, 8007472 <__sfp+0x2e>
 8007464:	6836      	ldr	r6, [r6, #0]
 8007466:	e7f7      	b.n	8007458 <__sfp+0x14>
 8007468:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800746c:	b16d      	cbz	r5, 800748a <__sfp+0x46>
 800746e:	3468      	adds	r4, #104	; 0x68
 8007470:	e7f4      	b.n	800745c <__sfp+0x18>
 8007472:	2104      	movs	r1, #4
 8007474:	4638      	mov	r0, r7
 8007476:	f7ff ff9f 	bl	80073b8 <__sfmoreglue>
 800747a:	6030      	str	r0, [r6, #0]
 800747c:	2800      	cmp	r0, #0
 800747e:	d1f1      	bne.n	8007464 <__sfp+0x20>
 8007480:	230c      	movs	r3, #12
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	4604      	mov	r4, r0
 8007486:	4620      	mov	r0, r4
 8007488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800748a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800748e:	81e3      	strh	r3, [r4, #14]
 8007490:	2301      	movs	r3, #1
 8007492:	81a3      	strh	r3, [r4, #12]
 8007494:	6665      	str	r5, [r4, #100]	; 0x64
 8007496:	6025      	str	r5, [r4, #0]
 8007498:	60a5      	str	r5, [r4, #8]
 800749a:	6065      	str	r5, [r4, #4]
 800749c:	6125      	str	r5, [r4, #16]
 800749e:	6165      	str	r5, [r4, #20]
 80074a0:	61a5      	str	r5, [r4, #24]
 80074a2:	2208      	movs	r2, #8
 80074a4:	4629      	mov	r1, r5
 80074a6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074aa:	f7ff ff3a 	bl	8007322 <memset>
 80074ae:	6365      	str	r5, [r4, #52]	; 0x34
 80074b0:	63a5      	str	r5, [r4, #56]	; 0x38
 80074b2:	64a5      	str	r5, [r4, #72]	; 0x48
 80074b4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80074b6:	e7e6      	b.n	8007486 <__sfp+0x42>
 80074b8:	08008298 	.word	0x08008298

080074bc <_fwalk_reent>:
 80074bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074c0:	4680      	mov	r8, r0
 80074c2:	4689      	mov	r9, r1
 80074c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074c8:	2600      	movs	r6, #0
 80074ca:	b914      	cbnz	r4, 80074d2 <_fwalk_reent+0x16>
 80074cc:	4630      	mov	r0, r6
 80074ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074d2:	68a5      	ldr	r5, [r4, #8]
 80074d4:	6867      	ldr	r7, [r4, #4]
 80074d6:	3f01      	subs	r7, #1
 80074d8:	d501      	bpl.n	80074de <_fwalk_reent+0x22>
 80074da:	6824      	ldr	r4, [r4, #0]
 80074dc:	e7f5      	b.n	80074ca <_fwalk_reent+0xe>
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d907      	bls.n	80074f4 <_fwalk_reent+0x38>
 80074e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074e8:	3301      	adds	r3, #1
 80074ea:	d003      	beq.n	80074f4 <_fwalk_reent+0x38>
 80074ec:	4629      	mov	r1, r5
 80074ee:	4640      	mov	r0, r8
 80074f0:	47c8      	blx	r9
 80074f2:	4306      	orrs	r6, r0
 80074f4:	3568      	adds	r5, #104	; 0x68
 80074f6:	e7ee      	b.n	80074d6 <_fwalk_reent+0x1a>

080074f8 <_malloc_r>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	1ccd      	adds	r5, r1, #3
 80074fc:	f025 0503 	bic.w	r5, r5, #3
 8007500:	3508      	adds	r5, #8
 8007502:	2d0c      	cmp	r5, #12
 8007504:	bf38      	it	cc
 8007506:	250c      	movcc	r5, #12
 8007508:	2d00      	cmp	r5, #0
 800750a:	4606      	mov	r6, r0
 800750c:	db01      	blt.n	8007512 <_malloc_r+0x1a>
 800750e:	42a9      	cmp	r1, r5
 8007510:	d903      	bls.n	800751a <_malloc_r+0x22>
 8007512:	230c      	movs	r3, #12
 8007514:	6033      	str	r3, [r6, #0]
 8007516:	2000      	movs	r0, #0
 8007518:	bd70      	pop	{r4, r5, r6, pc}
 800751a:	f000 fd7f 	bl	800801c <__malloc_lock>
 800751e:	4a23      	ldr	r2, [pc, #140]	; (80075ac <_malloc_r+0xb4>)
 8007520:	6814      	ldr	r4, [r2, #0]
 8007522:	4621      	mov	r1, r4
 8007524:	b991      	cbnz	r1, 800754c <_malloc_r+0x54>
 8007526:	4c22      	ldr	r4, [pc, #136]	; (80075b0 <_malloc_r+0xb8>)
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	b91b      	cbnz	r3, 8007534 <_malloc_r+0x3c>
 800752c:	4630      	mov	r0, r6
 800752e:	f000 fb17 	bl	8007b60 <_sbrk_r>
 8007532:	6020      	str	r0, [r4, #0]
 8007534:	4629      	mov	r1, r5
 8007536:	4630      	mov	r0, r6
 8007538:	f000 fb12 	bl	8007b60 <_sbrk_r>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d126      	bne.n	800758e <_malloc_r+0x96>
 8007540:	230c      	movs	r3, #12
 8007542:	6033      	str	r3, [r6, #0]
 8007544:	4630      	mov	r0, r6
 8007546:	f000 fd6a 	bl	800801e <__malloc_unlock>
 800754a:	e7e4      	b.n	8007516 <_malloc_r+0x1e>
 800754c:	680b      	ldr	r3, [r1, #0]
 800754e:	1b5b      	subs	r3, r3, r5
 8007550:	d41a      	bmi.n	8007588 <_malloc_r+0x90>
 8007552:	2b0b      	cmp	r3, #11
 8007554:	d90f      	bls.n	8007576 <_malloc_r+0x7e>
 8007556:	600b      	str	r3, [r1, #0]
 8007558:	50cd      	str	r5, [r1, r3]
 800755a:	18cc      	adds	r4, r1, r3
 800755c:	4630      	mov	r0, r6
 800755e:	f000 fd5e 	bl	800801e <__malloc_unlock>
 8007562:	f104 000b 	add.w	r0, r4, #11
 8007566:	1d23      	adds	r3, r4, #4
 8007568:	f020 0007 	bic.w	r0, r0, #7
 800756c:	1ac3      	subs	r3, r0, r3
 800756e:	d01b      	beq.n	80075a8 <_malloc_r+0xb0>
 8007570:	425a      	negs	r2, r3
 8007572:	50e2      	str	r2, [r4, r3]
 8007574:	bd70      	pop	{r4, r5, r6, pc}
 8007576:	428c      	cmp	r4, r1
 8007578:	bf0d      	iteet	eq
 800757a:	6863      	ldreq	r3, [r4, #4]
 800757c:	684b      	ldrne	r3, [r1, #4]
 800757e:	6063      	strne	r3, [r4, #4]
 8007580:	6013      	streq	r3, [r2, #0]
 8007582:	bf18      	it	ne
 8007584:	460c      	movne	r4, r1
 8007586:	e7e9      	b.n	800755c <_malloc_r+0x64>
 8007588:	460c      	mov	r4, r1
 800758a:	6849      	ldr	r1, [r1, #4]
 800758c:	e7ca      	b.n	8007524 <_malloc_r+0x2c>
 800758e:	1cc4      	adds	r4, r0, #3
 8007590:	f024 0403 	bic.w	r4, r4, #3
 8007594:	42a0      	cmp	r0, r4
 8007596:	d005      	beq.n	80075a4 <_malloc_r+0xac>
 8007598:	1a21      	subs	r1, r4, r0
 800759a:	4630      	mov	r0, r6
 800759c:	f000 fae0 	bl	8007b60 <_sbrk_r>
 80075a0:	3001      	adds	r0, #1
 80075a2:	d0cd      	beq.n	8007540 <_malloc_r+0x48>
 80075a4:	6025      	str	r5, [r4, #0]
 80075a6:	e7d9      	b.n	800755c <_malloc_r+0x64>
 80075a8:	bd70      	pop	{r4, r5, r6, pc}
 80075aa:	bf00      	nop
 80075ac:	20004aa0 	.word	0x20004aa0
 80075b0:	20004aa4 	.word	0x20004aa4

080075b4 <__sfputc_r>:
 80075b4:	6893      	ldr	r3, [r2, #8]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	b410      	push	{r4}
 80075bc:	6093      	str	r3, [r2, #8]
 80075be:	da09      	bge.n	80075d4 <__sfputc_r+0x20>
 80075c0:	6994      	ldr	r4, [r2, #24]
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	db02      	blt.n	80075cc <__sfputc_r+0x18>
 80075c6:	b2cb      	uxtb	r3, r1
 80075c8:	2b0a      	cmp	r3, #10
 80075ca:	d103      	bne.n	80075d4 <__sfputc_r+0x20>
 80075cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075d0:	f000 bb1a 	b.w	8007c08 <__swbuf_r>
 80075d4:	6813      	ldr	r3, [r2, #0]
 80075d6:	1c58      	adds	r0, r3, #1
 80075d8:	6010      	str	r0, [r2, #0]
 80075da:	7019      	strb	r1, [r3, #0]
 80075dc:	b2c8      	uxtb	r0, r1
 80075de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <__sfputs_r>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	4606      	mov	r6, r0
 80075e8:	460f      	mov	r7, r1
 80075ea:	4614      	mov	r4, r2
 80075ec:	18d5      	adds	r5, r2, r3
 80075ee:	42ac      	cmp	r4, r5
 80075f0:	d101      	bne.n	80075f6 <__sfputs_r+0x12>
 80075f2:	2000      	movs	r0, #0
 80075f4:	e007      	b.n	8007606 <__sfputs_r+0x22>
 80075f6:	463a      	mov	r2, r7
 80075f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fc:	4630      	mov	r0, r6
 80075fe:	f7ff ffd9 	bl	80075b4 <__sfputc_r>
 8007602:	1c43      	adds	r3, r0, #1
 8007604:	d1f3      	bne.n	80075ee <__sfputs_r+0xa>
 8007606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007608 <_vfiprintf_r>:
 8007608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	b09d      	sub	sp, #116	; 0x74
 800760e:	460c      	mov	r4, r1
 8007610:	4617      	mov	r7, r2
 8007612:	9303      	str	r3, [sp, #12]
 8007614:	4606      	mov	r6, r0
 8007616:	b118      	cbz	r0, 8007620 <_vfiprintf_r+0x18>
 8007618:	6983      	ldr	r3, [r0, #24]
 800761a:	b90b      	cbnz	r3, 8007620 <_vfiprintf_r+0x18>
 800761c:	f7ff fee2 	bl	80073e4 <__sinit>
 8007620:	4b7c      	ldr	r3, [pc, #496]	; (8007814 <_vfiprintf_r+0x20c>)
 8007622:	429c      	cmp	r4, r3
 8007624:	d157      	bne.n	80076d6 <_vfiprintf_r+0xce>
 8007626:	6874      	ldr	r4, [r6, #4]
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	0718      	lsls	r0, r3, #28
 800762c:	d55d      	bpl.n	80076ea <_vfiprintf_r+0xe2>
 800762e:	6923      	ldr	r3, [r4, #16]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d05a      	beq.n	80076ea <_vfiprintf_r+0xe2>
 8007634:	2300      	movs	r3, #0
 8007636:	9309      	str	r3, [sp, #36]	; 0x24
 8007638:	2320      	movs	r3, #32
 800763a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800763e:	2330      	movs	r3, #48	; 0x30
 8007640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007644:	f04f 0b01 	mov.w	fp, #1
 8007648:	46b8      	mov	r8, r7
 800764a:	4645      	mov	r5, r8
 800764c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d155      	bne.n	8007700 <_vfiprintf_r+0xf8>
 8007654:	ebb8 0a07 	subs.w	sl, r8, r7
 8007658:	d00b      	beq.n	8007672 <_vfiprintf_r+0x6a>
 800765a:	4653      	mov	r3, sl
 800765c:	463a      	mov	r2, r7
 800765e:	4621      	mov	r1, r4
 8007660:	4630      	mov	r0, r6
 8007662:	f7ff ffbf 	bl	80075e4 <__sfputs_r>
 8007666:	3001      	adds	r0, #1
 8007668:	f000 80c4 	beq.w	80077f4 <_vfiprintf_r+0x1ec>
 800766c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766e:	4453      	add	r3, sl
 8007670:	9309      	str	r3, [sp, #36]	; 0x24
 8007672:	f898 3000 	ldrb.w	r3, [r8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 80bc 	beq.w	80077f4 <_vfiprintf_r+0x1ec>
 800767c:	2300      	movs	r3, #0
 800767e:	f04f 32ff 	mov.w	r2, #4294967295
 8007682:	9304      	str	r3, [sp, #16]
 8007684:	9307      	str	r3, [sp, #28]
 8007686:	9205      	str	r2, [sp, #20]
 8007688:	9306      	str	r3, [sp, #24]
 800768a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800768e:	931a      	str	r3, [sp, #104]	; 0x68
 8007690:	2205      	movs	r2, #5
 8007692:	7829      	ldrb	r1, [r5, #0]
 8007694:	4860      	ldr	r0, [pc, #384]	; (8007818 <_vfiprintf_r+0x210>)
 8007696:	f7f8 fd9b 	bl	80001d0 <memchr>
 800769a:	f105 0801 	add.w	r8, r5, #1
 800769e:	9b04      	ldr	r3, [sp, #16]
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d131      	bne.n	8007708 <_vfiprintf_r+0x100>
 80076a4:	06d9      	lsls	r1, r3, #27
 80076a6:	bf44      	itt	mi
 80076a8:	2220      	movmi	r2, #32
 80076aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076ae:	071a      	lsls	r2, r3, #28
 80076b0:	bf44      	itt	mi
 80076b2:	222b      	movmi	r2, #43	; 0x2b
 80076b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076b8:	782a      	ldrb	r2, [r5, #0]
 80076ba:	2a2a      	cmp	r2, #42	; 0x2a
 80076bc:	d02c      	beq.n	8007718 <_vfiprintf_r+0x110>
 80076be:	9a07      	ldr	r2, [sp, #28]
 80076c0:	2100      	movs	r1, #0
 80076c2:	200a      	movs	r0, #10
 80076c4:	46a8      	mov	r8, r5
 80076c6:	3501      	adds	r5, #1
 80076c8:	f898 3000 	ldrb.w	r3, [r8]
 80076cc:	3b30      	subs	r3, #48	; 0x30
 80076ce:	2b09      	cmp	r3, #9
 80076d0:	d96d      	bls.n	80077ae <_vfiprintf_r+0x1a6>
 80076d2:	b371      	cbz	r1, 8007732 <_vfiprintf_r+0x12a>
 80076d4:	e026      	b.n	8007724 <_vfiprintf_r+0x11c>
 80076d6:	4b51      	ldr	r3, [pc, #324]	; (800781c <_vfiprintf_r+0x214>)
 80076d8:	429c      	cmp	r4, r3
 80076da:	d101      	bne.n	80076e0 <_vfiprintf_r+0xd8>
 80076dc:	68b4      	ldr	r4, [r6, #8]
 80076de:	e7a3      	b.n	8007628 <_vfiprintf_r+0x20>
 80076e0:	4b4f      	ldr	r3, [pc, #316]	; (8007820 <_vfiprintf_r+0x218>)
 80076e2:	429c      	cmp	r4, r3
 80076e4:	bf08      	it	eq
 80076e6:	68f4      	ldreq	r4, [r6, #12]
 80076e8:	e79e      	b.n	8007628 <_vfiprintf_r+0x20>
 80076ea:	4621      	mov	r1, r4
 80076ec:	4630      	mov	r0, r6
 80076ee:	f000 faef 	bl	8007cd0 <__swsetup_r>
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d09e      	beq.n	8007634 <_vfiprintf_r+0x2c>
 80076f6:	f04f 30ff 	mov.w	r0, #4294967295
 80076fa:	b01d      	add	sp, #116	; 0x74
 80076fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007700:	2b25      	cmp	r3, #37	; 0x25
 8007702:	d0a7      	beq.n	8007654 <_vfiprintf_r+0x4c>
 8007704:	46a8      	mov	r8, r5
 8007706:	e7a0      	b.n	800764a <_vfiprintf_r+0x42>
 8007708:	4a43      	ldr	r2, [pc, #268]	; (8007818 <_vfiprintf_r+0x210>)
 800770a:	1a80      	subs	r0, r0, r2
 800770c:	fa0b f000 	lsl.w	r0, fp, r0
 8007710:	4318      	orrs	r0, r3
 8007712:	9004      	str	r0, [sp, #16]
 8007714:	4645      	mov	r5, r8
 8007716:	e7bb      	b.n	8007690 <_vfiprintf_r+0x88>
 8007718:	9a03      	ldr	r2, [sp, #12]
 800771a:	1d11      	adds	r1, r2, #4
 800771c:	6812      	ldr	r2, [r2, #0]
 800771e:	9103      	str	r1, [sp, #12]
 8007720:	2a00      	cmp	r2, #0
 8007722:	db01      	blt.n	8007728 <_vfiprintf_r+0x120>
 8007724:	9207      	str	r2, [sp, #28]
 8007726:	e004      	b.n	8007732 <_vfiprintf_r+0x12a>
 8007728:	4252      	negs	r2, r2
 800772a:	f043 0302 	orr.w	r3, r3, #2
 800772e:	9207      	str	r2, [sp, #28]
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	f898 3000 	ldrb.w	r3, [r8]
 8007736:	2b2e      	cmp	r3, #46	; 0x2e
 8007738:	d110      	bne.n	800775c <_vfiprintf_r+0x154>
 800773a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800773e:	2b2a      	cmp	r3, #42	; 0x2a
 8007740:	f108 0101 	add.w	r1, r8, #1
 8007744:	d137      	bne.n	80077b6 <_vfiprintf_r+0x1ae>
 8007746:	9b03      	ldr	r3, [sp, #12]
 8007748:	1d1a      	adds	r2, r3, #4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	9203      	str	r2, [sp, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	bfb8      	it	lt
 8007752:	f04f 33ff 	movlt.w	r3, #4294967295
 8007756:	f108 0802 	add.w	r8, r8, #2
 800775a:	9305      	str	r3, [sp, #20]
 800775c:	4d31      	ldr	r5, [pc, #196]	; (8007824 <_vfiprintf_r+0x21c>)
 800775e:	f898 1000 	ldrb.w	r1, [r8]
 8007762:	2203      	movs	r2, #3
 8007764:	4628      	mov	r0, r5
 8007766:	f7f8 fd33 	bl	80001d0 <memchr>
 800776a:	b140      	cbz	r0, 800777e <_vfiprintf_r+0x176>
 800776c:	2340      	movs	r3, #64	; 0x40
 800776e:	1b40      	subs	r0, r0, r5
 8007770:	fa03 f000 	lsl.w	r0, r3, r0
 8007774:	9b04      	ldr	r3, [sp, #16]
 8007776:	4303      	orrs	r3, r0
 8007778:	9304      	str	r3, [sp, #16]
 800777a:	f108 0801 	add.w	r8, r8, #1
 800777e:	f898 1000 	ldrb.w	r1, [r8]
 8007782:	4829      	ldr	r0, [pc, #164]	; (8007828 <_vfiprintf_r+0x220>)
 8007784:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007788:	2206      	movs	r2, #6
 800778a:	f108 0701 	add.w	r7, r8, #1
 800778e:	f7f8 fd1f 	bl	80001d0 <memchr>
 8007792:	2800      	cmp	r0, #0
 8007794:	d034      	beq.n	8007800 <_vfiprintf_r+0x1f8>
 8007796:	4b25      	ldr	r3, [pc, #148]	; (800782c <_vfiprintf_r+0x224>)
 8007798:	bb03      	cbnz	r3, 80077dc <_vfiprintf_r+0x1d4>
 800779a:	9b03      	ldr	r3, [sp, #12]
 800779c:	3307      	adds	r3, #7
 800779e:	f023 0307 	bic.w	r3, r3, #7
 80077a2:	3308      	adds	r3, #8
 80077a4:	9303      	str	r3, [sp, #12]
 80077a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a8:	444b      	add	r3, r9
 80077aa:	9309      	str	r3, [sp, #36]	; 0x24
 80077ac:	e74c      	b.n	8007648 <_vfiprintf_r+0x40>
 80077ae:	fb00 3202 	mla	r2, r0, r2, r3
 80077b2:	2101      	movs	r1, #1
 80077b4:	e786      	b.n	80076c4 <_vfiprintf_r+0xbc>
 80077b6:	2300      	movs	r3, #0
 80077b8:	9305      	str	r3, [sp, #20]
 80077ba:	4618      	mov	r0, r3
 80077bc:	250a      	movs	r5, #10
 80077be:	4688      	mov	r8, r1
 80077c0:	3101      	adds	r1, #1
 80077c2:	f898 2000 	ldrb.w	r2, [r8]
 80077c6:	3a30      	subs	r2, #48	; 0x30
 80077c8:	2a09      	cmp	r2, #9
 80077ca:	d903      	bls.n	80077d4 <_vfiprintf_r+0x1cc>
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d0c5      	beq.n	800775c <_vfiprintf_r+0x154>
 80077d0:	9005      	str	r0, [sp, #20]
 80077d2:	e7c3      	b.n	800775c <_vfiprintf_r+0x154>
 80077d4:	fb05 2000 	mla	r0, r5, r0, r2
 80077d8:	2301      	movs	r3, #1
 80077da:	e7f0      	b.n	80077be <_vfiprintf_r+0x1b6>
 80077dc:	ab03      	add	r3, sp, #12
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	4622      	mov	r2, r4
 80077e2:	4b13      	ldr	r3, [pc, #76]	; (8007830 <_vfiprintf_r+0x228>)
 80077e4:	a904      	add	r1, sp, #16
 80077e6:	4630      	mov	r0, r6
 80077e8:	f3af 8000 	nop.w
 80077ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80077f0:	4681      	mov	r9, r0
 80077f2:	d1d8      	bne.n	80077a6 <_vfiprintf_r+0x19e>
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	065b      	lsls	r3, r3, #25
 80077f8:	f53f af7d 	bmi.w	80076f6 <_vfiprintf_r+0xee>
 80077fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077fe:	e77c      	b.n	80076fa <_vfiprintf_r+0xf2>
 8007800:	ab03      	add	r3, sp, #12
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	4622      	mov	r2, r4
 8007806:	4b0a      	ldr	r3, [pc, #40]	; (8007830 <_vfiprintf_r+0x228>)
 8007808:	a904      	add	r1, sp, #16
 800780a:	4630      	mov	r0, r6
 800780c:	f000 f888 	bl	8007920 <_printf_i>
 8007810:	e7ec      	b.n	80077ec <_vfiprintf_r+0x1e4>
 8007812:	bf00      	nop
 8007814:	080082bc 	.word	0x080082bc
 8007818:	080082fc 	.word	0x080082fc
 800781c:	080082dc 	.word	0x080082dc
 8007820:	0800829c 	.word	0x0800829c
 8007824:	08008302 	.word	0x08008302
 8007828:	08008306 	.word	0x08008306
 800782c:	00000000 	.word	0x00000000
 8007830:	080075e5 	.word	0x080075e5

08007834 <_printf_common>:
 8007834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007838:	4691      	mov	r9, r2
 800783a:	461f      	mov	r7, r3
 800783c:	688a      	ldr	r2, [r1, #8]
 800783e:	690b      	ldr	r3, [r1, #16]
 8007840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007844:	4293      	cmp	r3, r2
 8007846:	bfb8      	it	lt
 8007848:	4613      	movlt	r3, r2
 800784a:	f8c9 3000 	str.w	r3, [r9]
 800784e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007852:	4606      	mov	r6, r0
 8007854:	460c      	mov	r4, r1
 8007856:	b112      	cbz	r2, 800785e <_printf_common+0x2a>
 8007858:	3301      	adds	r3, #1
 800785a:	f8c9 3000 	str.w	r3, [r9]
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	0699      	lsls	r1, r3, #26
 8007862:	bf42      	ittt	mi
 8007864:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007868:	3302      	addmi	r3, #2
 800786a:	f8c9 3000 	strmi.w	r3, [r9]
 800786e:	6825      	ldr	r5, [r4, #0]
 8007870:	f015 0506 	ands.w	r5, r5, #6
 8007874:	d107      	bne.n	8007886 <_printf_common+0x52>
 8007876:	f104 0a19 	add.w	sl, r4, #25
 800787a:	68e3      	ldr	r3, [r4, #12]
 800787c:	f8d9 2000 	ldr.w	r2, [r9]
 8007880:	1a9b      	subs	r3, r3, r2
 8007882:	429d      	cmp	r5, r3
 8007884:	db29      	blt.n	80078da <_printf_common+0xa6>
 8007886:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800788a:	6822      	ldr	r2, [r4, #0]
 800788c:	3300      	adds	r3, #0
 800788e:	bf18      	it	ne
 8007890:	2301      	movne	r3, #1
 8007892:	0692      	lsls	r2, r2, #26
 8007894:	d42e      	bmi.n	80078f4 <_printf_common+0xc0>
 8007896:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800789a:	4639      	mov	r1, r7
 800789c:	4630      	mov	r0, r6
 800789e:	47c0      	blx	r8
 80078a0:	3001      	adds	r0, #1
 80078a2:	d021      	beq.n	80078e8 <_printf_common+0xb4>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	68e5      	ldr	r5, [r4, #12]
 80078a8:	f8d9 2000 	ldr.w	r2, [r9]
 80078ac:	f003 0306 	and.w	r3, r3, #6
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	bf08      	it	eq
 80078b4:	1aad      	subeq	r5, r5, r2
 80078b6:	68a3      	ldr	r3, [r4, #8]
 80078b8:	6922      	ldr	r2, [r4, #16]
 80078ba:	bf0c      	ite	eq
 80078bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078c0:	2500      	movne	r5, #0
 80078c2:	4293      	cmp	r3, r2
 80078c4:	bfc4      	itt	gt
 80078c6:	1a9b      	subgt	r3, r3, r2
 80078c8:	18ed      	addgt	r5, r5, r3
 80078ca:	f04f 0900 	mov.w	r9, #0
 80078ce:	341a      	adds	r4, #26
 80078d0:	454d      	cmp	r5, r9
 80078d2:	d11b      	bne.n	800790c <_printf_common+0xd8>
 80078d4:	2000      	movs	r0, #0
 80078d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078da:	2301      	movs	r3, #1
 80078dc:	4652      	mov	r2, sl
 80078de:	4639      	mov	r1, r7
 80078e0:	4630      	mov	r0, r6
 80078e2:	47c0      	blx	r8
 80078e4:	3001      	adds	r0, #1
 80078e6:	d103      	bne.n	80078f0 <_printf_common+0xbc>
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f0:	3501      	adds	r5, #1
 80078f2:	e7c2      	b.n	800787a <_printf_common+0x46>
 80078f4:	18e1      	adds	r1, r4, r3
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	2030      	movs	r0, #48	; 0x30
 80078fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078fe:	4422      	add	r2, r4
 8007900:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007904:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007908:	3302      	adds	r3, #2
 800790a:	e7c4      	b.n	8007896 <_printf_common+0x62>
 800790c:	2301      	movs	r3, #1
 800790e:	4622      	mov	r2, r4
 8007910:	4639      	mov	r1, r7
 8007912:	4630      	mov	r0, r6
 8007914:	47c0      	blx	r8
 8007916:	3001      	adds	r0, #1
 8007918:	d0e6      	beq.n	80078e8 <_printf_common+0xb4>
 800791a:	f109 0901 	add.w	r9, r9, #1
 800791e:	e7d7      	b.n	80078d0 <_printf_common+0x9c>

08007920 <_printf_i>:
 8007920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007924:	4617      	mov	r7, r2
 8007926:	7e0a      	ldrb	r2, [r1, #24]
 8007928:	b085      	sub	sp, #20
 800792a:	2a6e      	cmp	r2, #110	; 0x6e
 800792c:	4698      	mov	r8, r3
 800792e:	4606      	mov	r6, r0
 8007930:	460c      	mov	r4, r1
 8007932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007934:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007938:	f000 80bc 	beq.w	8007ab4 <_printf_i+0x194>
 800793c:	d81a      	bhi.n	8007974 <_printf_i+0x54>
 800793e:	2a63      	cmp	r2, #99	; 0x63
 8007940:	d02e      	beq.n	80079a0 <_printf_i+0x80>
 8007942:	d80a      	bhi.n	800795a <_printf_i+0x3a>
 8007944:	2a00      	cmp	r2, #0
 8007946:	f000 80c8 	beq.w	8007ada <_printf_i+0x1ba>
 800794a:	2a58      	cmp	r2, #88	; 0x58
 800794c:	f000 808a 	beq.w	8007a64 <_printf_i+0x144>
 8007950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007954:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007958:	e02a      	b.n	80079b0 <_printf_i+0x90>
 800795a:	2a64      	cmp	r2, #100	; 0x64
 800795c:	d001      	beq.n	8007962 <_printf_i+0x42>
 800795e:	2a69      	cmp	r2, #105	; 0x69
 8007960:	d1f6      	bne.n	8007950 <_printf_i+0x30>
 8007962:	6821      	ldr	r1, [r4, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	f011 0f80 	tst.w	r1, #128	; 0x80
 800796a:	d023      	beq.n	80079b4 <_printf_i+0x94>
 800796c:	1d11      	adds	r1, r2, #4
 800796e:	6019      	str	r1, [r3, #0]
 8007970:	6813      	ldr	r3, [r2, #0]
 8007972:	e027      	b.n	80079c4 <_printf_i+0xa4>
 8007974:	2a73      	cmp	r2, #115	; 0x73
 8007976:	f000 80b4 	beq.w	8007ae2 <_printf_i+0x1c2>
 800797a:	d808      	bhi.n	800798e <_printf_i+0x6e>
 800797c:	2a6f      	cmp	r2, #111	; 0x6f
 800797e:	d02a      	beq.n	80079d6 <_printf_i+0xb6>
 8007980:	2a70      	cmp	r2, #112	; 0x70
 8007982:	d1e5      	bne.n	8007950 <_printf_i+0x30>
 8007984:	680a      	ldr	r2, [r1, #0]
 8007986:	f042 0220 	orr.w	r2, r2, #32
 800798a:	600a      	str	r2, [r1, #0]
 800798c:	e003      	b.n	8007996 <_printf_i+0x76>
 800798e:	2a75      	cmp	r2, #117	; 0x75
 8007990:	d021      	beq.n	80079d6 <_printf_i+0xb6>
 8007992:	2a78      	cmp	r2, #120	; 0x78
 8007994:	d1dc      	bne.n	8007950 <_printf_i+0x30>
 8007996:	2278      	movs	r2, #120	; 0x78
 8007998:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800799c:	496e      	ldr	r1, [pc, #440]	; (8007b58 <_printf_i+0x238>)
 800799e:	e064      	b.n	8007a6a <_printf_i+0x14a>
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80079a6:	1d11      	adds	r1, r2, #4
 80079a8:	6019      	str	r1, [r3, #0]
 80079aa:	6813      	ldr	r3, [r2, #0]
 80079ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079b0:	2301      	movs	r3, #1
 80079b2:	e0a3      	b.n	8007afc <_printf_i+0x1dc>
 80079b4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80079b8:	f102 0104 	add.w	r1, r2, #4
 80079bc:	6019      	str	r1, [r3, #0]
 80079be:	d0d7      	beq.n	8007970 <_printf_i+0x50>
 80079c0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	da03      	bge.n	80079d0 <_printf_i+0xb0>
 80079c8:	222d      	movs	r2, #45	; 0x2d
 80079ca:	425b      	negs	r3, r3
 80079cc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80079d0:	4962      	ldr	r1, [pc, #392]	; (8007b5c <_printf_i+0x23c>)
 80079d2:	220a      	movs	r2, #10
 80079d4:	e017      	b.n	8007a06 <_printf_i+0xe6>
 80079d6:	6820      	ldr	r0, [r4, #0]
 80079d8:	6819      	ldr	r1, [r3, #0]
 80079da:	f010 0f80 	tst.w	r0, #128	; 0x80
 80079de:	d003      	beq.n	80079e8 <_printf_i+0xc8>
 80079e0:	1d08      	adds	r0, r1, #4
 80079e2:	6018      	str	r0, [r3, #0]
 80079e4:	680b      	ldr	r3, [r1, #0]
 80079e6:	e006      	b.n	80079f6 <_printf_i+0xd6>
 80079e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079ec:	f101 0004 	add.w	r0, r1, #4
 80079f0:	6018      	str	r0, [r3, #0]
 80079f2:	d0f7      	beq.n	80079e4 <_printf_i+0xc4>
 80079f4:	880b      	ldrh	r3, [r1, #0]
 80079f6:	4959      	ldr	r1, [pc, #356]	; (8007b5c <_printf_i+0x23c>)
 80079f8:	2a6f      	cmp	r2, #111	; 0x6f
 80079fa:	bf14      	ite	ne
 80079fc:	220a      	movne	r2, #10
 80079fe:	2208      	moveq	r2, #8
 8007a00:	2000      	movs	r0, #0
 8007a02:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007a06:	6865      	ldr	r5, [r4, #4]
 8007a08:	60a5      	str	r5, [r4, #8]
 8007a0a:	2d00      	cmp	r5, #0
 8007a0c:	f2c0 809c 	blt.w	8007b48 <_printf_i+0x228>
 8007a10:	6820      	ldr	r0, [r4, #0]
 8007a12:	f020 0004 	bic.w	r0, r0, #4
 8007a16:	6020      	str	r0, [r4, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d13f      	bne.n	8007a9c <_printf_i+0x17c>
 8007a1c:	2d00      	cmp	r5, #0
 8007a1e:	f040 8095 	bne.w	8007b4c <_printf_i+0x22c>
 8007a22:	4675      	mov	r5, lr
 8007a24:	2a08      	cmp	r2, #8
 8007a26:	d10b      	bne.n	8007a40 <_printf_i+0x120>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	07da      	lsls	r2, r3, #31
 8007a2c:	d508      	bpl.n	8007a40 <_printf_i+0x120>
 8007a2e:	6923      	ldr	r3, [r4, #16]
 8007a30:	6862      	ldr	r2, [r4, #4]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	bfde      	ittt	le
 8007a36:	2330      	movle	r3, #48	; 0x30
 8007a38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a40:	ebae 0305 	sub.w	r3, lr, r5
 8007a44:	6123      	str	r3, [r4, #16]
 8007a46:	f8cd 8000 	str.w	r8, [sp]
 8007a4a:	463b      	mov	r3, r7
 8007a4c:	aa03      	add	r2, sp, #12
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4630      	mov	r0, r6
 8007a52:	f7ff feef 	bl	8007834 <_printf_common>
 8007a56:	3001      	adds	r0, #1
 8007a58:	d155      	bne.n	8007b06 <_printf_i+0x1e6>
 8007a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5e:	b005      	add	sp, #20
 8007a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a64:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007a68:	493c      	ldr	r1, [pc, #240]	; (8007b5c <_printf_i+0x23c>)
 8007a6a:	6822      	ldr	r2, [r4, #0]
 8007a6c:	6818      	ldr	r0, [r3, #0]
 8007a6e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007a72:	f100 0504 	add.w	r5, r0, #4
 8007a76:	601d      	str	r5, [r3, #0]
 8007a78:	d001      	beq.n	8007a7e <_printf_i+0x15e>
 8007a7a:	6803      	ldr	r3, [r0, #0]
 8007a7c:	e002      	b.n	8007a84 <_printf_i+0x164>
 8007a7e:	0655      	lsls	r5, r2, #25
 8007a80:	d5fb      	bpl.n	8007a7a <_printf_i+0x15a>
 8007a82:	8803      	ldrh	r3, [r0, #0]
 8007a84:	07d0      	lsls	r0, r2, #31
 8007a86:	bf44      	itt	mi
 8007a88:	f042 0220 	orrmi.w	r2, r2, #32
 8007a8c:	6022      	strmi	r2, [r4, #0]
 8007a8e:	b91b      	cbnz	r3, 8007a98 <_printf_i+0x178>
 8007a90:	6822      	ldr	r2, [r4, #0]
 8007a92:	f022 0220 	bic.w	r2, r2, #32
 8007a96:	6022      	str	r2, [r4, #0]
 8007a98:	2210      	movs	r2, #16
 8007a9a:	e7b1      	b.n	8007a00 <_printf_i+0xe0>
 8007a9c:	4675      	mov	r5, lr
 8007a9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007aa2:	fb02 3310 	mls	r3, r2, r0, r3
 8007aa6:	5ccb      	ldrb	r3, [r1, r3]
 8007aa8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007aac:	4603      	mov	r3, r0
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d1f5      	bne.n	8007a9e <_printf_i+0x17e>
 8007ab2:	e7b7      	b.n	8007a24 <_printf_i+0x104>
 8007ab4:	6808      	ldr	r0, [r1, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	6949      	ldr	r1, [r1, #20]
 8007aba:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007abe:	d004      	beq.n	8007aca <_printf_i+0x1aa>
 8007ac0:	1d10      	adds	r0, r2, #4
 8007ac2:	6018      	str	r0, [r3, #0]
 8007ac4:	6813      	ldr	r3, [r2, #0]
 8007ac6:	6019      	str	r1, [r3, #0]
 8007ac8:	e007      	b.n	8007ada <_printf_i+0x1ba>
 8007aca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ace:	f102 0004 	add.w	r0, r2, #4
 8007ad2:	6018      	str	r0, [r3, #0]
 8007ad4:	6813      	ldr	r3, [r2, #0]
 8007ad6:	d0f6      	beq.n	8007ac6 <_printf_i+0x1a6>
 8007ad8:	8019      	strh	r1, [r3, #0]
 8007ada:	2300      	movs	r3, #0
 8007adc:	6123      	str	r3, [r4, #16]
 8007ade:	4675      	mov	r5, lr
 8007ae0:	e7b1      	b.n	8007a46 <_printf_i+0x126>
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	1d11      	adds	r1, r2, #4
 8007ae6:	6019      	str	r1, [r3, #0]
 8007ae8:	6815      	ldr	r5, [r2, #0]
 8007aea:	6862      	ldr	r2, [r4, #4]
 8007aec:	2100      	movs	r1, #0
 8007aee:	4628      	mov	r0, r5
 8007af0:	f7f8 fb6e 	bl	80001d0 <memchr>
 8007af4:	b108      	cbz	r0, 8007afa <_printf_i+0x1da>
 8007af6:	1b40      	subs	r0, r0, r5
 8007af8:	6060      	str	r0, [r4, #4]
 8007afa:	6863      	ldr	r3, [r4, #4]
 8007afc:	6123      	str	r3, [r4, #16]
 8007afe:	2300      	movs	r3, #0
 8007b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b04:	e79f      	b.n	8007a46 <_printf_i+0x126>
 8007b06:	6923      	ldr	r3, [r4, #16]
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4639      	mov	r1, r7
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	47c0      	blx	r8
 8007b10:	3001      	adds	r0, #1
 8007b12:	d0a2      	beq.n	8007a5a <_printf_i+0x13a>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	079b      	lsls	r3, r3, #30
 8007b18:	d507      	bpl.n	8007b2a <_printf_i+0x20a>
 8007b1a:	2500      	movs	r5, #0
 8007b1c:	f104 0919 	add.w	r9, r4, #25
 8007b20:	68e3      	ldr	r3, [r4, #12]
 8007b22:	9a03      	ldr	r2, [sp, #12]
 8007b24:	1a9b      	subs	r3, r3, r2
 8007b26:	429d      	cmp	r5, r3
 8007b28:	db05      	blt.n	8007b36 <_printf_i+0x216>
 8007b2a:	68e0      	ldr	r0, [r4, #12]
 8007b2c:	9b03      	ldr	r3, [sp, #12]
 8007b2e:	4298      	cmp	r0, r3
 8007b30:	bfb8      	it	lt
 8007b32:	4618      	movlt	r0, r3
 8007b34:	e793      	b.n	8007a5e <_printf_i+0x13e>
 8007b36:	2301      	movs	r3, #1
 8007b38:	464a      	mov	r2, r9
 8007b3a:	4639      	mov	r1, r7
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	47c0      	blx	r8
 8007b40:	3001      	adds	r0, #1
 8007b42:	d08a      	beq.n	8007a5a <_printf_i+0x13a>
 8007b44:	3501      	adds	r5, #1
 8007b46:	e7eb      	b.n	8007b20 <_printf_i+0x200>
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1a7      	bne.n	8007a9c <_printf_i+0x17c>
 8007b4c:	780b      	ldrb	r3, [r1, #0]
 8007b4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b56:	e765      	b.n	8007a24 <_printf_i+0x104>
 8007b58:	0800831e 	.word	0x0800831e
 8007b5c:	0800830d 	.word	0x0800830d

08007b60 <_sbrk_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4c06      	ldr	r4, [pc, #24]	; (8007b7c <_sbrk_r+0x1c>)
 8007b64:	2300      	movs	r3, #0
 8007b66:	4605      	mov	r5, r0
 8007b68:	4608      	mov	r0, r1
 8007b6a:	6023      	str	r3, [r4, #0]
 8007b6c:	f7f8 ffd6 	bl	8000b1c <_sbrk>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_sbrk_r+0x1a>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_sbrk_r+0x1a>
 8007b78:	602b      	str	r3, [r5, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20004bac 	.word	0x20004bac

08007b80 <__sread>:
 8007b80:	b510      	push	{r4, lr}
 8007b82:	460c      	mov	r4, r1
 8007b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b88:	f000 fa98 	bl	80080bc <_read_r>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	bfab      	itete	ge
 8007b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b92:	89a3      	ldrhlt	r3, [r4, #12]
 8007b94:	181b      	addge	r3, r3, r0
 8007b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b9a:	bfac      	ite	ge
 8007b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b9e:	81a3      	strhlt	r3, [r4, #12]
 8007ba0:	bd10      	pop	{r4, pc}

08007ba2 <__swrite>:
 8007ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba6:	461f      	mov	r7, r3
 8007ba8:	898b      	ldrh	r3, [r1, #12]
 8007baa:	05db      	lsls	r3, r3, #23
 8007bac:	4605      	mov	r5, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	d505      	bpl.n	8007bc0 <__swrite+0x1e>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bbc:	f000 f9b8 	bl	8007f30 <_lseek_r>
 8007bc0:	89a3      	ldrh	r3, [r4, #12]
 8007bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bca:	81a3      	strh	r3, [r4, #12]
 8007bcc:	4632      	mov	r2, r6
 8007bce:	463b      	mov	r3, r7
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd6:	f000 b869 	b.w	8007cac <_write_r>

08007bda <__sseek>:
 8007bda:	b510      	push	{r4, lr}
 8007bdc:	460c      	mov	r4, r1
 8007bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be2:	f000 f9a5 	bl	8007f30 <_lseek_r>
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	bf15      	itete	ne
 8007bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bf6:	81a3      	strheq	r3, [r4, #12]
 8007bf8:	bf18      	it	ne
 8007bfa:	81a3      	strhne	r3, [r4, #12]
 8007bfc:	bd10      	pop	{r4, pc}

08007bfe <__sclose>:
 8007bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c02:	f000 b8d3 	b.w	8007dac <_close_r>
	...

08007c08 <__swbuf_r>:
 8007c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0a:	460e      	mov	r6, r1
 8007c0c:	4614      	mov	r4, r2
 8007c0e:	4605      	mov	r5, r0
 8007c10:	b118      	cbz	r0, 8007c1a <__swbuf_r+0x12>
 8007c12:	6983      	ldr	r3, [r0, #24]
 8007c14:	b90b      	cbnz	r3, 8007c1a <__swbuf_r+0x12>
 8007c16:	f7ff fbe5 	bl	80073e4 <__sinit>
 8007c1a:	4b21      	ldr	r3, [pc, #132]	; (8007ca0 <__swbuf_r+0x98>)
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	d12a      	bne.n	8007c76 <__swbuf_r+0x6e>
 8007c20:	686c      	ldr	r4, [r5, #4]
 8007c22:	69a3      	ldr	r3, [r4, #24]
 8007c24:	60a3      	str	r3, [r4, #8]
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	071a      	lsls	r2, r3, #28
 8007c2a:	d52e      	bpl.n	8007c8a <__swbuf_r+0x82>
 8007c2c:	6923      	ldr	r3, [r4, #16]
 8007c2e:	b363      	cbz	r3, 8007c8a <__swbuf_r+0x82>
 8007c30:	6923      	ldr	r3, [r4, #16]
 8007c32:	6820      	ldr	r0, [r4, #0]
 8007c34:	1ac0      	subs	r0, r0, r3
 8007c36:	6963      	ldr	r3, [r4, #20]
 8007c38:	b2f6      	uxtb	r6, r6
 8007c3a:	4298      	cmp	r0, r3
 8007c3c:	4637      	mov	r7, r6
 8007c3e:	db04      	blt.n	8007c4a <__swbuf_r+0x42>
 8007c40:	4621      	mov	r1, r4
 8007c42:	4628      	mov	r0, r5
 8007c44:	f000 f94a 	bl	8007edc <_fflush_r>
 8007c48:	bb28      	cbnz	r0, 8007c96 <__swbuf_r+0x8e>
 8007c4a:	68a3      	ldr	r3, [r4, #8]
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	60a3      	str	r3, [r4, #8]
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	1c5a      	adds	r2, r3, #1
 8007c54:	6022      	str	r2, [r4, #0]
 8007c56:	701e      	strb	r6, [r3, #0]
 8007c58:	6963      	ldr	r3, [r4, #20]
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	4298      	cmp	r0, r3
 8007c5e:	d004      	beq.n	8007c6a <__swbuf_r+0x62>
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	07db      	lsls	r3, r3, #31
 8007c64:	d519      	bpl.n	8007c9a <__swbuf_r+0x92>
 8007c66:	2e0a      	cmp	r6, #10
 8007c68:	d117      	bne.n	8007c9a <__swbuf_r+0x92>
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f000 f935 	bl	8007edc <_fflush_r>
 8007c72:	b190      	cbz	r0, 8007c9a <__swbuf_r+0x92>
 8007c74:	e00f      	b.n	8007c96 <__swbuf_r+0x8e>
 8007c76:	4b0b      	ldr	r3, [pc, #44]	; (8007ca4 <__swbuf_r+0x9c>)
 8007c78:	429c      	cmp	r4, r3
 8007c7a:	d101      	bne.n	8007c80 <__swbuf_r+0x78>
 8007c7c:	68ac      	ldr	r4, [r5, #8]
 8007c7e:	e7d0      	b.n	8007c22 <__swbuf_r+0x1a>
 8007c80:	4b09      	ldr	r3, [pc, #36]	; (8007ca8 <__swbuf_r+0xa0>)
 8007c82:	429c      	cmp	r4, r3
 8007c84:	bf08      	it	eq
 8007c86:	68ec      	ldreq	r4, [r5, #12]
 8007c88:	e7cb      	b.n	8007c22 <__swbuf_r+0x1a>
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	f000 f81f 	bl	8007cd0 <__swsetup_r>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d0cc      	beq.n	8007c30 <__swbuf_r+0x28>
 8007c96:	f04f 37ff 	mov.w	r7, #4294967295
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	080082bc 	.word	0x080082bc
 8007ca4:	080082dc 	.word	0x080082dc
 8007ca8:	0800829c 	.word	0x0800829c

08007cac <_write_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4c07      	ldr	r4, [pc, #28]	; (8007ccc <_write_r+0x20>)
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	4608      	mov	r0, r1
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	6022      	str	r2, [r4, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f7f8 fd4a 	bl	8000754 <_write>
 8007cc0:	1c43      	adds	r3, r0, #1
 8007cc2:	d102      	bne.n	8007cca <_write_r+0x1e>
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	b103      	cbz	r3, 8007cca <_write_r+0x1e>
 8007cc8:	602b      	str	r3, [r5, #0]
 8007cca:	bd38      	pop	{r3, r4, r5, pc}
 8007ccc:	20004bac 	.word	0x20004bac

08007cd0 <__swsetup_r>:
 8007cd0:	4b32      	ldr	r3, [pc, #200]	; (8007d9c <__swsetup_r+0xcc>)
 8007cd2:	b570      	push	{r4, r5, r6, lr}
 8007cd4:	681d      	ldr	r5, [r3, #0]
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	460c      	mov	r4, r1
 8007cda:	b125      	cbz	r5, 8007ce6 <__swsetup_r+0x16>
 8007cdc:	69ab      	ldr	r3, [r5, #24]
 8007cde:	b913      	cbnz	r3, 8007ce6 <__swsetup_r+0x16>
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f7ff fb7f 	bl	80073e4 <__sinit>
 8007ce6:	4b2e      	ldr	r3, [pc, #184]	; (8007da0 <__swsetup_r+0xd0>)
 8007ce8:	429c      	cmp	r4, r3
 8007cea:	d10f      	bne.n	8007d0c <__swsetup_r+0x3c>
 8007cec:	686c      	ldr	r4, [r5, #4]
 8007cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	0715      	lsls	r5, r2, #28
 8007cf6:	d42c      	bmi.n	8007d52 <__swsetup_r+0x82>
 8007cf8:	06d0      	lsls	r0, r2, #27
 8007cfa:	d411      	bmi.n	8007d20 <__swsetup_r+0x50>
 8007cfc:	2209      	movs	r2, #9
 8007cfe:	6032      	str	r2, [r6, #0]
 8007d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d04:	81a3      	strh	r3, [r4, #12]
 8007d06:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0a:	bd70      	pop	{r4, r5, r6, pc}
 8007d0c:	4b25      	ldr	r3, [pc, #148]	; (8007da4 <__swsetup_r+0xd4>)
 8007d0e:	429c      	cmp	r4, r3
 8007d10:	d101      	bne.n	8007d16 <__swsetup_r+0x46>
 8007d12:	68ac      	ldr	r4, [r5, #8]
 8007d14:	e7eb      	b.n	8007cee <__swsetup_r+0x1e>
 8007d16:	4b24      	ldr	r3, [pc, #144]	; (8007da8 <__swsetup_r+0xd8>)
 8007d18:	429c      	cmp	r4, r3
 8007d1a:	bf08      	it	eq
 8007d1c:	68ec      	ldreq	r4, [r5, #12]
 8007d1e:	e7e6      	b.n	8007cee <__swsetup_r+0x1e>
 8007d20:	0751      	lsls	r1, r2, #29
 8007d22:	d512      	bpl.n	8007d4a <__swsetup_r+0x7a>
 8007d24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d26:	b141      	cbz	r1, 8007d3a <__swsetup_r+0x6a>
 8007d28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d2c:	4299      	cmp	r1, r3
 8007d2e:	d002      	beq.n	8007d36 <__swsetup_r+0x66>
 8007d30:	4630      	mov	r0, r6
 8007d32:	f000 f975 	bl	8008020 <_free_r>
 8007d36:	2300      	movs	r3, #0
 8007d38:	6363      	str	r3, [r4, #52]	; 0x34
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d40:	81a3      	strh	r3, [r4, #12]
 8007d42:	2300      	movs	r3, #0
 8007d44:	6063      	str	r3, [r4, #4]
 8007d46:	6923      	ldr	r3, [r4, #16]
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	f043 0308 	orr.w	r3, r3, #8
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	6923      	ldr	r3, [r4, #16]
 8007d54:	b94b      	cbnz	r3, 8007d6a <__swsetup_r+0x9a>
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d60:	d003      	beq.n	8007d6a <__swsetup_r+0x9a>
 8007d62:	4621      	mov	r1, r4
 8007d64:	4630      	mov	r0, r6
 8007d66:	f000 f919 	bl	8007f9c <__smakebuf_r>
 8007d6a:	89a2      	ldrh	r2, [r4, #12]
 8007d6c:	f012 0301 	ands.w	r3, r2, #1
 8007d70:	d00c      	beq.n	8007d8c <__swsetup_r+0xbc>
 8007d72:	2300      	movs	r3, #0
 8007d74:	60a3      	str	r3, [r4, #8]
 8007d76:	6963      	ldr	r3, [r4, #20]
 8007d78:	425b      	negs	r3, r3
 8007d7a:	61a3      	str	r3, [r4, #24]
 8007d7c:	6923      	ldr	r3, [r4, #16]
 8007d7e:	b953      	cbnz	r3, 8007d96 <__swsetup_r+0xc6>
 8007d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d84:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007d88:	d1ba      	bne.n	8007d00 <__swsetup_r+0x30>
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
 8007d8c:	0792      	lsls	r2, r2, #30
 8007d8e:	bf58      	it	pl
 8007d90:	6963      	ldrpl	r3, [r4, #20]
 8007d92:	60a3      	str	r3, [r4, #8]
 8007d94:	e7f2      	b.n	8007d7c <__swsetup_r+0xac>
 8007d96:	2000      	movs	r0, #0
 8007d98:	e7f7      	b.n	8007d8a <__swsetup_r+0xba>
 8007d9a:	bf00      	nop
 8007d9c:	20000014 	.word	0x20000014
 8007da0:	080082bc 	.word	0x080082bc
 8007da4:	080082dc 	.word	0x080082dc
 8007da8:	0800829c 	.word	0x0800829c

08007dac <_close_r>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	4c06      	ldr	r4, [pc, #24]	; (8007dc8 <_close_r+0x1c>)
 8007db0:	2300      	movs	r3, #0
 8007db2:	4605      	mov	r5, r0
 8007db4:	4608      	mov	r0, r1
 8007db6:	6023      	str	r3, [r4, #0]
 8007db8:	f7f8 fedc 	bl	8000b74 <_close>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d102      	bne.n	8007dc6 <_close_r+0x1a>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	b103      	cbz	r3, 8007dc6 <_close_r+0x1a>
 8007dc4:	602b      	str	r3, [r5, #0]
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	20004bac 	.word	0x20004bac

08007dcc <__sflush_r>:
 8007dcc:	898a      	ldrh	r2, [r1, #12]
 8007dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	0710      	lsls	r0, r2, #28
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	d45a      	bmi.n	8007e90 <__sflush_r+0xc4>
 8007dda:	684b      	ldr	r3, [r1, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dc05      	bgt.n	8007dec <__sflush_r+0x20>
 8007de0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	dc02      	bgt.n	8007dec <__sflush_r+0x20>
 8007de6:	2000      	movs	r0, #0
 8007de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dee:	2e00      	cmp	r6, #0
 8007df0:	d0f9      	beq.n	8007de6 <__sflush_r+0x1a>
 8007df2:	2300      	movs	r3, #0
 8007df4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007df8:	682f      	ldr	r7, [r5, #0]
 8007dfa:	602b      	str	r3, [r5, #0]
 8007dfc:	d033      	beq.n	8007e66 <__sflush_r+0x9a>
 8007dfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	075a      	lsls	r2, r3, #29
 8007e04:	d505      	bpl.n	8007e12 <__sflush_r+0x46>
 8007e06:	6863      	ldr	r3, [r4, #4]
 8007e08:	1ac0      	subs	r0, r0, r3
 8007e0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e0c:	b10b      	cbz	r3, 8007e12 <__sflush_r+0x46>
 8007e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e10:	1ac0      	subs	r0, r0, r3
 8007e12:	2300      	movs	r3, #0
 8007e14:	4602      	mov	r2, r0
 8007e16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e18:	6a21      	ldr	r1, [r4, #32]
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	47b0      	blx	r6
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	d106      	bne.n	8007e32 <__sflush_r+0x66>
 8007e24:	6829      	ldr	r1, [r5, #0]
 8007e26:	291d      	cmp	r1, #29
 8007e28:	d84b      	bhi.n	8007ec2 <__sflush_r+0xf6>
 8007e2a:	4a2b      	ldr	r2, [pc, #172]	; (8007ed8 <__sflush_r+0x10c>)
 8007e2c:	40ca      	lsrs	r2, r1
 8007e2e:	07d6      	lsls	r6, r2, #31
 8007e30:	d547      	bpl.n	8007ec2 <__sflush_r+0xf6>
 8007e32:	2200      	movs	r2, #0
 8007e34:	6062      	str	r2, [r4, #4]
 8007e36:	04d9      	lsls	r1, r3, #19
 8007e38:	6922      	ldr	r2, [r4, #16]
 8007e3a:	6022      	str	r2, [r4, #0]
 8007e3c:	d504      	bpl.n	8007e48 <__sflush_r+0x7c>
 8007e3e:	1c42      	adds	r2, r0, #1
 8007e40:	d101      	bne.n	8007e46 <__sflush_r+0x7a>
 8007e42:	682b      	ldr	r3, [r5, #0]
 8007e44:	b903      	cbnz	r3, 8007e48 <__sflush_r+0x7c>
 8007e46:	6560      	str	r0, [r4, #84]	; 0x54
 8007e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e4a:	602f      	str	r7, [r5, #0]
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	d0ca      	beq.n	8007de6 <__sflush_r+0x1a>
 8007e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e54:	4299      	cmp	r1, r3
 8007e56:	d002      	beq.n	8007e5e <__sflush_r+0x92>
 8007e58:	4628      	mov	r0, r5
 8007e5a:	f000 f8e1 	bl	8008020 <_free_r>
 8007e5e:	2000      	movs	r0, #0
 8007e60:	6360      	str	r0, [r4, #52]	; 0x34
 8007e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e66:	6a21      	ldr	r1, [r4, #32]
 8007e68:	2301      	movs	r3, #1
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	47b0      	blx	r6
 8007e6e:	1c41      	adds	r1, r0, #1
 8007e70:	d1c6      	bne.n	8007e00 <__sflush_r+0x34>
 8007e72:	682b      	ldr	r3, [r5, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0c3      	beq.n	8007e00 <__sflush_r+0x34>
 8007e78:	2b1d      	cmp	r3, #29
 8007e7a:	d001      	beq.n	8007e80 <__sflush_r+0xb4>
 8007e7c:	2b16      	cmp	r3, #22
 8007e7e:	d101      	bne.n	8007e84 <__sflush_r+0xb8>
 8007e80:	602f      	str	r7, [r5, #0]
 8007e82:	e7b0      	b.n	8007de6 <__sflush_r+0x1a>
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e8a:	81a3      	strh	r3, [r4, #12]
 8007e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e90:	690f      	ldr	r7, [r1, #16]
 8007e92:	2f00      	cmp	r7, #0
 8007e94:	d0a7      	beq.n	8007de6 <__sflush_r+0x1a>
 8007e96:	0793      	lsls	r3, r2, #30
 8007e98:	680e      	ldr	r6, [r1, #0]
 8007e9a:	bf08      	it	eq
 8007e9c:	694b      	ldreq	r3, [r1, #20]
 8007e9e:	600f      	str	r7, [r1, #0]
 8007ea0:	bf18      	it	ne
 8007ea2:	2300      	movne	r3, #0
 8007ea4:	eba6 0807 	sub.w	r8, r6, r7
 8007ea8:	608b      	str	r3, [r1, #8]
 8007eaa:	f1b8 0f00 	cmp.w	r8, #0
 8007eae:	dd9a      	ble.n	8007de6 <__sflush_r+0x1a>
 8007eb0:	4643      	mov	r3, r8
 8007eb2:	463a      	mov	r2, r7
 8007eb4:	6a21      	ldr	r1, [r4, #32]
 8007eb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007eb8:	4628      	mov	r0, r5
 8007eba:	47b0      	blx	r6
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	dc07      	bgt.n	8007ed0 <__sflush_r+0x104>
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed0:	4407      	add	r7, r0
 8007ed2:	eba8 0800 	sub.w	r8, r8, r0
 8007ed6:	e7e8      	b.n	8007eaa <__sflush_r+0xde>
 8007ed8:	20400001 	.word	0x20400001

08007edc <_fflush_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	690b      	ldr	r3, [r1, #16]
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	b1db      	cbz	r3, 8007f1e <_fflush_r+0x42>
 8007ee6:	b118      	cbz	r0, 8007ef0 <_fflush_r+0x14>
 8007ee8:	6983      	ldr	r3, [r0, #24]
 8007eea:	b90b      	cbnz	r3, 8007ef0 <_fflush_r+0x14>
 8007eec:	f7ff fa7a 	bl	80073e4 <__sinit>
 8007ef0:	4b0c      	ldr	r3, [pc, #48]	; (8007f24 <_fflush_r+0x48>)
 8007ef2:	429c      	cmp	r4, r3
 8007ef4:	d109      	bne.n	8007f0a <_fflush_r+0x2e>
 8007ef6:	686c      	ldr	r4, [r5, #4]
 8007ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007efc:	b17b      	cbz	r3, 8007f1e <_fflush_r+0x42>
 8007efe:	4621      	mov	r1, r4
 8007f00:	4628      	mov	r0, r5
 8007f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f06:	f7ff bf61 	b.w	8007dcc <__sflush_r>
 8007f0a:	4b07      	ldr	r3, [pc, #28]	; (8007f28 <_fflush_r+0x4c>)
 8007f0c:	429c      	cmp	r4, r3
 8007f0e:	d101      	bne.n	8007f14 <_fflush_r+0x38>
 8007f10:	68ac      	ldr	r4, [r5, #8]
 8007f12:	e7f1      	b.n	8007ef8 <_fflush_r+0x1c>
 8007f14:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <_fflush_r+0x50>)
 8007f16:	429c      	cmp	r4, r3
 8007f18:	bf08      	it	eq
 8007f1a:	68ec      	ldreq	r4, [r5, #12]
 8007f1c:	e7ec      	b.n	8007ef8 <_fflush_r+0x1c>
 8007f1e:	2000      	movs	r0, #0
 8007f20:	bd38      	pop	{r3, r4, r5, pc}
 8007f22:	bf00      	nop
 8007f24:	080082bc 	.word	0x080082bc
 8007f28:	080082dc 	.word	0x080082dc
 8007f2c:	0800829c 	.word	0x0800829c

08007f30 <_lseek_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4c07      	ldr	r4, [pc, #28]	; (8007f50 <_lseek_r+0x20>)
 8007f34:	4605      	mov	r5, r0
 8007f36:	4608      	mov	r0, r1
 8007f38:	4611      	mov	r1, r2
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	6022      	str	r2, [r4, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f7f8 fe3f 	bl	8000bc2 <_lseek>
 8007f44:	1c43      	adds	r3, r0, #1
 8007f46:	d102      	bne.n	8007f4e <_lseek_r+0x1e>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	b103      	cbz	r3, 8007f4e <_lseek_r+0x1e>
 8007f4c:	602b      	str	r3, [r5, #0]
 8007f4e:	bd38      	pop	{r3, r4, r5, pc}
 8007f50:	20004bac 	.word	0x20004bac

08007f54 <__swhatbuf_r>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	460e      	mov	r6, r1
 8007f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5c:	2900      	cmp	r1, #0
 8007f5e:	b090      	sub	sp, #64	; 0x40
 8007f60:	4614      	mov	r4, r2
 8007f62:	461d      	mov	r5, r3
 8007f64:	da07      	bge.n	8007f76 <__swhatbuf_r+0x22>
 8007f66:	2300      	movs	r3, #0
 8007f68:	602b      	str	r3, [r5, #0]
 8007f6a:	89b3      	ldrh	r3, [r6, #12]
 8007f6c:	061a      	lsls	r2, r3, #24
 8007f6e:	d410      	bmi.n	8007f92 <__swhatbuf_r+0x3e>
 8007f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f74:	e00e      	b.n	8007f94 <__swhatbuf_r+0x40>
 8007f76:	aa01      	add	r2, sp, #4
 8007f78:	f000 f8b2 	bl	80080e0 <_fstat_r>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	dbf2      	blt.n	8007f66 <__swhatbuf_r+0x12>
 8007f80:	9a02      	ldr	r2, [sp, #8]
 8007f82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f8a:	425a      	negs	r2, r3
 8007f8c:	415a      	adcs	r2, r3
 8007f8e:	602a      	str	r2, [r5, #0]
 8007f90:	e7ee      	b.n	8007f70 <__swhatbuf_r+0x1c>
 8007f92:	2340      	movs	r3, #64	; 0x40
 8007f94:	2000      	movs	r0, #0
 8007f96:	6023      	str	r3, [r4, #0]
 8007f98:	b010      	add	sp, #64	; 0x40
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}

08007f9c <__smakebuf_r>:
 8007f9c:	898b      	ldrh	r3, [r1, #12]
 8007f9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fa0:	079d      	lsls	r5, r3, #30
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	d507      	bpl.n	8007fb8 <__smakebuf_r+0x1c>
 8007fa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fac:	6023      	str	r3, [r4, #0]
 8007fae:	6123      	str	r3, [r4, #16]
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	6163      	str	r3, [r4, #20]
 8007fb4:	b002      	add	sp, #8
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
 8007fb8:	ab01      	add	r3, sp, #4
 8007fba:	466a      	mov	r2, sp
 8007fbc:	f7ff ffca 	bl	8007f54 <__swhatbuf_r>
 8007fc0:	9900      	ldr	r1, [sp, #0]
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	f7ff fa97 	bl	80074f8 <_malloc_r>
 8007fca:	b948      	cbnz	r0, 8007fe0 <__smakebuf_r+0x44>
 8007fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd0:	059a      	lsls	r2, r3, #22
 8007fd2:	d4ef      	bmi.n	8007fb4 <__smakebuf_r+0x18>
 8007fd4:	f023 0303 	bic.w	r3, r3, #3
 8007fd8:	f043 0302 	orr.w	r3, r3, #2
 8007fdc:	81a3      	strh	r3, [r4, #12]
 8007fde:	e7e3      	b.n	8007fa8 <__smakebuf_r+0xc>
 8007fe0:	4b0d      	ldr	r3, [pc, #52]	; (8008018 <__smakebuf_r+0x7c>)
 8007fe2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	6020      	str	r0, [r4, #0]
 8007fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fec:	81a3      	strh	r3, [r4, #12]
 8007fee:	9b00      	ldr	r3, [sp, #0]
 8007ff0:	6163      	str	r3, [r4, #20]
 8007ff2:	9b01      	ldr	r3, [sp, #4]
 8007ff4:	6120      	str	r0, [r4, #16]
 8007ff6:	b15b      	cbz	r3, 8008010 <__smakebuf_r+0x74>
 8007ff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	f000 f881 	bl	8008104 <_isatty_r>
 8008002:	b128      	cbz	r0, 8008010 <__smakebuf_r+0x74>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	f023 0303 	bic.w	r3, r3, #3
 800800a:	f043 0301 	orr.w	r3, r3, #1
 800800e:	81a3      	strh	r3, [r4, #12]
 8008010:	89a3      	ldrh	r3, [r4, #12]
 8008012:	431d      	orrs	r5, r3
 8008014:	81a5      	strh	r5, [r4, #12]
 8008016:	e7cd      	b.n	8007fb4 <__smakebuf_r+0x18>
 8008018:	08007365 	.word	0x08007365

0800801c <__malloc_lock>:
 800801c:	4770      	bx	lr

0800801e <__malloc_unlock>:
 800801e:	4770      	bx	lr

08008020 <_free_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4605      	mov	r5, r0
 8008024:	2900      	cmp	r1, #0
 8008026:	d045      	beq.n	80080b4 <_free_r+0x94>
 8008028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800802c:	1f0c      	subs	r4, r1, #4
 800802e:	2b00      	cmp	r3, #0
 8008030:	bfb8      	it	lt
 8008032:	18e4      	addlt	r4, r4, r3
 8008034:	f7ff fff2 	bl	800801c <__malloc_lock>
 8008038:	4a1f      	ldr	r2, [pc, #124]	; (80080b8 <_free_r+0x98>)
 800803a:	6813      	ldr	r3, [r2, #0]
 800803c:	4610      	mov	r0, r2
 800803e:	b933      	cbnz	r3, 800804e <_free_r+0x2e>
 8008040:	6063      	str	r3, [r4, #4]
 8008042:	6014      	str	r4, [r2, #0]
 8008044:	4628      	mov	r0, r5
 8008046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800804a:	f7ff bfe8 	b.w	800801e <__malloc_unlock>
 800804e:	42a3      	cmp	r3, r4
 8008050:	d90c      	bls.n	800806c <_free_r+0x4c>
 8008052:	6821      	ldr	r1, [r4, #0]
 8008054:	1862      	adds	r2, r4, r1
 8008056:	4293      	cmp	r3, r2
 8008058:	bf04      	itt	eq
 800805a:	681a      	ldreq	r2, [r3, #0]
 800805c:	685b      	ldreq	r3, [r3, #4]
 800805e:	6063      	str	r3, [r4, #4]
 8008060:	bf04      	itt	eq
 8008062:	1852      	addeq	r2, r2, r1
 8008064:	6022      	streq	r2, [r4, #0]
 8008066:	6004      	str	r4, [r0, #0]
 8008068:	e7ec      	b.n	8008044 <_free_r+0x24>
 800806a:	4613      	mov	r3, r2
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	b10a      	cbz	r2, 8008074 <_free_r+0x54>
 8008070:	42a2      	cmp	r2, r4
 8008072:	d9fa      	bls.n	800806a <_free_r+0x4a>
 8008074:	6819      	ldr	r1, [r3, #0]
 8008076:	1858      	adds	r0, r3, r1
 8008078:	42a0      	cmp	r0, r4
 800807a:	d10b      	bne.n	8008094 <_free_r+0x74>
 800807c:	6820      	ldr	r0, [r4, #0]
 800807e:	4401      	add	r1, r0
 8008080:	1858      	adds	r0, r3, r1
 8008082:	4282      	cmp	r2, r0
 8008084:	6019      	str	r1, [r3, #0]
 8008086:	d1dd      	bne.n	8008044 <_free_r+0x24>
 8008088:	6810      	ldr	r0, [r2, #0]
 800808a:	6852      	ldr	r2, [r2, #4]
 800808c:	605a      	str	r2, [r3, #4]
 800808e:	4401      	add	r1, r0
 8008090:	6019      	str	r1, [r3, #0]
 8008092:	e7d7      	b.n	8008044 <_free_r+0x24>
 8008094:	d902      	bls.n	800809c <_free_r+0x7c>
 8008096:	230c      	movs	r3, #12
 8008098:	602b      	str	r3, [r5, #0]
 800809a:	e7d3      	b.n	8008044 <_free_r+0x24>
 800809c:	6820      	ldr	r0, [r4, #0]
 800809e:	1821      	adds	r1, r4, r0
 80080a0:	428a      	cmp	r2, r1
 80080a2:	bf04      	itt	eq
 80080a4:	6811      	ldreq	r1, [r2, #0]
 80080a6:	6852      	ldreq	r2, [r2, #4]
 80080a8:	6062      	str	r2, [r4, #4]
 80080aa:	bf04      	itt	eq
 80080ac:	1809      	addeq	r1, r1, r0
 80080ae:	6021      	streq	r1, [r4, #0]
 80080b0:	605c      	str	r4, [r3, #4]
 80080b2:	e7c7      	b.n	8008044 <_free_r+0x24>
 80080b4:	bd38      	pop	{r3, r4, r5, pc}
 80080b6:	bf00      	nop
 80080b8:	20004aa0 	.word	0x20004aa0

080080bc <_read_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	4c07      	ldr	r4, [pc, #28]	; (80080dc <_read_r+0x20>)
 80080c0:	4605      	mov	r5, r0
 80080c2:	4608      	mov	r0, r1
 80080c4:	4611      	mov	r1, r2
 80080c6:	2200      	movs	r2, #0
 80080c8:	6022      	str	r2, [r4, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	f7f8 fd08 	bl	8000ae0 <_read>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d102      	bne.n	80080da <_read_r+0x1e>
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	b103      	cbz	r3, 80080da <_read_r+0x1e>
 80080d8:	602b      	str	r3, [r5, #0]
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	20004bac 	.word	0x20004bac

080080e0 <_fstat_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	4c07      	ldr	r4, [pc, #28]	; (8008100 <_fstat_r+0x20>)
 80080e4:	2300      	movs	r3, #0
 80080e6:	4605      	mov	r5, r0
 80080e8:	4608      	mov	r0, r1
 80080ea:	4611      	mov	r1, r2
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	f7f8 fd4d 	bl	8000b8c <_fstat>
 80080f2:	1c43      	adds	r3, r0, #1
 80080f4:	d102      	bne.n	80080fc <_fstat_r+0x1c>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	b103      	cbz	r3, 80080fc <_fstat_r+0x1c>
 80080fa:	602b      	str	r3, [r5, #0]
 80080fc:	bd38      	pop	{r3, r4, r5, pc}
 80080fe:	bf00      	nop
 8008100:	20004bac 	.word	0x20004bac

08008104 <_isatty_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4c06      	ldr	r4, [pc, #24]	; (8008120 <_isatty_r+0x1c>)
 8008108:	2300      	movs	r3, #0
 800810a:	4605      	mov	r5, r0
 800810c:	4608      	mov	r0, r1
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	f7f8 fd4c 	bl	8000bac <_isatty>
 8008114:	1c43      	adds	r3, r0, #1
 8008116:	d102      	bne.n	800811e <_isatty_r+0x1a>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	b103      	cbz	r3, 800811e <_isatty_r+0x1a>
 800811c:	602b      	str	r3, [r5, #0]
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	20004bac 	.word	0x20004bac

08008124 <_init>:
 8008124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008126:	bf00      	nop
 8008128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812a:	bc08      	pop	{r3}
 800812c:	469e      	mov	lr, r3
 800812e:	4770      	bx	lr

08008130 <_fini>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	bf00      	nop
 8008134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008136:	bc08      	pop	{r3}
 8008138:	469e      	mov	lr, r3
 800813a:	4770      	bx	lr
